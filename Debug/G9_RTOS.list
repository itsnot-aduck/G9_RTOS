
G9_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800c600  0800c600  0001c600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb8  0800cdb8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc0  0800cdc0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc0  0800cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cdc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c78  200001e4  0800cfac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e5c  0800cfac  00024e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdb2  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003feb  00000000  00000000  0003d009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  00040ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138e  00000000  00000000  00042908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019997  00000000  00000000  00043c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5c3  00000000  00000000  0005d62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb4a  00000000  00000000  0007abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d2c  00000000  00000000  0011773c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  0011f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5e8 	.word	0x0800c5e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800c5e8 	.word	0x0800c5e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f003 f875 	bl	800406c <HAL_TIM_Base_Start>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000f9e:	bf00      	nop
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f9      	bcc.n	8000fa0 <DELAY_TIM_Us+0x16>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b088      	sub	sp, #32
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht->Pin;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f107 020c 	add.w	r2, r7, #12
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fd10 	bl	8002a10 <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht->Pin;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	889b      	ldrh	r3, [r3, #4]
 8001014:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fcf1 	bl	8002a10 <HAL_GPIO_Init>
}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	78fa      	ldrb	r2, [r7, #3]
 800104c:	4619      	mov	r1, r3
 800104e:	f001 fe7b 	bl	8002d48 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f001 fe53 	bl	8002d18 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
    return value;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff71 	bl	8000f74 <DELAY_TIM_Init>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff6b 	bl	8000f8a <DELAY_TIM_Us>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff95 	bl	8000ff8 <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffb0 	bl	8001036 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 80010d6:	f244 6150 	movw	r1, #18000	; 0x4650
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffdd 	bl	800109a <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff6a 	bl	8000fba <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffd6 	bl	800109a <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb3 	bl	800105a <DHT11_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d112      	bne.n	8001120 <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 80010fa:	2150      	movs	r1, #80	; 0x50
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffcc 	bl	800109a <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa9 	bl	800105a <DHT11_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 8001112:	bf00      	nop
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffa0 	bl	800105a <DHT11_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d0f9      	beq.n	8001114 <DHT11_Start+0x58>
        }
    }

    return status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff3f 	bl	8000fba <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	e035      	b.n	80011ae <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 8001142:	bf00      	nop
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff88 	bl	800105a <DHT11_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f9      	beq.n	8001144 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 8001150:	2128      	movs	r1, #40	; 0x28
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa1 	bl	800109a <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff7e 	bl	800105a <DHT11_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d10c      	bne.n	800117e <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2201      	movs	r2, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	b25a      	sxtb	r2, r3
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4313      	orrs	r3, r2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e00d      	b.n	800119a <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	f1c3 0307 	rsb	r3, r3, #7
 8001184:	2201      	movs	r2, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	b25b      	sxtb	r3, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	b25a      	sxtb	r2, r3
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	4013      	ands	r3, r2
 8001196:	b25b      	sxtb	r3, r3
 8001198:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 800119a:	bf00      	nop
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff5c 	bl	800105a <DHT11_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d0f9      	beq.n	800119c <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	3301      	adds	r3, #1
 80011ac:	73bb      	strb	r3, [r7, #14]
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d9c6      	bls.n	8001142 <DHT11_ReadByte+0x18>
    }

    return value;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <DHT11_Init+0x3c>)
 80011e6:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <DHT11_Init+0x3c>)
 80011ec:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff ff46 	bl	8001080 <DHT11_DelayInit>
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	bf800000 	.word	0xbf800000

08001200 <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff53 	bl	80010bc <DHT11_Start>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d15b      	bne.n	80012d8 <DHT11_GetData+0xd8>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff82 	bl	800112a <DHT11_ReadByte>
 8001226:	4603      	mov	r3, r0
 8001228:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff7d 	bl	800112a <DHT11_ReadByte>
 8001230:	4603      	mov	r3, r0
 8001232:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff78 	bl	800112a <DHT11_ReadByte>
 800123a:	4603      	mov	r3, r0
 800123c:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff73 	bl	800112a <DHT11_ReadByte>
 8001244:	4603      	mov	r3, r0
 8001246:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff6e 	bl	800112a <DHT11_ReadByte>
 800124e:	4603      	mov	r3, r0
 8001250:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 8001252:	7aba      	ldrb	r2, [r7, #10]
 8001254:	7bb9      	ldrb	r1, [r7, #14]
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	4419      	add	r1, r3
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	4419      	add	r1, r3
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	440b      	add	r3, r1
 8001262:	429a      	cmp	r2, r3
 8001264:	d136      	bne.n	80012d4 <DHT11_GetData+0xd4>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f96e 	bl	8000554 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <DHT11_GetData+0xe8>)
 800127e:	f7ff fafd 	bl	800087c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fca5 	bl	8000bd8 <__aeabi_d2f>
 800128e:	ee07 0a90 	vmov	s15, r0
 8001292:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	edc3 7a04 	vstr	s15, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f953 	bl	8000554 <__aeabi_i2d>
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <DHT11_GetData+0xe8>)
 80012b4:	f7ff fae2 	bl	800087c <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc8a 	bl	8000bd8 <__aeabi_d2f>
 80012c4:	ee07 0a90 	vmov	s15, r0
 80012c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edc3 7a03 	vstr	s15, [r3, #12]
 80012d2:	e001      	b.n	80012d8 <DHT11_GetData+0xd8>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 80012d4:	2302      	movs	r3, #2
 80012d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	ecbd 8b02 	vpop	{d8}
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40240000 	.word	0x40240000

080012ec <SRF05_DELAY_Us>:
#define TRIG_LOW()		HAL_GPIO_WritePin(SRF05->TRIGGER_GPIOx, SRF05->TRIGGER_GPIO_Pin, GPIO_PIN_RESET)
#define READ_ECHO() 	HAL_GPIO_ReadPin(SRF05->ECHO_GPIOx, SRF05->ECHO_GPIO_Pin)
extern TIM_HandleTypeDef htim4;

static void SRF05_DELAY_Us(uint16_t Time)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	DELAY_TIM_Us(&htim4, Time); // thay the ham nay neu su dung ham delay khac
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <SRF05_DELAY_Us+0x1c>)
 80012fc:	f7ff fe45 	bl	8000f8a <DELAY_TIM_Us>

}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000254 	.word	0x20000254

0800130c <SRF05_Init>:

//************************* HIGH Level Layer **********************************************************/
// function:  init SRF05
// input: SRF05 target, TRIG pin, Echo Pin
// output: 0 false, 1 true
uint8_t SRF05_Init(SRF05_Device_Name* SRF05, GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin, GPIO_TypeDef* TRIGGER_GPIOx, uint16_t TRIGGER_GPIO_Pin) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	80fb      	strh	r3, [r7, #6]

	SRF05->ECHO_GPIOx = ECHO_GPIOx;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	601a      	str	r2, [r3, #0]
	SRF05->ECHO_GPIO_Pin = ECHO_GPIO_Pin;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	809a      	strh	r2, [r3, #4]
	SRF05->TRIGGER_GPIOx = TRIGGER_GPIOx;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	609a      	str	r2, [r3, #8]
	SRF05->TRIGGER_GPIO_Pin = TRIGGER_GPIO_Pin;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8b3a      	ldrh	r2, [r7, #24]
 8001332:	819a      	strh	r2, [r3, #12]
	TRIG_LOW();
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6898      	ldr	r0, [r3, #8]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	899b      	ldrh	r3, [r3, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	f001 fd02 	bl	8002d48 <HAL_GPIO_WritePin>
	if (SRF05_Read(SRF05) >= 0) {
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 f80f 	bl	8001368 <SRF05_Read>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	db01      	blt.n	800135c <SRF05_Init+0x50>
		return 1;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <SRF05_Init+0x52>
	}
	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <SRF05_Read>:

float SRF05_Read(SRF05_Device_Name* SRF05) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	uint32_t time, timeout;

	TRIG_LOW();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6898      	ldr	r0, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	899b      	ldrh	r3, [r3, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	f001 fce4 	bl	8002d48 <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(2);
 8001380:	2002      	movs	r0, #2
 8001382:	f7ff ffb3 	bl	80012ec <SRF05_DELAY_Us>
	TRIG_HIGH();
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6898      	ldr	r0, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	899b      	ldrh	r3, [r3, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f001 fcd9 	bl	8002d48 <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(10);
 8001396:	200a      	movs	r0, #10
 8001398:	f7ff ffa8 	bl	80012ec <SRF05_DELAY_Us>
	TRIG_LOW();
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6898      	ldr	r0, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	899b      	ldrh	r3, [r3, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	f001 fcce 	bl	8002d48 <HAL_GPIO_WritePin>
	timeout = SRF05_TIMEOUT;
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <SRF05_Read+0xc0>)
 80013ae:	60bb      	str	r3, [r7, #8]
	while (!READ_ECHO())
 80013b0:	e006      	b.n	80013c0 <SRF05_Read+0x58>
	{
		if (timeout-- == 0x00)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <SRF05_Read+0x58>
		{
			return -1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <SRF05_Read+0xc4>)
 80013be:	e02c      	b.n	800141a <SRF05_Read+0xb2>
	while (!READ_ECHO())
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	889b      	ldrh	r3, [r3, #4]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f001 fca4 	bl	8002d18 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ed      	beq.n	80013b2 <SRF05_Read+0x4a>
		}
	}
	time = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	while (READ_ECHO())
 80013da:	e005      	b.n	80013e8 <SRF05_Read+0x80>
	{
		time++;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
		SRF05_DELAY_Us(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff ff82 	bl	80012ec <SRF05_DELAY_Us>
	while (READ_ECHO())
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	889b      	ldrh	r3, [r3, #4]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f001 fc90 	bl	8002d18 <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ee      	bne.n	80013dc <SRF05_Read+0x74>
	}
	SRF05->Distance =  (float)time * SRF05_NUMBER;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001408:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001430 <SRF05_Read+0xc8>
 800140c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edc3 7a04 	vstr	s15, [r3, #16]

	return SRF05->Distance;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
}
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	000f4240 	.word	0x000f4240
 800142c:	bf800000 	.word	0xbf800000
 8001430:	3c8cc17a 	.word	0x3c8cc17a

08001434 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
 8001440:	4613      	mov	r3, r2
 8001442:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	f023 030f 	bic.w	r3, r3, #15
 800144a:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7adb      	ldrb	r3, [r3, #11]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 800146a:	78bb      	ldrb	r3, [r7, #2]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	e00a      	b.n	8001498 <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 8001482:	78bb      	ldrb	r3, [r7, #2]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f001 f91c 	bl	80026e0 <HAL_Delay>
	Data_I2C[1] = Data_H;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f001 f912 	bl	80026e0 <HAL_Delay>
	Data_I2C[3] = Data_L;
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	b299      	uxth	r1, r3
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2304      	movs	r3, #4
 80014d6:	f001 fd95 	bl	8003004 <HAL_I2C_Master_Transmit>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	460b      	mov	r3, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	79ba      	ldrb	r2, [r7, #6]
 8001508:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	7e3a      	ldrb	r2, [r7, #24]
 800150e:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2228      	movs	r2, #40	; 0x28
 8001514:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2206      	movs	r2, #6
 800151a:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	220c      	movs	r2, #12
 8001520:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2214      	movs	r2, #20
 8001526:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2208      	movs	r2, #8
 800152c:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 800152e:	2032      	movs	r0, #50	; 0x32
 8001530:	f001 f8d6 	bl	80026e0 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001534:	2200      	movs	r2, #0
 8001536:	2133      	movs	r1, #51	; 0x33
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff7b 	bl	8001434 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 800153e:	2200      	movs	r2, #0
 8001540:	2133      	movs	r1, #51	; 0x33
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff76 	bl	8001434 <LCD_Write>
	LCD_DelayMs(5);
 8001548:	2005      	movs	r0, #5
 800154a:	f001 f8c9 	bl	80026e0 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 800154e:	2200      	movs	r2, #0
 8001550:	2132      	movs	r1, #50	; 0x32
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff ff6e 	bl	8001434 <LCD_Write>
	LCD_DelayMs(5);
 8001558:	2005      	movs	r0, #5
 800155a:	f001 f8c1 	bl	80026e0 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 800155e:	2200      	movs	r2, #0
 8001560:	2120      	movs	r1, #32
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff ff66 	bl	8001434 <LCD_Write>
	LCD_DelayMs(5);
 8001568:	2005      	movs	r0, #5
 800156a:	f001 f8b9 	bl	80026e0 <HAL_Delay>

	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	79db      	ldrb	r3, [r3, #7]
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff ff5c 	bl	8001434 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff ff55 	bl	8001434 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	7a5b      	ldrb	r3, [r3, #9]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff ff4e 	bl	8001434 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	7a9b      	ldrb	r3, [r3, #10]
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff ff47 	bl	8001434 <LCD_Write>

	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2101      	movs	r1, #1
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff ff42 	bl	8001434 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2102      	movs	r1, #2
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7ff ff3d 	bl	8001434 <LCD_Write>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff2d 	bl	8001434 <LCD_Write>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
	while(*string)
 80015ec:	e007      	b.n	80015fe <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	603a      	str	r2, [r7, #0]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ffe2 	bl	80015c2 <LCD_WriteChar>
	while(*string)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f3      	bne.n	80015ee <LCD_WriteString+0xc>
	}
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 8001618:	2200      	movs	r2, #0
 800161a:	2101      	movs	r1, #1
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff09 	bl	8001434 <LCD_Write>
	LCD_DelayMs(5);
 8001622:	2005      	movs	r0, #5
 8001624:	f001 f85c 	bl	80026e0 <HAL_Delay>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	795b      	ldrb	r3, [r3, #5]
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	429a      	cmp	r2, r3
 800164c:	d303      	bcc.n	8001656 <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	795b      	ldrb	r3, [r3, #5]
 8001652:	3b01      	subs	r3, #1
 8001654:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	799b      	ldrb	r3, [r3, #6]
 800165a:	78ba      	ldrb	r2, [r7, #2]
 800165c:	429a      	cmp	r2, r3
 800165e:	d303      	bcc.n	8001668 <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	799b      	ldrb	r3, [r3, #6]
 8001664:	3b01      	subs	r3, #1
 8001666:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 8001668:	78bb      	ldrb	r3, [r7, #2]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d819      	bhi.n	80016a2 <LCD_SetCursor+0x72>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <LCD_SetCursor+0x44>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001685 	.word	0x08001685
 8001678:	0800168b 	.word	0x0800168b
 800167c:	08001693 	.word	0x08001693
 8001680:	0800169b 	.word	0x0800169b
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	73fb      	strb	r3, [r7, #15]
			break;
 8001688:	e00b      	b.n	80016a2 <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	3340      	adds	r3, #64	; 0x40
 800168e:	73fb      	strb	r3, [r7, #15]
			break;
 8001690:	e007      	b.n	80016a2 <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	3314      	adds	r3, #20
 8001696:	73fb      	strb	r3, [r7, #15]
			break;
 8001698:	e003      	b.n	80016a2 <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	3354      	adds	r3, #84	; 0x54
 800169e:	73fb      	strb	r3, [r7, #15]
			break;
 80016a0:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fec0 	bl	8001434 <LCD_Write>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80016c4:	1d39      	adds	r1, r7, #4
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	2201      	movs	r2, #1
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <__io_putchar+0x20>)
 80016ce:	f003 f961 	bl	8004994 <HAL_UART_Transmit>

	return ch;
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000029c 	.word	0x2000029c

080016e0 <HAL_UART_RxCpltCallback>:

/* Interrupt handler */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_UART_RxCpltCallback+0x8c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d12d      	bne.n	8001750 <HAL_UART_RxCpltCallback+0x70>
	{
		if (rxData[rxDataIndex] == '\n')
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_UART_RxCpltCallback+0x90>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_UART_RxCpltCallback+0x94>)
 80016fc:	5c9b      	ldrb	r3, [r3, r2]
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d120      	bne.n	8001744 <HAL_UART_RxCpltCallback+0x64>
		{
			rxData[rxDataIndex] = '\0';
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_UART_RxCpltCallback+0x90>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_UART_RxCpltCallback+0x94>)
 800170a:	2100      	movs	r1, #0
 800170c:	5499      	strb	r1, [r3, r2]
			printf("\nCommand: %s\r\n", rxData);
 800170e:	4919      	ldr	r1, [pc, #100]	; (8001774 <HAL_UART_RxCpltCallback+0x94>)
 8001710:	4819      	ldr	r0, [pc, #100]	; (8001778 <HAL_UART_RxCpltCallback+0x98>)
 8001712:	f008 fd43 	bl	800a19c <iprintf>
			rxDataIndex = 0;
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_UART_RxCpltCallback+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			if (osThreadGetPriority(HandleInterruptHandle) != osPriorityHigh)
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_UART_RxCpltCallback+0x9c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f004 fa9c 	bl	8005c5e <osThreadGetPriority>
 8001726:	4603      	mov	r3, r0
 8001728:	2b28      	cmp	r3, #40	; 0x28
 800172a:	d005      	beq.n	8001738 <HAL_UART_RxCpltCallback+0x58>
			{
				osThreadSetPriority(HandleInterruptHandle, osPriorityHigh);
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_UART_RxCpltCallback+0x9c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2128      	movs	r1, #40	; 0x28
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fa69 	bl	8005c0a <osThreadSetPriority>
			}
			osSemaphoreRelease(IRQSemHandle);
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_RxCpltCallback+0xa0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fc11 	bl	8005f64 <osSemaphoreRelease>
 8001742:	e005      	b.n	8001750 <HAL_UART_RxCpltCallback+0x70>
		}
		else
		{
			rxDataIndex ++;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_UART_RxCpltCallback+0x90>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_UART_RxCpltCallback+0x90>)
 800174e:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataIndex], 1);
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_UART_RxCpltCallback+0x90>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_UART_RxCpltCallback+0x94>)
 8001758:	4413      	add	r3, r2
 800175a:	2201      	movs	r2, #1
 800175c:	4619      	mov	r1, r3
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <HAL_UART_RxCpltCallback+0x8c>)
 8001760:	f003 f9a3 	bl	8004aaa <HAL_UART_Receive_IT>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000029c 	.word	0x2000029c
 8001770:	20000360 	.word	0x20000360
 8001774:	2000034c 	.word	0x2000034c
 8001778:	0800c648 	.word	0x0800c648
 800177c:	200002f0 	.word	0x200002f0
 8001780:	200002fc 	.word	0x200002fc

08001784 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800178a:	f000 ff67 	bl	800265c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800178e:	f000 f8b1 	bl	80018f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001792:	f000 f9bf 	bl	8001b14 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001796:	f000 f993 	bl	8001ac0 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 800179a:	f000 f915 	bl	80019c8 <MX_I2C2_Init>
	MX_TIM4_Init();
 800179e:	f000 f941 	bl	8001a24 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	printf("Start\r\n\n");
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <main+0xf4>)
 80017a4:	f008 fd60 	bl	800a268 <puts>
	DHT11_Init(&dht, DHT_GPIO_Port, DHT_Pin, &htim4);
 80017a8:	4b34      	ldr	r3, [pc, #208]	; (800187c <main+0xf8>)
 80017aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ae:	4934      	ldr	r1, [pc, #208]	; (8001880 <main+0xfc>)
 80017b0:	4834      	ldr	r0, [pc, #208]	; (8001884 <main+0x100>)
 80017b2:	f7ff fd05 	bl	80011c0 <DHT11_Init>
	LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 80017b6:	2304      	movs	r3, #4
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2314      	movs	r3, #20
 80017bc:	224e      	movs	r2, #78	; 0x4e
 80017be:	4932      	ldr	r1, [pc, #200]	; (8001888 <main+0x104>)
 80017c0:	4832      	ldr	r0, [pc, #200]	; (800188c <main+0x108>)
 80017c2:	f7ff fe8e 	bl	80014e2 <LCD_Init>
	SRF05_Init(&hrf05, ECHO_GPIO_Port, ECHO_Pin, TRIG_GPIO_Port, TRIG_Pin);
 80017c6:	2302      	movs	r3, #2
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <main+0x10c>)
 80017cc:	2210      	movs	r2, #16
 80017ce:	4930      	ldr	r1, [pc, #192]	; (8001890 <main+0x10c>)
 80017d0:	4830      	ldr	r0, [pc, #192]	; (8001894 <main+0x110>)
 80017d2:	f7ff fd9b 	bl	800130c <SRF05_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataIndex], 1);
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <main+0x114>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <main+0x118>)
 80017de:	4413      	add	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	4619      	mov	r1, r3
 80017e4:	482e      	ldr	r0, [pc, #184]	; (80018a0 <main+0x11c>)
 80017e6:	f003 f960 	bl	8004aaa <HAL_UART_Receive_IT>
	LCD_SetCursor(&lcd, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	4827      	ldr	r0, [pc, #156]	; (800188c <main+0x108>)
 80017f0:	f7ff ff1e 	bl	8001630 <LCD_SetCursor>
	LCD_WriteString(&lcd, "Hello");
 80017f4:	492b      	ldr	r1, [pc, #172]	; (80018a4 <main+0x120>)
 80017f6:	4825      	ldr	r0, [pc, #148]	; (800188c <main+0x108>)
 80017f8:	f7ff fef3 	bl	80015e2 <LCD_WriteString>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80017fc:	f004 f914 	bl	8005a28 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of DataSem */
	DataSemHandle = osSemaphoreNew(1, 0, &DataSem_attributes);
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <main+0x124>)
 8001802:	2100      	movs	r1, #0
 8001804:	2001      	movs	r0, #1
 8001806:	f004 fad1 	bl	8005dac <osSemaphoreNew>
 800180a:	4603      	mov	r3, r0
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <main+0x128>)
 800180e:	6013      	str	r3, [r2, #0]

	/* creation of IRQSem */
	IRQSemHandle = osSemaphoreNew(1, 0, &IRQSem_attributes);
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <main+0x12c>)
 8001812:	2100      	movs	r1, #0
 8001814:	2001      	movs	r0, #1
 8001816:	f004 fac9 	bl	8005dac <osSemaphoreNew>
 800181a:	4603      	mov	r3, r0
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <main+0x130>)
 800181e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001820:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <main+0x134>)
 8001822:	2100      	movs	r1, #0
 8001824:	4825      	ldr	r0, [pc, #148]	; (80018bc <main+0x138>)
 8001826:	f004 f95e 	bl	8005ae6 <osThreadNew>
 800182a:	4603      	mov	r3, r0
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <main+0x13c>)
 800182e:	6013      	str	r3, [r2, #0]

	/* creation of ReadDHT */
	ReadDHTHandle = osThreadNew(vTask_ReadDHT, NULL, &ReadDHT_attributes);
 8001830:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <main+0x140>)
 8001832:	2100      	movs	r1, #0
 8001834:	4824      	ldr	r0, [pc, #144]	; (80018c8 <main+0x144>)
 8001836:	f004 f956 	bl	8005ae6 <osThreadNew>
 800183a:	4603      	mov	r3, r0
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <main+0x148>)
 800183e:	6013      	str	r3, [r2, #0]

	/* creation of ReadDist */
	ReadDistHandle = osThreadNew(vTask_ReadDist, NULL, &ReadDist_attributes);
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <main+0x14c>)
 8001842:	2100      	movs	r1, #0
 8001844:	4823      	ldr	r0, [pc, #140]	; (80018d4 <main+0x150>)
 8001846:	f004 f94e 	bl	8005ae6 <osThreadNew>
 800184a:	4603      	mov	r3, r0
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <main+0x154>)
 800184e:	6013      	str	r3, [r2, #0]

	/* creation of HandleInterrupt */
	HandleInterruptHandle = osThreadNew(vTask_InterruptHandler, NULL, &HandleInterrupt_attributes);
 8001850:	4a22      	ldr	r2, [pc, #136]	; (80018dc <main+0x158>)
 8001852:	2100      	movs	r1, #0
 8001854:	4822      	ldr	r0, [pc, #136]	; (80018e0 <main+0x15c>)
 8001856:	f004 f946 	bl	8005ae6 <osThreadNew>
 800185a:	4603      	mov	r3, r0
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <main+0x160>)
 800185e:	6013      	str	r3, [r2, #0]

	/* creation of Display */
	DisplayHandle = osThreadNew(vTask_Display, NULL, &Display_attributes);
 8001860:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <main+0x164>)
 8001862:	2100      	movs	r1, #0
 8001864:	4821      	ldr	r0, [pc, #132]	; (80018ec <main+0x168>)
 8001866:	f004 f93e 	bl	8005ae6 <osThreadNew>
 800186a:	4603      	mov	r3, r0
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <main+0x16c>)
 800186e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001870:	f004 f8fe 	bl	8005a70 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001874:	e7fe      	b.n	8001874 <main+0xf0>
 8001876:	bf00      	nop
 8001878:	0800c658 	.word	0x0800c658
 800187c:	20000254 	.word	0x20000254
 8001880:	40020400 	.word	0x40020400
 8001884:	20000300 	.word	0x20000300
 8001888:	20000200 	.word	0x20000200
 800188c:	20000314 	.word	0x20000314
 8001890:	40020000 	.word	0x40020000
 8001894:	20000320 	.word	0x20000320
 8001898:	20000360 	.word	0x20000360
 800189c:	2000034c 	.word	0x2000034c
 80018a0:	2000029c 	.word	0x2000029c
 80018a4:	0800c660 	.word	0x0800c660
 80018a8:	0800c9b4 	.word	0x0800c9b4
 80018ac:	200002f8 	.word	0x200002f8
 80018b0:	0800c9c4 	.word	0x0800c9c4
 80018b4:	200002fc 	.word	0x200002fc
 80018b8:	0800c900 	.word	0x0800c900
 80018bc:	08001bfd 	.word	0x08001bfd
 80018c0:	200002e4 	.word	0x200002e4
 80018c4:	0800c924 	.word	0x0800c924
 80018c8:	08001c0d 	.word	0x08001c0d
 80018cc:	200002e8 	.word	0x200002e8
 80018d0:	0800c948 	.word	0x0800c948
 80018d4:	08001ce9 	.word	0x08001ce9
 80018d8:	200002ec 	.word	0x200002ec
 80018dc:	0800c96c 	.word	0x0800c96c
 80018e0:	08001d79 	.word	0x08001d79
 80018e4:	200002f0 	.word	0x200002f0
 80018e8:	0800c990 	.word	0x0800c990
 80018ec:	08001f05 	.word	0x08001f05
 80018f0:	200002f4 	.word	0x200002f4

080018f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	; 0x50
 80018f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2230      	movs	r2, #48	; 0x30
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f008 fdb0 	bl	800a468 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <SystemClock_Config+0xcc>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <SystemClock_Config+0xcc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <SystemClock_Config+0xd0>)
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <SystemClock_Config+0xd0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195c:	2310      	movs	r3, #16
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001960:	2302      	movs	r3, #2
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001964:	2300      	movs	r3, #0
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001968:	2308      	movs	r3, #8
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800196c:	2354      	movs	r3, #84	; 0x54
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001974:	2304      	movs	r3, #4
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fe9b 	bl	80036b8 <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001988:	f000 fbce 	bl	8002128 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2102      	movs	r1, #2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 f8fd 	bl	8003ba8 <HAL_RCC_ClockConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80019b4:	f000 fbb8 	bl	8002128 <Error_Handler>
	}
}
 80019b8:	bf00      	nop
 80019ba:	3750      	adds	r7, #80	; 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <MX_I2C2_Init+0x54>)
 80019d0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_I2C2_Init+0x58>)
 80019d6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ea:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_I2C2_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_I2C2_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_I2C2_Init+0x50>)
 8001a06:	f001 f9b9 	bl	8002d7c <HAL_I2C_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001a10:	f000 fb8a 	bl	8002128 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000200 	.word	0x20000200
 8001a1c:	40005800 	.word	0x40005800
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <MX_TIM4_Init+0x98>)
 8001a44:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 83;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a48:	2253      	movs	r2, #83	; 0x53
 8001a4a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a58:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a68:	f002 fab0 	bl	8003fcc <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8001a72:	f000 fb59 	bl	8002128 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4619      	mov	r1, r3
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a84:	f002 fc9e 	bl	80043c4 <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8001a8e:	f000 fb4b 	bl	8002128 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001aa0:	f002 fea6 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8001aaa:	f000 fb3d 	bl	8002128 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000254 	.word	0x20000254
 8001abc:	40000800 	.word	0x40000800

08001ac0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001ac8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001af8:	f002 fefc 	bl	80048f4 <HAL_UART_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001b02:	f000 fb11 	bl	8002128 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000029c 	.word	0x2000029c
 8001b10:	40004400 	.word	0x40004400

08001b14 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_GPIO_Init+0xdc>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2102      	movs	r1, #2
 8001b82:	481c      	ldr	r0, [pc, #112]	; (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b84:	f001 f8e0 	bl	8002d48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <MX_GPIO_Init+0xe4>)
 8001b90:	f001 f8da 	bl	8002d48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TRIG_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin;
 8001b94:	2302      	movs	r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <MX_GPIO_Init+0xe0>)
 8001bac:	f000 ff30 	bl	8002a10 <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO_Pin */
	GPIO_InitStruct.Pin = ECHO_Pin;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <MX_GPIO_Init+0xe0>)
 8001bc4:	f000 ff24 	bl	8002a10 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT_Pin */
	GPIO_InitStruct.Pin = DHT_Pin;
 8001bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bcc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_GPIO_Init+0xe4>)
 8001be2:	f000 ff15 	bl	8002a10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400

08001bfc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f004 f889 	bl	8005d1c <osDelay>
 8001c0a:	e7fb      	b.n	8001c04 <StartDefaultTask+0x8>

08001c0c <vTask_ReadDHT>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTask_ReadDHT */
void vTask_ReadDHT(void *argument)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vTask_ReadDHT */
	int32_t tick = osKernelGetTickCount();
 8001c14:	f003 ff52 	bl	8005abc <osKernelGetTickCount>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <vTask_ReadDHT+0xb4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f004 f9e3 	bl	8005fec <osSemaphoreGetCount>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <vTask_ReadDHT+0x2e>
		{
			osSemaphoreAcquire(DataSemHandle, osWaitForever);
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <vTask_ReadDHT+0xb4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f943 	bl	8005ec0 <osSemaphoreAcquire>
		}
		tick = tick + dhtInterval;
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <vTask_ReadDHT+0xb8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
		printf("vTask_ReadDHT IN: %ld\r\n", osKernelGetTickCount());
 8001c44:	f003 ff3a 	bl	8005abc <osKernelGetTickCount>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481e      	ldr	r0, [pc, #120]	; (8001cc8 <vTask_ReadDHT+0xbc>)
 8001c4e:	f008 faa5 	bl	800a19c <iprintf>
		SRF05_Read(&hrf05);
 8001c52:	481e      	ldr	r0, [pc, #120]	; (8001ccc <vTask_ReadDHT+0xc0>)
 8001c54:	f7ff fb88 	bl	8001368 <SRF05_Read>
		SenseData.dist = hrf05.Distance;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <vTask_ReadDHT+0xc0>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <vTask_ReadDHT+0xc4>)
 8001c5e:	6053      	str	r3, [r2, #4]
		printf("vTask_ReadDHT OUT: %ld\r\n\n", osKernelGetTickCount());
 8001c60:	f003 ff2c 	bl	8005abc <osKernelGetTickCount>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	481a      	ldr	r0, [pc, #104]	; (8001cd4 <vTask_ReadDHT+0xc8>)
 8001c6a:	f008 fa97 	bl	800a19c <iprintf>
		dhtStatus = DHT11_GetData(&dht);
 8001c6e:	481a      	ldr	r0, [pc, #104]	; (8001cd8 <vTask_ReadDHT+0xcc>)
 8001c70:	f7ff fac6 	bl	8001200 <DHT11_GetData>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <vTask_ReadDHT+0xd0>)
 8001c7a:	701a      	strb	r2, [r3, #0]
		switch(dhtStatus)
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <vTask_ReadDHT+0xd0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d005      	beq.n	8001c90 <vTask_ReadDHT+0x84>
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d107      	bne.n	8001c98 <vTask_ReadDHT+0x8c>
		{
		case DHT11_ERR_CHECKSUM:
			printf("DHT11 ERROR CHECKSUM\r\n");
 8001c88:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <vTask_ReadDHT+0xd4>)
 8001c8a:	f008 faed 	bl	800a268 <puts>
			break;
 8001c8e:	e00c      	b.n	8001caa <vTask_ReadDHT+0x9e>
		case DHT11_ERR_RESPONSE:
			printf("DHT11 ERROR RESPONSE\r\n");
 8001c90:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <vTask_ReadDHT+0xd8>)
 8001c92:	f008 fae9 	bl	800a268 <puts>
			break;
 8001c96:	e008      	b.n	8001caa <vTask_ReadDHT+0x9e>
		default:
			SenseData.humi = dht.Humi;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <vTask_ReadDHT+0xcc>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <vTask_ReadDHT+0xc4>)
 8001c9e:	6013      	str	r3, [r2, #0]
			SenseData.temp = dht.Temp;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <vTask_ReadDHT+0xcc>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <vTask_ReadDHT+0xc4>)
 8001ca6:	6093      	str	r3, [r2, #8]
			break;
 8001ca8:	bf00      	nop
		}

		osSemaphoreRelease(DataSemHandle);
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <vTask_ReadDHT+0xb4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 f958 	bl	8005f64 <osSemaphoreRelease>

		osDelayUntil(tick);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 f84b 	bl	8005d52 <osDelayUntil>
		if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001cbc:	e7ae      	b.n	8001c1c <vTask_ReadDHT+0x10>
 8001cbe:	bf00      	nop
 8001cc0:	200002f8 	.word	0x200002f8
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	0800c668 	.word	0x0800c668
 8001ccc:	20000320 	.word	0x20000320
 8001cd0:	20000364 	.word	0x20000364
 8001cd4:	0800c680 	.word	0x0800c680
 8001cd8:	20000300 	.word	0x20000300
 8001cdc:	20000334 	.word	0x20000334
 8001ce0:	0800c69c 	.word	0x0800c69c
 8001ce4:	0800c6b4 	.word	0x0800c6b4

08001ce8 <vTask_ReadDist>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTask_ReadDist */
void vTask_ReadDist(void *argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vTask_ReadDist */
	int32_t tick = osKernelGetTickCount();
 8001cf0:	f003 fee4 	bl	8005abc <osKernelGetTickCount>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <vTask_ReadDist+0x78>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 f975 	bl	8005fec <osSemaphoreGetCount>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <vTask_ReadDist+0x2e>
		{
			osSemaphoreAcquire(DataSemHandle, osWaitForever);
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <vTask_ReadDist+0x78>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f8d5 	bl	8005ec0 <osSemaphoreAcquire>
		}
		tick = tick + distInterval;
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <vTask_ReadDist+0x7c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
		printf("vTask_ReadDist IN: %ld\r\n", osKernelGetTickCount());
 8001d20:	f003 fecc 	bl	8005abc <osKernelGetTickCount>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4619      	mov	r1, r3
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <vTask_ReadDist+0x80>)
 8001d2a:	f008 fa37 	bl	800a19c <iprintf>
		SRF05_Read(&hrf05);
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <vTask_ReadDist+0x84>)
 8001d30:	f7ff fb1a 	bl	8001368 <SRF05_Read>
		SenseData.dist = hrf05.Distance;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <vTask_ReadDist+0x84>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <vTask_ReadDist+0x88>)
 8001d3a:	6053      	str	r3, [r2, #4]
		printf("vTask_ReadDist OUT: %ld\r\n\n", osKernelGetTickCount());
 8001d3c:	f003 febe 	bl	8005abc <osKernelGetTickCount>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <vTask_ReadDist+0x8c>)
 8001d46:	f008 fa29 	bl	800a19c <iprintf>

		osSemaphoreRelease(DataSemHandle);
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <vTask_ReadDist+0x78>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 f908 	bl	8005f64 <osSemaphoreRelease>

		osDelayUntil(tick);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fffb 	bl	8005d52 <osDelayUntil>
		if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001d5c:	e7cc      	b.n	8001cf8 <vTask_ReadDist+0x10>
 8001d5e:	bf00      	nop
 8001d60:	200002f8 	.word	0x200002f8
 8001d64:	20000008 	.word	0x20000008
 8001d68:	0800c6cc 	.word	0x0800c6cc
 8001d6c:	20000320 	.word	0x20000320
 8001d70:	20000364 	.word	0x20000364
 8001d74:	0800c6e8 	.word	0x0800c6e8

08001d78 <vTask_InterruptHandler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTask_InterruptHandler */
void vTask_InterruptHandler(void *argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vTask_InterruptHandler */
	/* Infinite loop */
	for(;;)
	{
		/* Temporary pause others tasks */
		osSemaphoreAcquire(IRQSemHandle, osWaitForever);
 8001d80:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <vTask_InterruptHandler+0x134>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f899 	bl	8005ec0 <osSemaphoreAcquire>
		osThreadSuspend(ReadDistHandle);
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <vTask_InterruptHandler+0x138>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 ff80 	bl	8005c98 <osThreadSuspend>
		osThreadSuspend(ReadDHTHandle);
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <vTask_InterruptHandler+0x13c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 ff7b 	bl	8005c98 <osThreadSuspend>
		osThreadSuspend(DisplayHandle);
 8001da2:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <vTask_InterruptHandler+0x140>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 ff76 	bl	8005c98 <osThreadSuspend>

		/* Interrupt handler */
		char *command = strtok((char*)rxData, " ");
 8001dac:	4943      	ldr	r1, [pc, #268]	; (8001ebc <vTask_InterruptHandler+0x144>)
 8001dae:	4844      	ldr	r0, [pc, #272]	; (8001ec0 <vTask_InterruptHandler+0x148>)
 8001db0:	f008 fb62 	bl	800a478 <strtok>
 8001db4:	6178      	str	r0, [r7, #20]
		char *time = strtok(NULL, " ");
 8001db6:	4941      	ldr	r1, [pc, #260]	; (8001ebc <vTask_InterruptHandler+0x144>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f008 fb5d 	bl	800a478 <strtok>
 8001dbe:	6138      	str	r0, [r7, #16]
		if (NULL == time){
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13b      	bne.n	8001e3e <vTask_InterruptHandler+0xc6>
			if (strcmp((const char*)rxData, "displaytemp") == 0)
 8001dc6:	493f      	ldr	r1, [pc, #252]	; (8001ec4 <vTask_InterruptHandler+0x14c>)
 8001dc8:	483d      	ldr	r0, [pc, #244]	; (8001ec0 <vTask_InterruptHandler+0x148>)
 8001dca:	f7fe fa09 	bl	80001e0 <strcmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <vTask_InterruptHandler+0x6a>
			{
				DisplayMode = DISPLAY_TEMP;
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <vTask_InterruptHandler+0x150>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 8001dda:	483c      	ldr	r0, [pc, #240]	; (8001ecc <vTask_InterruptHandler+0x154>)
 8001ddc:	f008 fa44 	bl	800a268 <puts>
 8001de0:	e053      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
			else if (strcmp((const char*)rxData, "displayhumi") == 0)
 8001de2:	493b      	ldr	r1, [pc, #236]	; (8001ed0 <vTask_InterruptHandler+0x158>)
 8001de4:	4836      	ldr	r0, [pc, #216]	; (8001ec0 <vTask_InterruptHandler+0x148>)
 8001de6:	f7fe f9fb 	bl	80001e0 <strcmp>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <vTask_InterruptHandler+0x86>
			{
				DisplayMode = DISPLAY_HUMI;
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <vTask_InterruptHandler+0x150>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 8001df6:	4837      	ldr	r0, [pc, #220]	; (8001ed4 <vTask_InterruptHandler+0x15c>)
 8001df8:	f008 fa36 	bl	800a268 <puts>
 8001dfc:	e045      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
			else if (strcmp((const char*)rxData, "displaydist") == 0)
 8001dfe:	4936      	ldr	r1, [pc, #216]	; (8001ed8 <vTask_InterruptHandler+0x160>)
 8001e00:	482f      	ldr	r0, [pc, #188]	; (8001ec0 <vTask_InterruptHandler+0x148>)
 8001e02:	f7fe f9ed 	bl	80001e0 <strcmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <vTask_InterruptHandler+0xa2>
			{
				DisplayMode = DISPLAY_DISTANCE;
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <vTask_InterruptHandler+0x150>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_DIST\r\n\n");
 8001e12:	4832      	ldr	r0, [pc, #200]	; (8001edc <vTask_InterruptHandler+0x164>)
 8001e14:	f008 fa28 	bl	800a268 <puts>
 8001e18:	e037      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
			else if (strcmp((const char*)rxData, "displayboth") == 0)
 8001e1a:	4931      	ldr	r1, [pc, #196]	; (8001ee0 <vTask_InterruptHandler+0x168>)
 8001e1c:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <vTask_InterruptHandler+0x148>)
 8001e1e:	f7fe f9df 	bl	80001e0 <strcmp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <vTask_InterruptHandler+0xbe>
			{
				DisplayMode = DISPLAY_ALL;
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <vTask_InterruptHandler+0x150>)
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_ALL\r\n\n");
 8001e2e:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <vTask_InterruptHandler+0x16c>)
 8001e30:	f008 fa1a 	bl	800a268 <puts>
 8001e34:	e029      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 8001e36:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <vTask_InterruptHandler+0x170>)
 8001e38:	f008 fa16 	bl	800a268 <puts>
 8001e3c:	e025      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
		}
		else {
			uint32_t pTime = atoi(time);
 8001e3e:	6938      	ldr	r0, [r7, #16]
 8001e40:	f007 fbf4 	bl	800962c <atoi>
 8001e44:	4603      	mov	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]
			if (strcmp((const char*)command, "timedht1") == 0)
 8001e48:	4928      	ldr	r1, [pc, #160]	; (8001eec <vTask_InterruptHandler+0x174>)
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7fe f9c8 	bl	80001e0 <strcmp>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <vTask_InterruptHandler+0xee>
			{
				dhtInterval = pTime;
 8001e56:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <vTask_InterruptHandler+0x178>)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6013      	str	r3, [r2, #0]
				printf("Change period of dht time to %ld\r\n", pTime);
 8001e5c:	68f9      	ldr	r1, [r7, #12]
 8001e5e:	4825      	ldr	r0, [pc, #148]	; (8001ef4 <vTask_InterruptHandler+0x17c>)
 8001e60:	f008 f99c 	bl	800a19c <iprintf>
 8001e64:	e011      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
			else if (strcmp((const char*)command, "timedist") == 0)
 8001e66:	4924      	ldr	r1, [pc, #144]	; (8001ef8 <vTask_InterruptHandler+0x180>)
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f7fe f9b9 	bl	80001e0 <strcmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <vTask_InterruptHandler+0x10c>
			{
				distInterval = pTime;
 8001e74:	4a21      	ldr	r2, [pc, #132]	; (8001efc <vTask_InterruptHandler+0x184>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6013      	str	r3, [r2, #0]
				printf("Change period of dist time to %ld\r\n", pTime);
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	4820      	ldr	r0, [pc, #128]	; (8001f00 <vTask_InterruptHandler+0x188>)
 8001e7e:	f008 f98d 	bl	800a19c <iprintf>
 8001e82:	e002      	b.n	8001e8a <vTask_InterruptHandler+0x112>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 8001e84:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <vTask_InterruptHandler+0x170>)
 8001e86:	f008 f9ef 	bl	800a268 <puts>
			}
		}
		/* let continue others */
		osThreadResume(ReadDistHandle);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <vTask_InterruptHandler+0x138>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 ff23 	bl	8005cda <osThreadResume>
		osThreadResume(ReadDHTHandle);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <vTask_InterruptHandler+0x13c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 ff1e 	bl	8005cda <osThreadResume>
		osThreadResume(DisplayHandle);
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <vTask_InterruptHandler+0x140>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 ff19 	bl	8005cda <osThreadResume>
	{
 8001ea8:	e76a      	b.n	8001d80 <vTask_InterruptHandler+0x8>
 8001eaa:	bf00      	nop
 8001eac:	200002fc 	.word	0x200002fc
 8001eb0:	200002ec 	.word	0x200002ec
 8001eb4:	200002e8 	.word	0x200002e8
 8001eb8:	200002f4 	.word	0x200002f4
 8001ebc:	0800c704 	.word	0x0800c704
 8001ec0:	2000034c 	.word	0x2000034c
 8001ec4:	0800c708 	.word	0x0800c708
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	0800c714 	.word	0x0800c714
 8001ed0:	0800c73c 	.word	0x0800c73c
 8001ed4:	0800c748 	.word	0x0800c748
 8001ed8:	0800c770 	.word	0x0800c770
 8001edc:	0800c77c 	.word	0x0800c77c
 8001ee0:	0800c7a4 	.word	0x0800c7a4
 8001ee4:	0800c7b0 	.word	0x0800c7b0
 8001ee8:	0800c7d8 	.word	0x0800c7d8
 8001eec:	0800c7f0 	.word	0x0800c7f0
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	0800c7fc 	.word	0x0800c7fc
 8001ef8:	0800c820 	.word	0x0800c820
 8001efc:	20000008 	.word	0x20000008
 8001f00:	0800c82c 	.word	0x0800c82c

08001f04 <vTask_Display>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTask_Display */
void vTask_Display(void *argument)
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vTask_Display */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(DataSemHandle, osWaitForever);
 8001f0c:	4b6e      	ldr	r3, [pc, #440]	; (80020c8 <vTask_Display+0x1c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 ffd3 	bl	8005ec0 <osSemaphoreAcquire>
		printf("vTask_Display IN: %ld\r\n", osKernelGetTickCount());
 8001f1a:	f003 fdcf 	bl	8005abc <osKernelGetTickCount>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4619      	mov	r1, r3
 8001f22:	486a      	ldr	r0, [pc, #424]	; (80020cc <vTask_Display+0x1c8>)
 8001f24:	f008 f93a 	bl	800a19c <iprintf>

		if (dhtStatus == DHT11_OK)
 8001f28:	4b69      	ldr	r3, [pc, #420]	; (80020d0 <vTask_Display+0x1cc>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 80c2 	bne.w	80020b6 <vTask_Display+0x1b2>
		{
			LCD_Clear(&lcd);
 8001f32:	4868      	ldr	r0, [pc, #416]	; (80020d4 <vTask_Display+0x1d0>)
 8001f34:	f7ff fb6c 	bl	8001610 <LCD_Clear>
			switch (DisplayMode){
 8001f38:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <vTask_Display+0x1d4>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	f200 80ba 	bhi.w	80020b6 <vTask_Display+0x1b2>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <vTask_Display+0x44>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001fd5 	.word	0x08001fd5
 8001f50:	08001f97 	.word	0x08001f97
 8001f54:	08002013 	.word	0x08002013
			case DISPLAY_DISTANCE:
				sprintf(temp, "D: %.2f", SenseData.dist);
 8001f58:	4b60      	ldr	r3, [pc, #384]	; (80020dc <vTask_Display+0x1d8>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fb0b 	bl	8000578 <__aeabi_f2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	495e      	ldr	r1, [pc, #376]	; (80020e0 <vTask_Display+0x1dc>)
 8001f68:	485e      	ldr	r0, [pc, #376]	; (80020e4 <vTask_Display+0x1e0>)
 8001f6a:	f008 f985 	bl	800a278 <siprintf>
				LCD_SetCursor(&lcd, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	4858      	ldr	r0, [pc, #352]	; (80020d4 <vTask_Display+0x1d0>)
 8001f74:	f7ff fb5c 	bl	8001630 <LCD_SetCursor>
				LCD_WriteString(&lcd, temp);
 8001f78:	495a      	ldr	r1, [pc, #360]	; (80020e4 <vTask_Display+0x1e0>)
 8001f7a:	4856      	ldr	r0, [pc, #344]	; (80020d4 <vTask_Display+0x1d0>)
 8001f7c:	f7ff fb31 	bl	80015e2 <LCD_WriteString>
				printf("Distance: %.2f\r\n", SenseData.dist);
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <vTask_Display+0x1d8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe faf7 	bl	8000578 <__aeabi_f2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4856      	ldr	r0, [pc, #344]	; (80020e8 <vTask_Display+0x1e4>)
 8001f90:	f008 f904 	bl	800a19c <iprintf>
				break;
 8001f94:	e08f      	b.n	80020b6 <vTask_Display+0x1b2>
			case DISPLAY_HUMI:
				sprintf(temp, "H: %.2f", SenseData.humi);
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <vTask_Display+0x1d8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe faec 	bl	8000578 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4951      	ldr	r1, [pc, #324]	; (80020ec <vTask_Display+0x1e8>)
 8001fa6:	484f      	ldr	r0, [pc, #316]	; (80020e4 <vTask_Display+0x1e0>)
 8001fa8:	f008 f966 	bl	800a278 <siprintf>
				LCD_SetCursor(&lcd, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4848      	ldr	r0, [pc, #288]	; (80020d4 <vTask_Display+0x1d0>)
 8001fb2:	f7ff fb3d 	bl	8001630 <LCD_SetCursor>
				LCD_WriteString(&lcd, temp);
 8001fb6:	494b      	ldr	r1, [pc, #300]	; (80020e4 <vTask_Display+0x1e0>)
 8001fb8:	4846      	ldr	r0, [pc, #280]	; (80020d4 <vTask_Display+0x1d0>)
 8001fba:	f7ff fb12 	bl	80015e2 <LCD_WriteString>
				printf("Humidity: %.2f\r\n", SenseData.humi);
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <vTask_Display+0x1d8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fad8 	bl	8000578 <__aeabi_f2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4848      	ldr	r0, [pc, #288]	; (80020f0 <vTask_Display+0x1ec>)
 8001fce:	f008 f8e5 	bl	800a19c <iprintf>
				break;
 8001fd2:	e070      	b.n	80020b6 <vTask_Display+0x1b2>
			case DISPLAY_TEMP:
				sprintf(temp, "T: %.2f", SenseData.temp);
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <vTask_Display+0x1d8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe facd 	bl	8000578 <__aeabi_f2d>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4944      	ldr	r1, [pc, #272]	; (80020f4 <vTask_Display+0x1f0>)
 8001fe4:	483f      	ldr	r0, [pc, #252]	; (80020e4 <vTask_Display+0x1e0>)
 8001fe6:	f008 f947 	bl	800a278 <siprintf>
				LCD_SetCursor(&lcd, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	4839      	ldr	r0, [pc, #228]	; (80020d4 <vTask_Display+0x1d0>)
 8001ff0:	f7ff fb1e 	bl	8001630 <LCD_SetCursor>
				LCD_WriteString(&lcd, temp);
 8001ff4:	493b      	ldr	r1, [pc, #236]	; (80020e4 <vTask_Display+0x1e0>)
 8001ff6:	4837      	ldr	r0, [pc, #220]	; (80020d4 <vTask_Display+0x1d0>)
 8001ff8:	f7ff faf3 	bl	80015e2 <LCD_WriteString>
				printf("Temperature: %.2f\r\n", SenseData.temp);
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <vTask_Display+0x1d8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fab9 	bl	8000578 <__aeabi_f2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	483b      	ldr	r0, [pc, #236]	; (80020f8 <vTask_Display+0x1f4>)
 800200c:	f008 f8c6 	bl	800a19c <iprintf>
				break;
 8002010:	e051      	b.n	80020b6 <vTask_Display+0x1b2>
			case DISPLAY_ALL:
				sprintf(temp, "T: %.2f D: %.2f", SenseData.temp, SenseData.dist);
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <vTask_Display+0x1d8>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe faae 	bl	8000578 <__aeabi_f2d>
 800201c:	4604      	mov	r4, r0
 800201e:	460d      	mov	r5, r1
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <vTask_Display+0x1d8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe faa7 	bl	8000578 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9cd 2300 	strd	r2, r3, [sp]
 8002032:	4622      	mov	r2, r4
 8002034:	462b      	mov	r3, r5
 8002036:	4931      	ldr	r1, [pc, #196]	; (80020fc <vTask_Display+0x1f8>)
 8002038:	482a      	ldr	r0, [pc, #168]	; (80020e4 <vTask_Display+0x1e0>)
 800203a:	f008 f91d 	bl	800a278 <siprintf>
				LCD_SetCursor(&lcd, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	4824      	ldr	r0, [pc, #144]	; (80020d4 <vTask_Display+0x1d0>)
 8002044:	f7ff faf4 	bl	8001630 <LCD_SetCursor>
				LCD_WriteString(&lcd, temp);
 8002048:	4926      	ldr	r1, [pc, #152]	; (80020e4 <vTask_Display+0x1e0>)
 800204a:	4822      	ldr	r0, [pc, #136]	; (80020d4 <vTask_Display+0x1d0>)
 800204c:	f7ff fac9 	bl	80015e2 <LCD_WriteString>
				sprintf(temp, "H: %.2f", SenseData.humi);
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <vTask_Display+0x1d8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa8f 	bl	8000578 <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4923      	ldr	r1, [pc, #140]	; (80020ec <vTask_Display+0x1e8>)
 8002060:	4820      	ldr	r0, [pc, #128]	; (80020e4 <vTask_Display+0x1e0>)
 8002062:	f008 f909 	bl	800a278 <siprintf>
				LCD_SetCursor(&lcd, 0, 1);
 8002066:	2201      	movs	r2, #1
 8002068:	2100      	movs	r1, #0
 800206a:	481a      	ldr	r0, [pc, #104]	; (80020d4 <vTask_Display+0x1d0>)
 800206c:	f7ff fae0 	bl	8001630 <LCD_SetCursor>
				LCD_WriteString(&lcd, temp);
 8002070:	491c      	ldr	r1, [pc, #112]	; (80020e4 <vTask_Display+0x1e0>)
 8002072:	4818      	ldr	r0, [pc, #96]	; (80020d4 <vTask_Display+0x1d0>)
 8002074:	f7ff fab5 	bl	80015e2 <LCD_WriteString>
				printf("Distance: %.2f\r\n", SenseData.dist);
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <vTask_Display+0x1d8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa7b 	bl	8000578 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4818      	ldr	r0, [pc, #96]	; (80020e8 <vTask_Display+0x1e4>)
 8002088:	f008 f888 	bl	800a19c <iprintf>
				printf("Humidity: %.2f\r\n", SenseData.humi);
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <vTask_Display+0x1d8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa71 	bl	8000578 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4815      	ldr	r0, [pc, #84]	; (80020f0 <vTask_Display+0x1ec>)
 800209c:	f008 f87e 	bl	800a19c <iprintf>
				printf("Temperature: %.2f\r\n", SenseData.temp);
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <vTask_Display+0x1d8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa67 	bl	8000578 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <vTask_Display+0x1f4>)
 80020b0:	f008 f874 	bl	800a19c <iprintf>
				break;
 80020b4:	bf00      	nop
			}
		}
		printf("vTask_Display OUT: %ld\r\n\n", osKernelGetTickCount());
 80020b6:	f003 fd01 	bl	8005abc <osKernelGetTickCount>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4619      	mov	r1, r3
 80020be:	4810      	ldr	r0, [pc, #64]	; (8002100 <vTask_Display+0x1fc>)
 80020c0:	f008 f86c 	bl	800a19c <iprintf>
		osSemaphoreAcquire(DataSemHandle, osWaitForever);
 80020c4:	e722      	b.n	8001f0c <vTask_Display+0x8>
 80020c6:	bf00      	nop
 80020c8:	200002f8 	.word	0x200002f8
 80020cc:	0800c850 	.word	0x0800c850
 80020d0:	20000334 	.word	0x20000334
 80020d4:	20000314 	.word	0x20000314
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000364 	.word	0x20000364
 80020e0:	0800c868 	.word	0x0800c868
 80020e4:	20000338 	.word	0x20000338
 80020e8:	0800c870 	.word	0x0800c870
 80020ec:	0800c884 	.word	0x0800c884
 80020f0:	0800c88c 	.word	0x0800c88c
 80020f4:	0800c8a0 	.word	0x0800c8a0
 80020f8:	0800c8a8 	.word	0x0800c8a8
 80020fc:	0800c8bc 	.word	0x0800c8bc
 8002100:	0800c8cc 	.word	0x0800c8cc

08002104 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002116:	f000 fac3 	bl	80026a0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000

08002128 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>
	...

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_MspInit+0x54>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_MspInit+0x54>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_MspInit+0x54>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_MspInit+0x54>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_MspInit+0x54>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_MspInit+0x54>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	210f      	movs	r1, #15
 8002176:	f06f 0001 	mvn.w	r0, #1
 800217a:	f000 fb8d 	bl	8002898 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_I2C_MspInit+0xa4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d13c      	bne.n	8002228 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_I2C_MspInit+0xa8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_I2C_MspInit+0xa8>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_I2C_MspInit+0xa8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	2312      	movs	r3, #18
 80021d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021dc:	2304      	movs	r3, #4
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <HAL_I2C_MspInit+0xac>)
 80021e8:	f000 fc12 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ec:	2308      	movs	r3, #8
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f0:	2312      	movs	r3, #18
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80021fc:	2309      	movs	r3, #9
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	480c      	ldr	r0, [pc, #48]	; (8002238 <HAL_I2C_MspInit+0xac>)
 8002208:	f000 fc02 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_I2C_MspInit+0xa8>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_I2C_MspInit+0xa8>)
 8002216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221a:	6413      	str	r3, [r2, #64]	; 0x40
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_I2C_MspInit+0xa8>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40005800 	.word	0x40005800
 8002234:	40023800 	.word	0x40023800
 8002238:	40020400 	.word	0x40020400

0800223c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <HAL_TIM_Base_MspInit+0x3c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10d      	bne.n	800226a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_TIM_Base_MspInit+0x40>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_TIM_Base_MspInit+0x40>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_TIM_Base_MspInit+0x40>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40000800 	.word	0x40000800
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_UART_MspInit+0x94>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d133      	bne.n	800230a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_UART_MspInit+0x98>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_UART_MspInit+0x98>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_UART_MspInit+0x98>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_UART_MspInit+0x98>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_UART_MspInit+0x98>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_UART_MspInit+0x98>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022da:	230c      	movs	r3, #12
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ea:	2307      	movs	r3, #7
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <HAL_UART_MspInit+0x9c>)
 80022f6:	f000 fb8b 	bl	8002a10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2105      	movs	r1, #5
 80022fe:	2026      	movs	r0, #38	; 0x26
 8002300:	f000 faca 	bl	8002898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002304:	2026      	movs	r0, #38	; 0x26
 8002306:	f000 fae3 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40004400 	.word	0x40004400
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_InitTick+0xd0>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <HAL_InitTick+0xd0>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6453      	str	r3, [r2, #68]	; 0x44
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_InitTick+0xd0>)
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800234c:	f107 020c 	add.w	r2, r7, #12
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f001 fe06 	bl	8003f68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800235c:	f001 fdf0 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8002360:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <HAL_InitTick+0xd4>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9b      	lsrs	r3, r3, #18
 800236c:	3b01      	subs	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_InitTick+0xd8>)
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_InitTick+0xdc>)
 8002374:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_InitTick+0xd8>)
 8002378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800237c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800237e:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_InitTick+0xd8>)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_InitTick+0xd8>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_InitTick+0xd8>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_InitTick+0xd8>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002396:	4818      	ldr	r0, [pc, #96]	; (80023f8 <HAL_InitTick+0xd8>)
 8002398:	f001 fe18 	bl	8003fcc <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11b      	bne.n	80023e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023aa:	4813      	ldr	r0, [pc, #76]	; (80023f8 <HAL_InitTick+0xd8>)
 80023ac:	f001 feb8 	bl	8004120 <HAL_TIM_Base_Start_IT>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d111      	bne.n	80023e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023be:	2019      	movs	r0, #25
 80023c0:	f000 fa86 	bl	80028d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d808      	bhi.n	80023dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023ca:	2200      	movs	r2, #0
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	2019      	movs	r0, #25
 80023d0:	f000 fa62 	bl	8002898 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_InitTick+0xe0>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e002      	b.n	80023e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3730      	adds	r7, #48	; 0x30
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	20000370 	.word	0x20000370
 80023fc:	40010000 	.word	0x40010000
 8002400:	20000010 	.word	0x20000010

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002408:	e7fe      	b.n	8002408 <NMI_Handler+0x4>

0800240a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <MemManage_Handler+0x4>

08002416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <BusFault_Handler+0x4>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <UsageFault_Handler+0x4>

08002422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002436:	f001 fed5 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000370 	.word	0x20000370

08002444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <USART2_IRQHandler+0x10>)
 800244a:	f002 fb53 	bl	8004af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000029c 	.word	0x2000029c

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002472:	f008 f8a7 	bl	800a5c4 <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
  return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800249a:	e7fe      	b.n	800249a <_exit+0x12>

0800249c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e009      	b.n	80024fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f8e3 	bl	80016bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf1      	blt.n	80024e8 <_write+0x12>
  }
  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002536:	605a      	str	r2, [r3, #4]
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f008 f80c 	bl	800a5c4 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20018000 	.word	0x20018000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	200003b8 	.word	0x200003b8
 80025e0:	20004e60 	.word	0x20004e60

080025e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800260c:	f7ff ffea 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	; (8002654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002636:	f007 ffcb 	bl	800a5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7ff f8a3 	bl	8001784 <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800264c:	0800cdc8 	.word	0x0800cdc8
  ldr r2, =_sbss
 8002650:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002654:	20004e5c 	.word	0x20004e5c

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_Init+0x40>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_Init+0x40>)
 8002672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_Init+0x40>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f000 f8fc 	bl	8002882 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268a:	200f      	movs	r0, #15
 800268c:	f7ff fe48 	bl	8002320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002690:	f7ff fd50 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000014 	.word	0x20000014
 80026c4:	200003bc 	.word	0x200003bc

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	200003bc 	.word	0x200003bc

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000014 	.word	0x20000014

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ff4c 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028aa:	f7ff ff61 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6978      	ldr	r0, [r7, #20]
 80028b6:	f7ff ffb1 	bl	800281c <NVIC_EncodePriority>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff80 	bl	80027c8 <__NVIC_SetPriority>
}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff54 	bl	800278c <__NVIC_EnableIRQ>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028fa:	f7ff fee5 	bl	80026c8 <HAL_GetTick>
 80028fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d008      	beq.n	800291e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e052      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_Abort+0x62>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	e013      	b.n	8002998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002970:	f7ff feaa 	bl	80026c8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d90c      	bls.n	8002998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2203      	movs	r2, #3
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e015      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e4      	bne.n	8002970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	223f      	movs	r2, #63	; 0x3f
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00c      	b.n	8002a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2205      	movs	r2, #5
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e159      	b.n	8002ce0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8148 	bne.w	8002cda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d005      	beq.n	8002a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d130      	bne.n	8002ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0201 	and.w	r2, r3, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d017      	beq.n	8002b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d123      	bne.n	8002b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a2 	beq.w	8002cda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb2:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_GPIO_Init+0x2f0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d019      	beq.n	8002c12 <HAL_GPIO_Init+0x202>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <HAL_GPIO_Init+0x2f4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x1fe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a47      	ldr	r2, [pc, #284]	; (8002d08 <HAL_GPIO_Init+0x2f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x1fa>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a46      	ldr	r2, [pc, #280]	; (8002d0c <HAL_GPIO_Init+0x2fc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x1f6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a45      	ldr	r2, [pc, #276]	; (8002d10 <HAL_GPIO_Init+0x300>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x1f2>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c12:	2300      	movs	r3, #0
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c24:	4935      	ldr	r1, [pc, #212]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c32:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c56:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	f67f aea2 	bls.w	8002a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e001      	b.n	8002d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	619a      	str	r2, [r3, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e12b      	b.n	8002fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff f9f2 	bl	800218c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de0:	f001 f89a 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a81      	ldr	r2, [pc, #516]	; (8002ff0 <HAL_I2C_Init+0x274>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d807      	bhi.n	8002e00 <HAL_I2C_Init+0x84>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a80      	ldr	r2, [pc, #512]	; (8002ff4 <HAL_I2C_Init+0x278>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bf94      	ite	ls
 8002df8:	2301      	movls	r3, #1
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e006      	b.n	8002e0e <HAL_I2C_Init+0x92>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <HAL_I2C_Init+0x27c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0e7      	b.n	8002fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a78      	ldr	r2, [pc, #480]	; (8002ffc <HAL_I2C_Init+0x280>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0c9b      	lsrs	r3, r3, #18
 8002e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a6a      	ldr	r2, [pc, #424]	; (8002ff0 <HAL_I2C_Init+0x274>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d802      	bhi.n	8002e50 <HAL_I2C_Init+0xd4>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	e009      	b.n	8002e64 <HAL_I2C_Init+0xe8>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	4a69      	ldr	r2, [pc, #420]	; (8003000 <HAL_I2C_Init+0x284>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	3301      	adds	r3, #1
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	495c      	ldr	r1, [pc, #368]	; (8002ff0 <HAL_I2C_Init+0x274>)
 8002e80:	428b      	cmp	r3, r1
 8002e82:	d819      	bhi.n	8002eb8 <HAL_I2C_Init+0x13c>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e59      	subs	r1, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e92:	1c59      	adds	r1, r3, #1
 8002e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e98:	400b      	ands	r3, r1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_I2C_Init+0x138>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e59      	subs	r1, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	e051      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e04f      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_I2C_Init+0x168>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e012      	b.n	8002f0a <HAL_I2C_Init+0x18e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	0099      	lsls	r1, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x196>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10e      	bne.n	8002f38 <HAL_I2C_Init+0x1bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1e58      	subs	r0, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	440b      	add	r3, r1
 8002f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	e00f      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	6809      	ldr	r1, [r1, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6911      	ldr	r1, [r2, #16]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	000186a0 	.word	0x000186a0
 8002ff4:	001e847f 	.word	0x001e847f
 8002ff8:	003d08ff 	.word	0x003d08ff
 8002ffc:	431bde83 	.word	0x431bde83
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	460b      	mov	r3, r1
 8003012:	817b      	strh	r3, [r7, #10]
 8003014:	4613      	mov	r3, r2
 8003016:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff fb56 	bl	80026c8 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	f040 80e0 	bne.w	80031ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2319      	movs	r3, #25
 8003032:	2201      	movs	r2, #1
 8003034:	4970      	ldr	r1, [pc, #448]	; (80031f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f964 	bl	8003304 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	e0d3      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2C_Master_Transmit+0x50>
 8003050:	2302      	movs	r3, #2
 8003052:	e0cc      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d007      	beq.n	800307a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003088:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2221      	movs	r2, #33	; 0x21
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2210      	movs	r2, #16
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	893a      	ldrh	r2, [r7, #8]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a50      	ldr	r2, [pc, #320]	; (80031fc <HAL_I2C_Master_Transmit+0x1f8>)
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	6a3a      	ldr	r2, [r7, #32]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f89c 	bl	8003200 <I2C_MasterRequestWrite>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e08d      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030e8:	e066      	b.n	80031b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6a39      	ldr	r1, [r7, #32]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa22 	bl	8003538 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_I2C_Master_Transmit+0x188>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d017      	beq.n	800318c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	6a39      	ldr	r1, [r7, #32]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa19 	bl	80035c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d107      	bne.n	80031b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e01a      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d194      	bne.n	80030ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	00100002 	.word	0x00100002
 80031fc:	ffff0000 	.word	0xffff0000

08003200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	460b      	mov	r3, r1
 800320e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d006      	beq.n	800322a <I2C_MasterRequestWrite+0x2a>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d003      	beq.n	800322a <I2C_MasterRequestWrite+0x2a>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00b      	b.n	8003254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	2b12      	cmp	r3, #18
 8003242:	d107      	bne.n	8003254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f84f 	bl	8003304 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d103      	bne.n	8003284 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e035      	b.n	80032f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003290:	d108      	bne.n	80032a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a0:	611a      	str	r2, [r3, #16]
 80032a2:	e01b      	b.n	80032dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032a4:	897b      	ldrh	r3, [r7, #10]
 80032a6:	11db      	asrs	r3, r3, #7
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0306 	and.w	r3, r3, #6
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f063 030f 	orn	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <I2C_MasterRequestWrite+0xfc>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f898 	bl	80033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e010      	b.n	80032f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4907      	ldr	r1, [pc, #28]	; (8003300 <I2C_MasterRequestWrite+0x100>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f888 	bl	80033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00010008 	.word	0x00010008
 8003300:	00010002 	.word	0x00010002

08003304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003314:	e048      	b.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d044      	beq.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7ff f9d3 	bl	80026c8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d139      	bne.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d10d      	bne.n	800335a <I2C_WaitOnFlagUntilTimeout+0x56>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	43da      	mvns	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	e00c      	b.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x70>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	43da      	mvns	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	429a      	cmp	r2, r3
 8003378:	d116      	bne.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e023      	b.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10d      	bne.n	80033ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	43da      	mvns	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4013      	ands	r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	e00c      	b.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	43da      	mvns	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d093      	beq.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003406:	e071      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003416:	d123      	bne.n	8003460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0204 	orr.w	r2, r3, #4
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e067      	b.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d041      	beq.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003468:	f7ff f92e 	bl	80026c8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d136      	bne.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10c      	bne.n	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e00b      	b.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	43da      	mvns	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e021      	b.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	0c1b      	lsrs	r3, r3, #16
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10c      	bne.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	43da      	mvns	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e00b      	b.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	f47f af6d 	bne.w	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003544:	e034      	b.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f886 	bl	8003658 <I2C_IsAcknowledgeFailed>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e034      	b.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d028      	beq.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7ff f8b3 	bl	80026c8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11d      	bne.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d016      	beq.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e007      	b.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d1c3      	bne.n	8003546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d4:	e034      	b.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f83e 	bl	8003658 <I2C_IsAcknowledgeFailed>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d028      	beq.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7ff f86b 	bl	80026c8 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11d      	bne.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d016      	beq.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e007      	b.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d1c3      	bne.n	80035d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366e:	d11b      	bne.n	80036a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003678:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e267      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d075      	beq.n	80037c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d6:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00c      	beq.n	80036fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e2:	4b85      	ldr	r3, [pc, #532]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d112      	bne.n	8003714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b82      	ldr	r3, [pc, #520]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036fa:	d10b      	bne.n	8003714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	4b7e      	ldr	r3, [pc, #504]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05b      	beq.n	80037c0 <HAL_RCC_OscConfig+0x108>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d157      	bne.n	80037c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e242      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371c:	d106      	bne.n	800372c <HAL_RCC_OscConfig+0x74>
 800371e:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a75      	ldr	r2, [pc, #468]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e01d      	b.n	8003768 <HAL_RCC_OscConfig+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x98>
 8003736:	4b70      	ldr	r3, [pc, #448]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6f      	ldr	r2, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6c      	ldr	r2, [pc, #432]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0xb0>
 8003750:	4b69      	ldr	r3, [pc, #420]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a68      	ldr	r2, [pc, #416]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe ffaa 	bl	80026c8 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe ffa6 	bl	80026c8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e207      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0xc0>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe ff96 	bl	80026c8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe ff92 	bl	80026c8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1f3      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0xe8>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ce:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x152>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1c7      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4937      	ldr	r1, [pc, #220]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_RCC_OscConfig+0x244>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe ff4b 	bl	80026c8 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe ff47 	bl	80026c8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1a8      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4925      	ldr	r1, [pc, #148]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCC_OscConfig+0x244>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe ff2a 	bl	80026c8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe ff26 	bl	80026c8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e187      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d036      	beq.n	8003910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCC_OscConfig+0x248>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe ff0a 	bl	80026c8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fe ff06 	bl	80026c8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e167      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x200>
 80038d6:	e01b      	b.n	8003910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_OscConfig+0x248>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038de:	f7fe fef3 	bl	80026c8 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e00e      	b.n	8003904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fe feef 	bl	80026c8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d907      	bls.n	8003904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e150      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	42470000 	.word	0x42470000
 8003900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ea      	bne.n	80038e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8097 	beq.w	8003a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b81      	ldr	r3, [pc, #516]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	4b7d      	ldr	r3, [pc, #500]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a7c      	ldr	r2, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b77      	ldr	r3, [pc, #476]	; (8003b2c <HAL_RCC_OscConfig+0x474>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <HAL_RCC_OscConfig+0x474>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a73      	ldr	r2, [pc, #460]	; (8003b2c <HAL_RCC_OscConfig+0x474>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fe feaf 	bl	80026c8 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fe feab 	bl	80026c8 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e10c      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_OscConfig+0x474>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2ea>
 8003994:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	4a63      	ldr	r2, [pc, #396]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6713      	str	r3, [r2, #112]	; 0x70
 80039a0:	e01c      	b.n	80039dc <HAL_RCC_OscConfig+0x324>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x30c>
 80039aa:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a5e      	ldr	r2, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0x324>
 80039c4:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a57      	ldr	r2, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a54      	ldr	r2, [pc, #336]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 0304 	bic.w	r3, r3, #4
 80039da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fe fe70 	bl	80026c8 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe fe6c 	bl	80026c8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0cb      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ee      	beq.n	80039ec <HAL_RCC_OscConfig+0x334>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7fe fe5a 	bl	80026c8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fe fe56 	bl	80026c8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0b5      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ee      	bne.n	8003a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a40:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4a38      	ldr	r2, [pc, #224]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a1 	beq.w	8003b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d05c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d141      	bne.n	8003aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <HAL_RCC_OscConfig+0x478>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe fe2a 	bl	80026c8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fe fe26 	bl	80026c8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e087      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	491b      	ldr	r1, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x478>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fdff 	bl	80026c8 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fe fdfb 	bl	80026c8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e05c      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x416>
 8003aec:	e054      	b.n	8003b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_OscConfig+0x478>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fe fde8 	bl	80026c8 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe fde4 	bl	80026c8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e045      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x444>
 8003b1a:	e03d      	b.n	8003b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e038      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCC_OscConfig+0x4ec>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d028      	beq.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d121      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d11a      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0cc      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d90c      	bls.n	8003be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b8      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bfc:	4b59      	ldr	r3, [pc, #356]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c14:	4b53      	ldr	r3, [pc, #332]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a52      	ldr	r2, [pc, #328]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c20:	4b50      	ldr	r3, [pc, #320]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	494d      	ldr	r1, [pc, #308]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d044      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d119      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e07f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e06f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e067      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f023 0203 	bic.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4934      	ldr	r1, [pc, #208]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c98:	f7fe fd16 	bl	80026c8 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca0:	f7fe fd12 	bl	80026c8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e04f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 020c 	and.w	r2, r3, #12
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d1eb      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d20c      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e032      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4916      	ldr	r1, [pc, #88]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	490e      	ldr	r1, [pc, #56]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d2e:	f000 f821 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	490a      	ldr	r1, [pc, #40]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	5ccb      	ldrb	r3, [r1, r3]
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fae6 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023c00 	.word	0x40023c00
 8003d64:	40023800 	.word	0x40023800
 8003d68:	0800c9d4 	.word	0x0800c9d4
 8003d6c:	2000000c 	.word	0x2000000c
 8003d70:	20000010 	.word	0x20000010

08003d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d78:	b090      	sub	sp, #64	; 0x40
 8003d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d80:	2300      	movs	r3, #0
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d84:	2300      	movs	r3, #0
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d00d      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x40>
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	f200 80a1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x34>
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x3a>
 8003da6:	e09b      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003dac:	e09b      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dae:	4b53      	ldr	r3, [pc, #332]	; (8003efc <HAL_RCC_GetSysClockFreq+0x188>)
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db2:	e098      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db4:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	627a      	str	r2, [r7, #36]	; 0x24
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_GetSysClockFreq+0x188>)
 8003de0:	fb03 f201 	mul.w	r2, r3, r1
 8003de4:	2300      	movs	r3, #0
 8003de6:	fb00 f303 	mul.w	r3, r0, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	4a43      	ldr	r2, [pc, #268]	; (8003efc <HAL_RCC_GetSysClockFreq+0x188>)
 8003dee:	fba0 1202 	umull	r1, r2, r0, r2
 8003df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df4:	460a      	mov	r2, r1
 8003df6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dfa:	4413      	add	r3, r2
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	2200      	movs	r2, #0
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	61fa      	str	r2, [r7, #28]
 8003e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e0e:	f7fc ff33 	bl	8000c78 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4613      	mov	r3, r2
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1a:	e053      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1c:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	2200      	movs	r2, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	617a      	str	r2, [r7, #20]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e2e:	f04f 0b00 	mov.w	fp, #0
 8003e32:	4652      	mov	r2, sl
 8003e34:	465b      	mov	r3, fp
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0159      	lsls	r1, r3, #5
 8003e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e44:	0150      	lsls	r0, r2, #5
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e66:	ebb2 0408 	subs.w	r4, r2, r8
 8003e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	00eb      	lsls	r3, r5, #3
 8003e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7c:	00e2      	lsls	r2, r4, #3
 8003e7e:	4614      	mov	r4, r2
 8003e80:	461d      	mov	r5, r3
 8003e82:	eb14 030a 	adds.w	r3, r4, sl
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	eb45 030b 	adc.w	r3, r5, fp
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	028b      	lsls	r3, r1, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	028a      	lsls	r2, r1, #10
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	60fa      	str	r2, [r7, #12]
 8003eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb8:	f7fc fede 	bl	8000c78 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3740      	adds	r7, #64	; 0x40
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	017d7840 	.word	0x017d7840

08003f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	2000000c 	.word	0x2000000c

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	0800c9e4 	.word	0x0800c9e4

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffdc 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	0800c9e4 	.word	0x0800c9e4

08003f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	220f      	movs	r2, #15
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCC_GetClockConfig+0x60>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0207 	and.w	r2, r3, #7
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40023c00 	.word	0x40023c00

08003fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e041      	b.n	8004062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fe f922 	bl	800223c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 faca 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e03c      	b.n	80040fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1e      	ldr	r2, [pc, #120]	; (800410c <HAL_TIM_Base_Start+0xa0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_TIM_Base_Start+0x5c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d013      	beq.n	80040c8 <HAL_TIM_Base_Start+0x5c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <HAL_TIM_Base_Start+0xa4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_TIM_Base_Start+0x5c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_TIM_Base_Start+0xa8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_TIM_Base_Start+0x5c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a17      	ldr	r2, [pc, #92]	; (8004118 <HAL_TIM_Base_Start+0xac>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_TIM_Base_Start+0x5c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a16      	ldr	r2, [pc, #88]	; (800411c <HAL_TIM_Base_Start+0xb0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d010      	beq.n	80040fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ea:	e007      	b.n	80040fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40014000 	.word	0x40014000

08004120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d001      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e044      	b.n	80041c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d013      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x6c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x6c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x6c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a17      	ldr	r2, [pc, #92]	; (80041dc <HAL_TIM_Base_Start_IT+0xbc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x6c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d010      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e007      	b.n	80041c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40014000 	.word	0x40014000

080041e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d020      	beq.n	8004248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01b      	beq.n	8004248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0202 	mvn.w	r2, #2
 8004218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f999 	bl	8004566 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f98b 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f99c 	bl	800457a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d020      	beq.n	8004294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01b      	beq.n	8004294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0204 	mvn.w	r2, #4
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f973 	bl	8004566 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f965 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f976 	bl	800457a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d020      	beq.n	80042e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0208 	mvn.w	r2, #8
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2204      	movs	r2, #4
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f94d 	bl	8004566 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f93f 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f950 	bl	800457a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d020      	beq.n	800432c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2208      	movs	r2, #8
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f927 	bl	8004566 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f919 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f92a 	bl	800457a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00c      	beq.n	8004350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0201 	mvn.w	r2, #1
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd feda 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00c      	beq.n	8004374 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fab6 	bl	80048e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00c      	beq.n	8004398 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8fb 	bl	800458e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0220 	mvn.w	r2, #32
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa88 	bl	80048cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_TIM_ConfigClockSource+0x1c>
 80043dc:	2302      	movs	r3, #2
 80043de:	e0b4      	b.n	800454a <HAL_TIM_ConfigClockSource+0x186>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004418:	d03e      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0xd4>
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	f200 8087 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	f000 8086 	beq.w	8004536 <HAL_TIM_ConfigClockSource+0x172>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d87f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d01a      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xa6>
 8004434:	2b70      	cmp	r3, #112	; 0x70
 8004436:	d87b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b60      	cmp	r3, #96	; 0x60
 800443a:	d050      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x11a>
 800443c:	2b60      	cmp	r3, #96	; 0x60
 800443e:	d877      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b50      	cmp	r3, #80	; 0x50
 8004442:	d03c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xfa>
 8004444:	2b50      	cmp	r3, #80	; 0x50
 8004446:	d873      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d058      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x13a>
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d86f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b30      	cmp	r3, #48	; 0x30
 8004452:	d064      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 8004454:	2b30      	cmp	r3, #48	; 0x30
 8004456:	d86b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d060      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d867      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 8004464:	2b10      	cmp	r3, #16
 8004466:	d05a      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 8004468:	e062      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	f000 f999 	bl	80047b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800448c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
      break;
 8004496:	e04f      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	f000 f982 	bl	80047b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ba:	609a      	str	r2, [r3, #8]
      break;
 80044bc:	e03c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 f8f6 	bl	80046bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2150      	movs	r1, #80	; 0x50
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f94f 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80044dc:	e02c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 f915 	bl	800471a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2160      	movs	r1, #96	; 0x60
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f93f 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80044fc:	e01c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	461a      	mov	r2, r3
 800450c:	f000 f8d6 	bl	80046bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2140      	movs	r1, #64	; 0x40
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f92f 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 800451c:	e00c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f000 f926 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 800452e:	e003      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e000      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3a      	ldr	r2, [pc, #232]	; (80046a0 <TIM_Base_SetConfig+0xfc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a37      	ldr	r2, [pc, #220]	; (80046a4 <TIM_Base_SetConfig+0x100>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a36      	ldr	r2, [pc, #216]	; (80046a8 <TIM_Base_SetConfig+0x104>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a35      	ldr	r2, [pc, #212]	; (80046ac <TIM_Base_SetConfig+0x108>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <TIM_Base_SetConfig+0xfc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01b      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fc:	d017      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a28      	ldr	r2, [pc, #160]	; (80046a4 <TIM_Base_SetConfig+0x100>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <TIM_Base_SetConfig+0x104>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00f      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a26      	ldr	r2, [pc, #152]	; (80046ac <TIM_Base_SetConfig+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <TIM_Base_SetConfig+0x10c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a24      	ldr	r2, [pc, #144]	; (80046b4 <TIM_Base_SetConfig+0x110>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <TIM_Base_SetConfig+0x114>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d108      	bne.n	8004640 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <TIM_Base_SetConfig+0xfc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]
  }
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 030a 	bic.w	r3, r3, #10
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f023 0210 	bic.w	r2, r3, #16
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004756:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	f043 0307 	orr.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e050      	b.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d013      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10c      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40014000 	.word	0x40014000

080048cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e042      	b.n	800498c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd fcb0 	bl	8002280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	; 0x24
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fdbd 	bl	80054b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800494c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800495c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800496c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d175      	bne.n	8004aa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Transmit+0x2c>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e06e      	b.n	8004aa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2221      	movs	r2, #33	; 0x21
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d2:	f7fd fe79 	bl	80026c8 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d108      	bne.n	8004a00 <HAL_UART_Transmit+0x6c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e003      	b.n	8004a08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a08:	e02e      	b.n	8004a68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fb1f 	bl	8005058 <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e03a      	b.n	8004aa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	3302      	adds	r3, #2
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e007      	b.n	8004a5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cb      	bne.n	8004a0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2140      	movs	r1, #64	; 0x40
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 faeb 	bl	8005058 <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e006      	b.n	8004aa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d112      	bne.n	8004aea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Receive_IT+0x26>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e00b      	b.n	8004aec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fb12 	bl	800510a <UART_Start_Receive_IT>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	e000      	b.n	8004aec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b0ba      	sub	sp, #232	; 0xe8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_UART_IRQHandler+0x66>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fbf2 	bl	800533c <UART_Receive_IT>
      return;
 8004b58:	e25b      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80de 	beq.w	8004d20 <HAL_UART_IRQHandler+0x22c>
 8004b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80d1 	beq.w	8004d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xae>
 8004b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xd2>
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f043 0202 	orr.w	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_UART_IRQHandler+0xf6>
 8004bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	f043 0204 	orr.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d011      	beq.n	8004c1a <HAL_UART_IRQHandler+0x126>
 8004bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f043 0208 	orr.w	r2, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 81f2 	beq.w	8005008 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_UART_IRQHandler+0x14e>
 8004c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb7d 	bl	800533c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_UART_IRQHandler+0x17a>
 8004c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d04f      	beq.n	8004d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa85 	bl	800517e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d141      	bne.n	8004d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1d9      	bne.n	8004c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d013      	beq.n	8004cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	4a7e      	ldr	r2, [pc, #504]	; (8004ed4 <HAL_UART_IRQHandler+0x3e0>)
 8004cdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd fe72 	bl	80029cc <HAL_DMA_Abort_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d016      	beq.n	8004d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	e00e      	b.n	8004d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f994 	bl	800502c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	e00a      	b.n	8004d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f990 	bl	800502c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	e006      	b.n	8004d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f98c 	bl	800502c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004d1a:	e175      	b.n	8005008 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	bf00      	nop
    return;
 8004d1e:	e173      	b.n	8005008 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 814f 	bne.w	8004fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8148 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8141 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	f040 80b6 	bne.w	8004ed8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8145 	beq.w	800500c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f080 813e 	bcs.w	800500c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	f000 8088 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1d9      	bne.n	8004da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3314      	adds	r3, #20
 8004e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e1      	bne.n	8004df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3314      	adds	r3, #20
 8004e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e3      	bne.n	8004e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e3      	bne.n	8004e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fd fd1b 	bl	80028ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f8b7 	bl	8005040 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ed2:	e09b      	b.n	800500c <HAL_UART_IRQHandler+0x518>
 8004ed4:	08005245 	.word	0x08005245
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 808e 	beq.w	8005010 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8089 	beq.w	8005010 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f22:	647a      	str	r2, [r7, #68]	; 0x44
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e3      	bne.n	8004efe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	623b      	str	r3, [r7, #32]
   return(result);
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e3      	bne.n	8004f36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0310 	bic.w	r3, r3, #16
 8004f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fa0:	61fa      	str	r2, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	69b9      	ldr	r1, [r7, #24]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	617b      	str	r3, [r7, #20]
   return(result);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e3      	bne.n	8004f7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f83d 	bl	8005040 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fc6:	e023      	b.n	8005010 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x4f4>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f943 	bl	800526c <UART_Transmit_IT>
    return;
 8004fe6:	e014      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <HAL_UART_IRQHandler+0x51e>
 8004ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f983 	bl	800530c <UART_EndTransmit_IT>
    return;
 8005006:	e004      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
    return;
 8005008:	bf00      	nop
 800500a:	e002      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
      return;
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
      return;
 8005010:	bf00      	nop
  }
}
 8005012:	37e8      	adds	r7, #232	; 0xe8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005068:	e03b      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d037      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fd fb29 	bl	80026c8 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <UART_WaitOnFlagUntilTimeout+0x30>
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e03a      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d023      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b80      	cmp	r3, #128	; 0x80
 800509e:	d020      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d01d      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d116      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f857 	bl	800517e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2208      	movs	r2, #8
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e00f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d0b4      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2222      	movs	r2, #34	; 0x22
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0220 	orr.w	r2, r2, #32
 800516e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517e:	b480      	push	{r7}
 8005180:	b095      	sub	sp, #84	; 0x54
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051a6:	643a      	str	r2, [r7, #64]	; 0x40
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3314      	adds	r3, #20
 80051c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3314      	adds	r3, #20
 80051d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e5      	bne.n	80051ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d119      	bne.n	800522a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	60bb      	str	r3, [r7, #8]
   return(result);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	647b      	str	r3, [r7, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005216:	61ba      	str	r2, [r7, #24]
 8005218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	613b      	str	r3, [r7, #16]
   return(result);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005238:	bf00      	nop
 800523a:	3754      	adds	r7, #84	; 0x54
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff fee4 	bl	800502c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b21      	cmp	r3, #33	; 0x21
 800527e:	d13e      	bne.n	80052fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d114      	bne.n	80052b4 <UART_Transmit_IT+0x48>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d110      	bne.n	80052b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]
 80052b2:	e008      	b.n	80052c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	1c59      	adds	r1, r3, #1
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6211      	str	r1, [r2, #32]
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4619      	mov	r1, r3
 80052d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10f      	bne.n	80052fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052fe:	2302      	movs	r3, #2
  }
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005322:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff fe73 	bl	8005018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08c      	sub	sp, #48	; 0x30
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b22      	cmp	r3, #34	; 0x22
 800534e:	f040 80ae 	bne.w	80054ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d117      	bne.n	800538c <UART_Receive_IT+0x50>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d113      	bne.n	800538c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	b29a      	uxth	r2, r3
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	1c9a      	adds	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
 800538a:	e026      	b.n	80053da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539e:	d007      	beq.n	80053b0 <UART_Receive_IT+0x74>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <UART_Receive_IT+0x82>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e008      	b.n	80053d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4619      	mov	r1, r3
 80053e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d15d      	bne.n	80054aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0220 	bic.w	r2, r2, #32
 80053fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800540c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	2b01      	cmp	r3, #1
 8005432:	d135      	bne.n	80054a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f023 0310 	bic.w	r3, r3, #16
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	623a      	str	r2, [r7, #32]
 800545c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	69f9      	ldr	r1, [r7, #28]
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	61bb      	str	r3, [r7, #24]
   return(result);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d10a      	bne.n	8005492 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fdd1 	bl	8005040 <HAL_UARTEx_RxEventCallback>
 800549e:	e002      	b.n	80054a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fc f91d 	bl	80016e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e002      	b.n	80054b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3730      	adds	r7, #48	; 0x30
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054bc:	b0c0      	sub	sp, #256	; 0x100
 80054be:	af00      	add	r7, sp, #0
 80054c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	ea40 0301 	orr.w	r3, r0, r1
 80054e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005510:	f021 010c 	bic.w	r1, r1, #12
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800551e:	430b      	orrs	r3, r1
 8005520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005532:	6999      	ldr	r1, [r3, #24]
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	ea40 0301 	orr.w	r3, r0, r1
 800553e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8f      	ldr	r3, [pc, #572]	; (8005784 <UART_SetConfig+0x2cc>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d005      	beq.n	8005558 <UART_SetConfig+0xa0>
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b8d      	ldr	r3, [pc, #564]	; (8005788 <UART_SetConfig+0x2d0>)
 8005554:	429a      	cmp	r2, r3
 8005556:	d104      	bne.n	8005562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005558:	f7fe fcf2 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 800555c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005560:	e003      	b.n	800556a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005562:	f7fe fcd9 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8005566:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005574:	f040 810c 	bne.w	8005790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557c:	2200      	movs	r2, #0
 800557e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005582:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800558a:	4622      	mov	r2, r4
 800558c:	462b      	mov	r3, r5
 800558e:	1891      	adds	r1, r2, r2
 8005590:	65b9      	str	r1, [r7, #88]	; 0x58
 8005592:	415b      	adcs	r3, r3
 8005594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800559a:	4621      	mov	r1, r4
 800559c:	eb12 0801 	adds.w	r8, r2, r1
 80055a0:	4629      	mov	r1, r5
 80055a2:	eb43 0901 	adc.w	r9, r3, r1
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	eb18 0303 	adds.w	r3, r8, r3
 80055c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055c8:	462b      	mov	r3, r5
 80055ca:	eb49 0303 	adc.w	r3, r9, r3
 80055ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055e6:	460b      	mov	r3, r1
 80055e8:	18db      	adds	r3, r3, r3
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
 80055ec:	4613      	mov	r3, r2
 80055ee:	eb42 0303 	adc.w	r3, r2, r3
 80055f2:	657b      	str	r3, [r7, #84]	; 0x54
 80055f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055fc:	f7fb fb3c 	bl	8000c78 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b61      	ldr	r3, [pc, #388]	; (800578c <UART_SetConfig+0x2d4>)
 8005606:	fba3 2302 	umull	r2, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	011c      	lsls	r4, r3, #4
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005618:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800561c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	64b9      	str	r1, [r7, #72]	; 0x48
 8005628:	415b      	adcs	r3, r3
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005630:	4641      	mov	r1, r8
 8005632:	eb12 0a01 	adds.w	sl, r2, r1
 8005636:	4649      	mov	r1, r9
 8005638:	eb43 0b01 	adc.w	fp, r3, r1
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800564c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005650:	4692      	mov	sl, r2
 8005652:	469b      	mov	fp, r3
 8005654:	4643      	mov	r3, r8
 8005656:	eb1a 0303 	adds.w	r3, sl, r3
 800565a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800565e:	464b      	mov	r3, r9
 8005660:	eb4b 0303 	adc.w	r3, fp, r3
 8005664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005674:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800567c:	460b      	mov	r3, r1
 800567e:	18db      	adds	r3, r3, r3
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
 8005682:	4613      	mov	r3, r2
 8005684:	eb42 0303 	adc.w	r3, r2, r3
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
 800568a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800568e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005692:	f7fb faf1 	bl	8000c78 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4611      	mov	r1, r2
 800569c:	4b3b      	ldr	r3, [pc, #236]	; (800578c <UART_SetConfig+0x2d4>)
 800569e:	fba3 2301 	umull	r2, r3, r3, r1
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2264      	movs	r2, #100	; 0x64
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	1acb      	subs	r3, r1, r3
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056b2:	4b36      	ldr	r3, [pc, #216]	; (800578c <UART_SetConfig+0x2d4>)
 80056b4:	fba3 2302 	umull	r2, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c0:	441c      	add	r4, r3
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	1891      	adds	r1, r2, r2
 80056da:	63b9      	str	r1, [r7, #56]	; 0x38
 80056dc:	415b      	adcs	r3, r3
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056e4:	4641      	mov	r1, r8
 80056e6:	1851      	adds	r1, r2, r1
 80056e8:	6339      	str	r1, [r7, #48]	; 0x30
 80056ea:	4649      	mov	r1, r9
 80056ec:	414b      	adcs	r3, r1
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056fc:	4659      	mov	r1, fp
 80056fe:	00cb      	lsls	r3, r1, #3
 8005700:	4651      	mov	r1, sl
 8005702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005706:	4651      	mov	r1, sl
 8005708:	00ca      	lsls	r2, r1, #3
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	4603      	mov	r3, r0
 8005710:	4642      	mov	r2, r8
 8005712:	189b      	adds	r3, r3, r2
 8005714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005718:	464b      	mov	r3, r9
 800571a:	460a      	mov	r2, r1
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005730:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005738:	460b      	mov	r3, r1
 800573a:	18db      	adds	r3, r3, r3
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 800573e:	4613      	mov	r3, r2
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800574a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800574e:	f7fb fa93 	bl	8000c78 <__aeabi_uldivmod>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <UART_SetConfig+0x2d4>)
 8005758:	fba3 1302 	umull	r1, r3, r3, r2
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	2164      	movs	r1, #100	; 0x64
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	3332      	adds	r3, #50	; 0x32
 800576a:	4a08      	ldr	r2, [pc, #32]	; (800578c <UART_SetConfig+0x2d4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f003 0207 	and.w	r2, r3, #7
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4422      	add	r2, r4
 800577e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005780:	e106      	b.n	8005990 <UART_SetConfig+0x4d8>
 8005782:	bf00      	nop
 8005784:	40011000 	.word	0x40011000
 8005788:	40011400 	.word	0x40011400
 800578c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005794:	2200      	movs	r2, #0
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800579a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800579e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057a2:	4642      	mov	r2, r8
 80057a4:	464b      	mov	r3, r9
 80057a6:	1891      	adds	r1, r2, r2
 80057a8:	6239      	str	r1, [r7, #32]
 80057aa:	415b      	adcs	r3, r3
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
 80057ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057b2:	4641      	mov	r1, r8
 80057b4:	1854      	adds	r4, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb43 0501 	adc.w	r5, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	00eb      	lsls	r3, r5, #3
 80057c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ca:	00e2      	lsls	r2, r4, #3
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	18e3      	adds	r3, r4, r3
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057d8:	464b      	mov	r3, r9
 80057da:	eb45 0303 	adc.w	r3, r5, r3
 80057de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057fe:	4629      	mov	r1, r5
 8005800:	008b      	lsls	r3, r1, #2
 8005802:	4621      	mov	r1, r4
 8005804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005808:	4621      	mov	r1, r4
 800580a:	008a      	lsls	r2, r1, #2
 800580c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005810:	f7fb fa32 	bl	8000c78 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4b60      	ldr	r3, [pc, #384]	; (800599c <UART_SetConfig+0x4e4>)
 800581a:	fba3 2302 	umull	r2, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	011c      	lsls	r4, r3, #4
 8005822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800582c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	61b9      	str	r1, [r7, #24]
 800583c:	415b      	adcs	r3, r3
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6139      	str	r1, [r7, #16]
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005878:	464b      	mov	r3, r9
 800587a:	460a      	mov	r2, r1
 800587c:	eb42 0303 	adc.w	r3, r2, r3
 8005880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	67bb      	str	r3, [r7, #120]	; 0x78
 800588e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800589c:	4649      	mov	r1, r9
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	4641      	mov	r1, r8
 80058a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a6:	4641      	mov	r1, r8
 80058a8:	008a      	lsls	r2, r1, #2
 80058aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058ae:	f7fb f9e3 	bl	8000c78 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	4b38      	ldr	r3, [pc, #224]	; (800599c <UART_SetConfig+0x4e4>)
 80058ba:	fba3 2301 	umull	r2, r3, r3, r1
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2264      	movs	r2, #100	; 0x64
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	1acb      	subs	r3, r1, r3
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	3332      	adds	r3, #50	; 0x32
 80058cc:	4a33      	ldr	r2, [pc, #204]	; (800599c <UART_SetConfig+0x4e4>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d8:	441c      	add	r4, r3
 80058da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058de:	2200      	movs	r2, #0
 80058e0:	673b      	str	r3, [r7, #112]	; 0x70
 80058e2:	677a      	str	r2, [r7, #116]	; 0x74
 80058e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	1891      	adds	r1, r2, r2
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	415b      	adcs	r3, r3
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f8:	4641      	mov	r1, r8
 80058fa:	1851      	adds	r1, r2, r1
 80058fc:	6039      	str	r1, [r7, #0]
 80058fe:	4649      	mov	r1, r9
 8005900:	414b      	adcs	r3, r1
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005910:	4659      	mov	r1, fp
 8005912:	00cb      	lsls	r3, r1, #3
 8005914:	4651      	mov	r1, sl
 8005916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591a:	4651      	mov	r1, sl
 800591c:	00ca      	lsls	r2, r1, #3
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	4603      	mov	r3, r0
 8005924:	4642      	mov	r2, r8
 8005926:	189b      	adds	r3, r3, r2
 8005928:	66bb      	str	r3, [r7, #104]	; 0x68
 800592a:	464b      	mov	r3, r9
 800592c:	460a      	mov	r2, r1
 800592e:	eb42 0303 	adc.w	r3, r2, r3
 8005932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	663b      	str	r3, [r7, #96]	; 0x60
 800593e:	667a      	str	r2, [r7, #100]	; 0x64
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800594c:	4649      	mov	r1, r9
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	4641      	mov	r1, r8
 8005952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005956:	4641      	mov	r1, r8
 8005958:	008a      	lsls	r2, r1, #2
 800595a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800595e:	f7fb f98b 	bl	8000c78 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <UART_SetConfig+0x4e4>)
 8005968:	fba3 1302 	umull	r1, r3, r3, r2
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	2164      	movs	r1, #100	; 0x64
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	3332      	adds	r3, #50	; 0x32
 800597a:	4a08      	ldr	r2, [pc, #32]	; (800599c <UART_SetConfig+0x4e4>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4422      	add	r2, r4
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599c:	51eb851f 	.word	0x51eb851f

080059a0 <__NVIC_SetPriority>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0a      	blt.n	80059ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <__NVIC_SetPriority+0x4c>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	440b      	add	r3, r1
 80059c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059c8:	e00a      	b.n	80059e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <__NVIC_SetPriority+0x50>)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	3b04      	subs	r3, #4
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	440b      	add	r3, r1
 80059de:	761a      	strb	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000e100 	.word	0xe000e100
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <SysTick_Handler+0x1c>)
 80059fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059fc:	f002 fcb4 	bl	8008368 <xTaskGetSchedulerState>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d001      	beq.n	8005a0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a06:	f003 fb97 	bl	8009138 <xPortSysTickHandler>
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000e010 	.word	0xe000e010

08005a14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f06f 0004 	mvn.w	r0, #4
 8005a1e:	f7ff ffbf 	bl	80059a0 <__NVIC_SetPriority>
#endif
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a2e:	f3ef 8305 	mrs	r3, IPSR
 8005a32:	603b      	str	r3, [r7, #0]
  return(result);
 8005a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a3a:	f06f 0305 	mvn.w	r3, #5
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	e00c      	b.n	8005a5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <osKernelInitialize+0x44>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <osKernelInitialize+0x44>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	e002      	b.n	8005a5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a5c:	687b      	ldr	r3, [r7, #4]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	200003c0 	.word	0x200003c0

08005a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a76:	f3ef 8305 	mrs	r3, IPSR
 8005a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a82:	f06f 0305 	mvn.w	r3, #5
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	e010      	b.n	8005aac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <osKernelStart+0x48>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d109      	bne.n	8005aa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a92:	f7ff ffbf 	bl	8005a14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <osKernelStart+0x48>)
 8005a98:	2202      	movs	r2, #2
 8005a9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a9c:	f002 f80a 	bl	8007ab4 <vTaskStartScheduler>
      stat = osOK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	e002      	b.n	8005aac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005aac:	687b      	ldr	r3, [r7, #4]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200003c0 	.word	0x200003c0

08005abc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac2:	f3ef 8305 	mrs	r3, IPSR
 8005ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005ace:	f002 f913 	bl	8007cf8 <xTaskGetTickCountFromISR>
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	e002      	b.n	8005adc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005ad6:	f002 f8ff 	bl	8007cd8 <xTaskGetTickCount>
 8005ada:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005adc:	687b      	ldr	r3, [r7, #4]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b08e      	sub	sp, #56	; 0x38
 8005aea:	af04      	add	r7, sp, #16
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af6:	f3ef 8305 	mrs	r3, IPSR
 8005afa:	617b      	str	r3, [r7, #20]
  return(result);
 8005afc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d17e      	bne.n	8005c00 <osThreadNew+0x11a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d07b      	beq.n	8005c00 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b0c:	2318      	movs	r3, #24
 8005b0e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d045      	beq.n	8005bac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <osThreadNew+0x48>
        name = attr->name;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <osThreadNew+0x6e>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b38      	cmp	r3, #56	; 0x38
 8005b46:	d805      	bhi.n	8005b54 <osThreadNew+0x6e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <osThreadNew+0x72>
        return (NULL);
 8005b54:	2300      	movs	r3, #0
 8005b56:	e054      	b.n	8005c02 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <osThreadNew+0xa8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b5b      	cmp	r3, #91	; 0x5b
 8005b76:	d90a      	bls.n	8005b8e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <osThreadNew+0xa8>
        mem = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e010      	b.n	8005bb0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10c      	bne.n	8005bb0 <osThreadNew+0xca>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <osThreadNew+0xca>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <osThreadNew+0xca>
          mem = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e001      	b.n	8005bb0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d110      	bne.n	8005bd8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 fb5f 	bl	8007290 <xTaskCreateStatic>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	e013      	b.n	8005c00 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d110      	bne.n	8005c00 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f001 fbaa 	bl	800734a <xTaskCreate>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d001      	beq.n	8005c00 <osThreadNew+0x11a>
            hTask = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c00:	693b      	ldr	r3, [r7, #16]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3728      	adds	r7, #40	; 0x28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c18:	f3ef 8305 	mrs	r3, IPSR
 8005c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8005c24:	f06f 0305 	mvn.w	r3, #5
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e013      	b.n	8005c54 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <osThreadSetPriority+0x34>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dd02      	ble.n	8005c3e <osThreadSetPriority+0x34>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b38      	cmp	r3, #56	; 0x38
 8005c3c:	dd03      	ble.n	8005c46 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8005c3e:	f06f 0303 	mvn.w	r3, #3
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e006      	b.n	8005c54 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6938      	ldr	r0, [r7, #16]
 8005c50:	f001 fd8c 	bl	800776c <vTaskPrioritySet>
  }

  return (stat);
 8005c54:	697b      	ldr	r3, [r7, #20]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <osThreadGetPriority>:

osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6a:	f3ef 8305 	mrs	r3, IPSR
 8005c6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c70:	68fb      	ldr	r3, [r7, #12]
  osPriority_t prio;

  if (IS_IRQ() || (hTask == NULL)) {
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <osThreadGetPriority+0x1e>
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <osThreadGetPriority+0x26>
    prio = osPriorityError;
 8005c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e004      	b.n	8005c8e <osThreadGetPriority+0x30>
  } else {
    prio = (osPriority_t)((int32_t)uxTaskPriorityGet (hTask));
 8005c84:	6938      	ldr	r0, [r7, #16]
 8005c86:	f001 fd57 	bl	8007738 <uxTaskPriorityGet>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	617b      	str	r3, [r7, #20]
  }

  return (prio);
 8005c8e:	697b      	ldr	r3, [r7, #20]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca4:	f3ef 8305 	mrs	r3, IPSR
 8005ca8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005caa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8005cb0:	f06f 0305 	mvn.w	r3, #5
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e00b      	b.n	8005cd0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8005cbe:	f06f 0303 	mvn.w	r3, #3
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e004      	b.n	8005cd0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8005cca:	6938      	ldr	r0, [r7, #16]
 8005ccc:	f001 fdec 	bl	80078a8 <vTaskSuspend>
  }

  return (stat);
 8005cd0:	697b      	ldr	r3, [r7, #20]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ce6:	f3ef 8305 	mrs	r3, IPSR
 8005cea:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cec:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <osThreadResume+0x20>
    stat = osErrorISR;
 8005cf2:	f06f 0305 	mvn.w	r3, #5
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e00b      	b.n	8005d12 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8005d00:	f06f 0303 	mvn.w	r3, #3
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e004      	b.n	8005d12 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8005d0c:	6938      	ldr	r0, [r7, #16]
 8005d0e:	f001 fe73 	bl	80079f8 <vTaskResume>
  }

  return (stat);
 8005d12:	697b      	ldr	r3, [r7, #20]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d24:	f3ef 8305 	mrs	r3, IPSR
 8005d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <osDelay+0x1c>
    stat = osErrorISR;
 8005d30:	f06f 0305 	mvn.w	r3, #5
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e007      	b.n	8005d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fcc4 	bl	80076d0 <vTaskDelay>
    }
  }

  return (stat);
 8005d48:	68fb      	ldr	r3, [r7, #12]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d60:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8005d66:	f06f 0305 	mvn.w	r3, #5
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e019      	b.n	8005da2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005d72:	f001 ffb1 	bl	8007cd8 <xTaskGetTickCount>
 8005d76:	4603      	mov	r3, r0
 8005d78:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <osDelayUntil+0x4a>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	db06      	blt.n	8005d9c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005d8e:	f107 0308 	add.w	r3, r7, #8
 8005d92:	6939      	ldr	r1, [r7, #16]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fc1d 	bl	80075d4 <vTaskDelayUntil>
 8005d9a:	e002      	b.n	8005da2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005d9c:	f06f 0303 	mvn.w	r3, #3
 8005da0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	; 0x28
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dbc:	f3ef 8305 	mrs	r3, IPSR
 8005dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8005dc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d175      	bne.n	8005eb4 <osSemaphoreNew+0x108>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d072      	beq.n	8005eb4 <osSemaphoreNew+0x108>
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d86e      	bhi.n	8005eb4 <osSemaphoreNew+0x108>
    mem = -1;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d015      	beq.n	8005e0e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <osSemaphoreNew+0x4c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b4f      	cmp	r3, #79	; 0x4f
 8005df0:	d902      	bls.n	8005df8 <osSemaphoreNew+0x4c>
        mem = 1;
 8005df2:	2301      	movs	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e00c      	b.n	8005e12 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <osSemaphoreNew+0x66>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <osSemaphoreNew+0x66>
          mem = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e001      	b.n	8005e12 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d04c      	beq.n	8005eb4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d128      	bne.n	8005e72 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d10a      	bne.n	8005e3c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	9200      	str	r2, [sp, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	2001      	movs	r0, #1
 8005e34:	f000 fa4a 	bl	80062cc <xQueueGenericCreateStatic>
 8005e38:	61f8      	str	r0, [r7, #28]
 8005e3a:	e005      	b.n	8005e48 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	2100      	movs	r1, #0
 8005e40:	2001      	movs	r0, #1
 8005e42:	f000 fabb 	bl	80063bc <xQueueGenericCreate>
 8005e46:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d022      	beq.n	8005e94 <osSemaphoreNew+0xe8>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01f      	beq.n	8005e94 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e54:	2300      	movs	r3, #0
 8005e56:	2200      	movs	r2, #0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	69f8      	ldr	r0, [r7, #28]
 8005e5c:	f000 fb76 	bl	800654c <xQueueGenericSend>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d016      	beq.n	8005e94 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e66:	69f8      	ldr	r0, [r7, #28]
 8005e68:	f001 f83e 	bl	8006ee8 <vQueueDelete>
            hSemaphore = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	e010      	b.n	8005e94 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d108      	bne.n	8005e8a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 faf8 	bl	8006476 <xQueueCreateCountingSemaphoreStatic>
 8005e86:	61f8      	str	r0, [r7, #28]
 8005e88:	e004      	b.n	8005e94 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fb29 	bl	80064e4 <xQueueCreateCountingSemaphore>
 8005e92:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e001      	b.n	8005eac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005eac:	6979      	ldr	r1, [r7, #20]
 8005eae:	69f8      	ldr	r0, [r7, #28]
 8005eb0:	f001 f966 	bl	8007180 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005ed8:	f06f 0303 	mvn.w	r3, #3
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e039      	b.n	8005f54 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ee0:	f3ef 8305 	mrs	r3, IPSR
 8005ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d022      	beq.n	8005f32 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005ef2:	f06f 0303 	mvn.w	r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	e02c      	b.n	8005f54 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	461a      	mov	r2, r3
 8005f04:	2100      	movs	r1, #0
 8005f06:	6938      	ldr	r0, [r7, #16]
 8005f08:	f000 ff32 	bl	8006d70 <xQueueReceiveFromISR>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d003      	beq.n	8005f1a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005f12:	f06f 0302 	mvn.w	r3, #2
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e01c      	b.n	8005f54 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d019      	beq.n	8005f54 <osSemaphoreAcquire+0x94>
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <osSemaphoreAcquire+0xa0>)
 8005f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	e010      	b.n	8005f54 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f000 fe0f 	bl	8006b58 <xQueueSemaphoreTake>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d009      	beq.n	8005f54 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f46:	f06f 0301 	mvn.w	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e002      	b.n	8005f54 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f4e:	f06f 0302 	mvn.w	r3, #2
 8005f52:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f54:	697b      	ldr	r3, [r7, #20]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	e000ed04 	.word	0xe000ed04

08005f64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f7a:	f06f 0303 	mvn.w	r3, #3
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e02c      	b.n	8005fdc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f82:	f3ef 8305 	mrs	r3, IPSR
 8005f86:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f88:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01a      	beq.n	8005fc4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005f92:	f107 0308 	add.w	r3, r7, #8
 8005f96:	4619      	mov	r1, r3
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f000 fc70 	bl	800687e <xQueueGiveFromISR>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d003      	beq.n	8005fac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005fa4:	f06f 0302 	mvn.w	r3, #2
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e017      	b.n	8005fdc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d014      	beq.n	8005fdc <osSemaphoreRelease+0x78>
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <osSemaphoreRelease+0x84>)
 8005fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	e00b      	b.n	8005fdc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6938      	ldr	r0, [r7, #16]
 8005fcc:	f000 fabe 	bl	800654c <xQueueGenericSend>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d002      	beq.n	8005fdc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fd6:	f06f 0302 	mvn.w	r3, #2
 8005fda:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fdc:	697b      	ldr	r3, [r7, #20]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <osSemaphoreGetCount+0x18>
    count = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e00e      	b.n	8006022 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006004:	f3ef 8305 	mrs	r3, IPSR
 8006008:	60fb      	str	r3, [r7, #12]
  return(result);
 800600a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006010:	6938      	ldr	r0, [r7, #16]
 8006012:	f000 ff4b 	bl	8006eac <uxQueueMessagesWaitingFromISR>
 8006016:	6178      	str	r0, [r7, #20]
 8006018:	e003      	b.n	8006022 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800601a:	6938      	ldr	r0, [r7, #16]
 800601c:	f000 ff28 	bl	8006e70 <uxQueueMessagesWaiting>
 8006020:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8006022:	697b      	ldr	r3, [r7, #20]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a07      	ldr	r2, [pc, #28]	; (8006058 <vApplicationGetIdleTaskMemory+0x2c>)
 800603c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4a06      	ldr	r2, [pc, #24]	; (800605c <vApplicationGetIdleTaskMemory+0x30>)
 8006042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2280      	movs	r2, #128	; 0x80
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	200003c4 	.word	0x200003c4
 800605c:	20000420 	.word	0x20000420

08006060 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a07      	ldr	r2, [pc, #28]	; (800608c <vApplicationGetTimerTaskMemory+0x2c>)
 8006070:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4a06      	ldr	r2, [pc, #24]	; (8006090 <vApplicationGetTimerTaskMemory+0x30>)
 8006076:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800607e:	601a      	str	r2, [r3, #0]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20000620 	.word	0x20000620
 8006090:	2000067c 	.word	0x2000067c

08006094 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f103 0208 	add.w	r2, r3, #8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f103 0208 	add.w	r2, r3, #8
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f103 0208 	add.w	r2, r3, #8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d103      	bne.n	8006156 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e00c      	b.n	8006170 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3308      	adds	r3, #8
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e002      	b.n	8006164 <vListInsert+0x2e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	d2f6      	bcs.n	800615e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
}
 800619c:	bf00      	nop
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6892      	ldr	r2, [r2, #8]
 80061be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6852      	ldr	r2, [r2, #4]
 80061c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d103      	bne.n	80061dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006226:	f002 fef5 	bl	8009014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	3b01      	subs	r3, #1
 8006258:	68f9      	ldr	r1, [r7, #12]
 800625a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	441a      	add	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d114      	bne.n	80062a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01a      	beq.n	80062ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3310      	adds	r3, #16
 8006288:	4618      	mov	r0, r3
 800628a:	f001 feaf 	bl	8007fec <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d012      	beq.n	80062ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <xQueueGenericReset+0xcc>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	e009      	b.n	80062ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3310      	adds	r3, #16
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fef2 	bl	8006094 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff feed 	bl	8006094 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062ba:	f002 fedb 	bl	8009074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062be:	2301      	movs	r3, #1
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08e      	sub	sp, #56	; 0x38
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <xQueueGenericCreateStatic+0x52>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <xQueueGenericCreateStatic+0x56>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueGenericCreateStatic+0x58>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	623b      	str	r3, [r7, #32]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <xQueueGenericCreateStatic+0x7e>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <xQueueGenericCreateStatic+0x82>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <xQueueGenericCreateStatic+0x84>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	61fb      	str	r3, [r7, #28]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800636a:	2350      	movs	r3, #80	; 0x50
 800636c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d00a      	beq.n	800638a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	61bb      	str	r3, [r7, #24]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800638a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800639e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f83f 	bl	8006430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3730      	adds	r7, #48	; 0x30
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3350      	adds	r3, #80	; 0x50
 80063f4:	4618      	mov	r0, r3
 80063f6:	f002 ff2f 	bl	8009258 <pvPortMalloc>
 80063fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	3350      	adds	r3, #80	; 0x50
 800640a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006414:	79fa      	ldrb	r2, [r7, #7]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4613      	mov	r3, r2
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f805 	bl	8006430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006426:	69bb      	ldr	r3, [r7, #24]
	}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e002      	b.n	8006452 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800645e:	2101      	movs	r1, #1
 8006460:	69b8      	ldr	r0, [r7, #24]
 8006462:	f7ff fecb 	bl	80061fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006476:	b580      	push	{r7, lr}
 8006478:	b08a      	sub	sp, #40	; 0x28
 800647a:	af02      	add	r7, sp, #8
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	61bb      	str	r3, [r7, #24]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d90a      	bls.n	80064bc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	617b      	str	r3, [r7, #20]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064bc:	2302      	movs	r3, #2
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7ff ff00 	bl	80062cc <xQueueGenericCreateStatic>
 80064cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064da:	69fb      	ldr	r3, [r7, #28]
	}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	613b      	str	r3, [r7, #16]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d90a      	bls.n	8006528 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60fb      	str	r3, [r7, #12]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006528:	2202      	movs	r2, #2
 800652a:	2100      	movs	r1, #0
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff45 	bl	80063bc <xQueueGenericCreate>
 8006532:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006540:	697b      	ldr	r3, [r7, #20]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800655a:	2300      	movs	r3, #0
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericSend+0x32>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <xQueueGenericSend+0x40>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGenericSend+0x44>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <xQueueGenericSend+0x46>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <xQueueGenericSend+0x60>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d103      	bne.n	80065ba <xQueueGenericSend+0x6e>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <xQueueGenericSend+0x72>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <xQueueGenericSend+0x74>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <xQueueGenericSend+0x8e>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	623b      	str	r3, [r7, #32]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065da:	f001 fec5 	bl	8008368 <xTaskGetSchedulerState>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <xQueueGenericSend+0x9e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSend+0xa2>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSend+0xa4>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xQueueGenericSend+0xbe>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61fb      	str	r3, [r7, #28]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800660a:	f002 fd03 	bl	8009014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <xQueueGenericSend+0xd4>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d129      	bne.n	8006674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006626:	f000 fc9a 	bl	8006f5e <prvCopyDataToQueue>
 800662a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3324      	adds	r3, #36	; 0x24
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fcd7 	bl	8007fec <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <xQueueGenericSend+0x1f8>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e00a      	b.n	800666c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800665c:	4b39      	ldr	r3, [pc, #228]	; (8006744 <xQueueGenericSend+0x1f8>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800666c:	f002 fd02 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	e063      	b.n	800673c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800667a:	f002 fcfb 	bl	8009074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800667e:	2300      	movs	r3, #0
 8006680:	e05c      	b.n	800673c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4618      	mov	r0, r3
 800668e:	f001 fd11 	bl	80080b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006696:	f002 fced 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800669a:	f001 fa71 	bl	8007b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800669e:	f002 fcb9 	bl	8009014 <vPortEnterCritical>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d103      	bne.n	80066b8 <xQueueGenericSend+0x16c>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d103      	bne.n	80066ce <xQueueGenericSend+0x182>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ce:	f002 fcd1 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d2:	1d3a      	adds	r2, r7, #4
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fd00 	bl	80080e0 <xTaskCheckForTimeOut>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d124      	bne.n	8006730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e8:	f000 fd31 	bl	800714e <prvIsQueueFull>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d018      	beq.n	8006724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3310      	adds	r3, #16
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 fc26 	bl	8007f4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006702:	f000 fcbc 	bl	800707e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006706:	f001 fa49 	bl	8007b9c <xTaskResumeAll>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f af7c 	bne.w	800660a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <xQueueGenericSend+0x1f8>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	e772      	b.n	800660a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006726:	f000 fcaa 	bl	800707e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800672a:	f001 fa37 	bl	8007b9c <xTaskResumeAll>
 800672e:	e76c      	b.n	800660a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006732:	f000 fca4 	bl	800707e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006736:	f001 fa31 	bl	8007b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800673a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800673c:	4618      	mov	r0, r3
 800673e:	3738      	adds	r7, #56	; 0x38
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b090      	sub	sp, #64	; 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <xQueueGenericSendFromISR+0x3c>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <xQueueGenericSendFromISR+0x40>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <xQueueGenericSendFromISR+0x42>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d103      	bne.n	80067b2 <xQueueGenericSendFromISR+0x6a>
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <xQueueGenericSendFromISR+0x6e>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <xQueueGenericSendFromISR+0x70>
 80067b6:	2300      	movs	r3, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067d2:	f002 fd01 	bl	80091d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067d6:	f3ef 8211 	mrs	r2, BASEPRI
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61fa      	str	r2, [r7, #28]
 80067ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <xQueueGenericSendFromISR+0xbc>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d12f      	bne.n	8006864 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800681a:	f000 fba0 	bl	8006f5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800681e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d112      	bne.n	800684e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fbd9 	bl	8007fec <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e007      	b.n	800685e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800684e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006852:	3301      	adds	r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	b25a      	sxtb	r2, r3
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800685e:	2301      	movs	r3, #1
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006862:	e001      	b.n	8006868 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006864:	2300      	movs	r3, #0
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006876:	4618      	mov	r0, r3
 8006878:	3740      	adds	r7, #64	; 0x40
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b08e      	sub	sp, #56	; 0x38
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	623b      	str	r3, [r7, #32]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	61fb      	str	r3, [r7, #28]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <xQueueGiveFromISR+0x58>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <xQueueGiveFromISR+0x5c>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <xQueueGiveFromISR+0x5e>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	61bb      	str	r3, [r7, #24]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068f6:	f002 fc6f 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 80068fa:	f3ef 8211 	mrs	r2, BASEPRI
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	617a      	str	r2, [r7, #20]
 8006910:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006912:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006922:	429a      	cmp	r2, r3
 8006924:	d22b      	bcs.n	800697e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800692c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006938:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d112      	bne.n	8006968 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	3324      	adds	r3, #36	; 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f001 fb4c 	bl	8007fec <xTaskRemoveFromEventList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e007      	b.n	8006978 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696c:	3301      	adds	r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	b25a      	sxtb	r2, r3
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006978:	2301      	movs	r3, #1
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
 800697c:	e001      	b.n	8006982 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800697e:	2300      	movs	r3, #0
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f383 8811 	msr	BASEPRI, r3
}
 800698c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006990:	4618      	mov	r0, r3
 8006992:	3738      	adds	r7, #56	; 0x38
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08c      	sub	sp, #48	; 0x30
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <xQueueReceive+0x30>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	623b      	str	r3, [r7, #32]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <xQueueReceive+0x3e>
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <xQueueReceive+0x42>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <xQueueReceive+0x44>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xQueueReceive+0x5e>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	61fb      	str	r3, [r7, #28]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f6:	f001 fcb7 	bl	8008368 <xTaskGetSchedulerState>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xQueueReceive+0x6e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <xQueueReceive+0x72>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueReceive+0x74>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueReceive+0x8e>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	61bb      	str	r3, [r7, #24]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a26:	f002 faf5 	bl	8009014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01f      	beq.n	8006a76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3a:	f000 fafa 	bl	8007032 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	1e5a      	subs	r2, r3, #1
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00f      	beq.n	8006a6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	3310      	adds	r3, #16
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 faca 	bl	8007fec <xTaskRemoveFromEventList>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a5e:	4b3d      	ldr	r3, [pc, #244]	; (8006b54 <xQueueReceive+0x1bc>)
 8006a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a6e:	f002 fb01 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e069      	b.n	8006b4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a7c:	f002 fafa 	bl	8009074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e062      	b.n	8006b4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 fb10 	bl	80080b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a98:	f002 faec 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a9c:	f001 f870 	bl	8007b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aa0:	f002 fab8 	bl	8009014 <vPortEnterCritical>
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d103      	bne.n	8006aba <xQueueReceive+0x122>
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d103      	bne.n	8006ad0 <xQueueReceive+0x138>
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad0:	f002 fad0 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ad4:	1d3a      	adds	r2, r7, #4
 8006ad6:	f107 0310 	add.w	r3, r7, #16
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 faff 	bl	80080e0 <xTaskCheckForTimeOut>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d123      	bne.n	8006b30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aea:	f000 fb1a 	bl	8007122 <prvIsQueueEmpty>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d017      	beq.n	8006b24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 fa25 	bl	8007f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b04:	f000 fabb 	bl	800707e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b08:	f001 f848 	bl	8007b9c <xTaskResumeAll>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d189      	bne.n	8006a26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b12:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <xQueueReceive+0x1bc>)
 8006b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	e780      	b.n	8006a26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b26:	f000 faaa 	bl	800707e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b2a:	f001 f837 	bl	8007b9c <xTaskResumeAll>
 8006b2e:	e77a      	b.n	8006a26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b32:	f000 faa4 	bl	800707e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b36:	f001 f831 	bl	8007b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3c:	f000 faf1 	bl	8007122 <prvIsQueueEmpty>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f43f af6f 	beq.w	8006a26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3730      	adds	r7, #48	; 0x30
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	; 0x38
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	623b      	str	r3, [r7, #32]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	61fb      	str	r3, [r7, #28]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ba8:	f001 fbde 	bl	8008368 <xTaskGetSchedulerState>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <xQueueSemaphoreTake+0x60>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <xQueueSemaphoreTake+0x64>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <xQueueSemaphoreTake+0x66>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	61bb      	str	r3, [r7, #24]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bd8:	f002 fa1c 	bl	8009014 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d024      	beq.n	8006c32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	1e5a      	subs	r2, r3, #1
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bf8:	f001 fd2c 	bl	8008654 <pvTaskIncrementMutexHeldCount>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00f      	beq.n	8006c2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	3310      	adds	r3, #16
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f9ec 	bl	8007fec <xTaskRemoveFromEventList>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c1a:	4b54      	ldr	r3, [pc, #336]	; (8006d6c <xQueueSemaphoreTake+0x214>)
 8006c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c2a:	f002 fa23 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e097      	b.n	8006d62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d111      	bne.n	8006c5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	617b      	str	r3, [r7, #20]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c54:	f002 fa0e 	bl	8009074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e082      	b.n	8006d62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c62:	f107 030c 	add.w	r3, r7, #12
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 fa24 	bl	80080b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c70:	f002 fa00 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c74:	f000 ff84 	bl	8007b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c78:	f002 f9cc 	bl	8009014 <vPortEnterCritical>
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d103      	bne.n	8006c92 <xQueueSemaphoreTake+0x13a>
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d103      	bne.n	8006ca8 <xQueueSemaphoreTake+0x150>
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca8:	f002 f9e4 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cac:	463a      	mov	r2, r7
 8006cae:	f107 030c 	add.w	r3, r7, #12
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 fa13 	bl	80080e0 <xTaskCheckForTimeOut>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d132      	bne.n	8006d26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc2:	f000 fa2e 	bl	8007122 <prvIsQueueEmpty>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d026      	beq.n	8006d1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006cd4:	f002 f99e 	bl	8009014 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fb61 	bl	80083a4 <xTaskPriorityInherit>
 8006ce2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ce4:	f002 f9c6 	bl	8009074 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	3324      	adds	r3, #36	; 0x24
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 f92b 	bl	8007f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf8:	f000 f9c1 	bl	800707e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cfc:	f000 ff4e 	bl	8007b9c <xTaskResumeAll>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f47f af68 	bne.w	8006bd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d08:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <xQueueSemaphoreTake+0x214>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e75e      	b.n	8006bd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d1c:	f000 f9af 	bl	800707e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d20:	f000 ff3c 	bl	8007b9c <xTaskResumeAll>
 8006d24:	e758      	b.n	8006bd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d28:	f000 f9a9 	bl	800707e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d2c:	f000 ff36 	bl	8007b9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d32:	f000 f9f6 	bl	8007122 <prvIsQueueEmpty>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f43f af4d 	beq.w	8006bd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006d44:	f002 f966 	bl	8009014 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d4a:	f000 f8f0 	bl	8006f2e <prvGetDisinheritPriorityAfterTimeout>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fbfa 	bl	8008550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d5c:	f002 f98a 	bl	8009074 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3738      	adds	r7, #56	; 0x38
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08e      	sub	sp, #56	; 0x38
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	623b      	str	r3, [r7, #32]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <xQueueReceiveFromISR+0x3a>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <xQueueReceiveFromISR+0x3e>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <xQueueReceiveFromISR+0x40>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	61fb      	str	r3, [r7, #28]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dca:	f002 fa05 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006dce:	f3ef 8211 	mrs	r2, BASEPRI
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	61ba      	str	r2, [r7, #24]
 8006de4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006de6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d02f      	beq.n	8006e56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e04:	f000 f915 	bl	8007032 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	1e5a      	subs	r2, r3, #1
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d112      	bne.n	8006e40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	3310      	adds	r3, #16
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f8e0 	bl	8007fec <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e44:	3301      	adds	r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	b25a      	sxtb	r2, r3
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e50:	2301      	movs	r3, #1
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	e001      	b.n	8006e5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f383 8811 	msr	BASEPRI, r3
}
 8006e64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3738      	adds	r7, #56	; 0x38
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60bb      	str	r3, [r7, #8]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006e94:	f002 f8be 	bl	8009014 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006e9e:	f002 f8e9 	bl	8009074 <vPortExitCritical>

	return uxReturn;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006eda:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <vQueueDelete+0x28>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	60bb      	str	r3, [r7, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f95f 	bl	80071d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f002 fa65 	bl	80093f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e001      	b.n	8006f50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f50:	68fb      	ldr	r3, [r7, #12]
	}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10d      	bne.n	8006f98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d14d      	bne.n	8007020 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fa73 	bl	8008474 <xTaskPriorityDisinherit>
 8006f8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
 8006f96:	e043      	b.n	8007020 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d119      	bne.n	8006fd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6858      	ldr	r0, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	f003 fb38 	bl	800a61e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	441a      	add	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d32b      	bcc.n	8007020 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	e026      	b.n	8007020 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68d8      	ldr	r0, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	f003 fb1e 	bl	800a61e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	425b      	negs	r3, r3
 8006fec:	441a      	add	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d207      	bcs.n	800700e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	425b      	negs	r3, r3
 8007008:	441a      	add	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d105      	bne.n	8007020 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	3b01      	subs	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007028:	697b      	ldr	r3, [r7, #20]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d018      	beq.n	8007076 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	441a      	add	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d303      	bcc.n	8007066 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68d9      	ldr	r1, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	461a      	mov	r2, r3
 8007070:	6838      	ldr	r0, [r7, #0]
 8007072:	f003 fad4 	bl	800a61e <memcpy>
	}
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007086:	f001 ffc5 	bl	8009014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007090:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007092:	e011      	b.n	80070b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d012      	beq.n	80070c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3324      	adds	r3, #36	; 0x24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 ffa3 	bl	8007fec <xTaskRemoveFromEventList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070ac:	f001 f87a 	bl	80081a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dce9      	bgt.n	8007094 <prvUnlockQueue+0x16>
 80070c0:	e000      	b.n	80070c4 <prvUnlockQueue+0x46>
					break;
 80070c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	22ff      	movs	r2, #255	; 0xff
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070cc:	f001 ffd2 	bl	8009074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070d0:	f001 ffa0 	bl	8009014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070dc:	e011      	b.n	8007102 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d012      	beq.n	800710c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3310      	adds	r3, #16
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 ff7e 	bl	8007fec <xTaskRemoveFromEventList>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070f6:	f001 f855 	bl	80081a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	dce9      	bgt.n	80070de <prvUnlockQueue+0x60>
 800710a:	e000      	b.n	800710e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800710c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007116:	f001 ffad 	bl	8009074 <vPortExitCritical>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800712a:	f001 ff73 	bl	8009014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007136:	2301      	movs	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e001      	b.n	8007140 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007140:	f001 ff98 	bl	8009074 <vPortExitCritical>

	return xReturn;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007156:	f001 ff5d 	bl	8009014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	429a      	cmp	r2, r3
 8007164:	d102      	bne.n	800716c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e001      	b.n	8007170 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007170:	f001 ff80 	bl	8009074 <vPortExitCritical>

	return xReturn;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e014      	b.n	80071ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007190:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <vQueueAddToRegistry+0x50>)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800719c:	490c      	ldr	r1, [pc, #48]	; (80071d0 <vQueueAddToRegistry+0x50>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071a6:	4a0a      	ldr	r2, [pc, #40]	; (80071d0 <vQueueAddToRegistry+0x50>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4413      	add	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071b2:	e006      	b.n	80071c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b07      	cmp	r3, #7
 80071be:	d9e7      	bls.n	8007190 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000a7c 	.word	0x20000a7c

080071d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e016      	b.n	8007210 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80071e2:	4a10      	ldr	r2, [pc, #64]	; (8007224 <vQueueUnregisterQueue+0x50>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4413      	add	r3, r2
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d10b      	bne.n	800720a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80071f2:	4a0c      	ldr	r2, [pc, #48]	; (8007224 <vQueueUnregisterQueue+0x50>)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2100      	movs	r1, #0
 80071f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80071fc:	4a09      	ldr	r2, [pc, #36]	; (8007224 <vQueueUnregisterQueue+0x50>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4413      	add	r3, r2
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]
				break;
 8007208:	e006      	b.n	8007218 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3301      	adds	r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b07      	cmp	r3, #7
 8007214:	d9e5      	bls.n	80071e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000a7c 	.word	0x20000a7c

08007228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007238:	f001 feec 	bl	8009014 <vPortEnterCritical>
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007242:	b25b      	sxtb	r3, r3
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d103      	bne.n	8007252 <vQueueWaitForMessageRestricted+0x2a>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007258:	b25b      	sxtb	r3, r3
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d103      	bne.n	8007268 <vQueueWaitForMessageRestricted+0x40>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007268:	f001 ff04 	bl	8009074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fe89 	bl	8007f94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007282:	6978      	ldr	r0, [r7, #20]
 8007284:	f7ff fefb 	bl	800707e <prvUnlockQueue>
	}
 8007288:	bf00      	nop
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	; 0x38
 8007294:	af04      	add	r7, sp, #16
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	623b      	str	r3, [r7, #32]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	61fb      	str	r3, [r7, #28]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072d6:	235c      	movs	r3, #92	; 0x5c
 80072d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b5c      	cmp	r3, #92	; 0x5c
 80072de:	d00a      	beq.n	80072f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	61bb      	str	r3, [r7, #24]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01e      	beq.n	800733c <xTaskCreateStatic+0xac>
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01b      	beq.n	800733c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800730c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	2202      	movs	r2, #2
 8007312:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007316:	2300      	movs	r3, #0
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	f107 0314 	add.w	r3, r7, #20
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f850 	bl	80073d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007336:	f000 f8dd 	bl	80074f4 <prvAddNewTaskToReadyList>
 800733a:	e001      	b.n	8007340 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007340:	697b      	ldr	r3, [r7, #20]
	}
 8007342:	4618      	mov	r0, r3
 8007344:	3728      	adds	r7, #40	; 0x28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800734a:	b580      	push	{r7, lr}
 800734c:	b08c      	sub	sp, #48	; 0x30
 800734e:	af04      	add	r7, sp, #16
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4613      	mov	r3, r2
 8007358:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4618      	mov	r0, r3
 8007360:	f001 ff7a 	bl	8009258 <pvPortMalloc>
 8007364:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800736c:	205c      	movs	r0, #92	; 0x5c
 800736e:	f001 ff73 	bl	8009258 <pvPortMalloc>
 8007372:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
 8007380:	e005      	b.n	800738e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007382:	6978      	ldr	r0, [r7, #20]
 8007384:	f002 f834 	bl	80093f0 <vPortFree>
 8007388:	e001      	b.n	800738e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d017      	beq.n	80073c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	2300      	movs	r3, #0
 80073a0:	9303      	str	r3, [sp, #12]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	9302      	str	r3, [sp, #8]
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	9301      	str	r3, [sp, #4]
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f80e 	bl	80073d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073b8:	69f8      	ldr	r0, [r7, #28]
 80073ba:	f000 f89b 	bl	80074f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073be:	2301      	movs	r3, #1
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	e002      	b.n	80073ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073c4:	f04f 33ff 	mov.w	r3, #4294967295
 80073c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073ca:	69bb      	ldr	r3, [r7, #24]
	}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	461a      	mov	r2, r3
 80073ec:	21a5      	movs	r1, #165	; 0xa5
 80073ee:	f003 f83b 	bl	800a468 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073fc:	3b01      	subs	r3, #1
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	617b      	str	r3, [r7, #20]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d01f      	beq.n	8007472 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	e012      	b.n	800745e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	7819      	ldrb	r1, [r3, #0]
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	3334      	adds	r3, #52	; 0x34
 8007448:	460a      	mov	r2, r1
 800744a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	2b0f      	cmp	r3, #15
 8007462:	d9e9      	bls.n	8007438 <prvInitialiseNewTask+0x64>
 8007464:	e000      	b.n	8007468 <prvInitialiseNewTask+0x94>
			{
				break;
 8007466:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007470:	e003      	b.n	800747a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2b37      	cmp	r3, #55	; 0x37
 800747e:	d901      	bls.n	8007484 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007480:	2337      	movs	r3, #55	; 0x37
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007488:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	2200      	movs	r2, #0
 8007494:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	3304      	adds	r3, #4
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fe1a 	bl	80060d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	3318      	adds	r3, #24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fe15 	bl	80060d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	68f9      	ldr	r1, [r7, #12]
 80074d2:	69b8      	ldr	r0, [r7, #24]
 80074d4:	f001 fc74 	bl	8008dc0 <pxPortInitialiseStack>
 80074d8:	4602      	mov	r2, r0
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ea:	bf00      	nop
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074fc:	f001 fd8a 	bl	8009014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007500:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a2c      	ldr	r2, [pc, #176]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 8007508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800750a:	4b2c      	ldr	r3, [pc, #176]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007518:	4b27      	ldr	r3, [pc, #156]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d110      	bne.n	8007542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007520:	f000 fe64 	bl	80081ec <prvInitialiseTaskLists>
 8007524:	e00d      	b.n	8007542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <prvAddNewTaskToReadyList+0xcc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800752e:	4b23      	ldr	r3, [pc, #140]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d802      	bhi.n	8007542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800753c:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 800754a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <prvAddNewTaskToReadyList+0xd4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d903      	bls.n	8007568 <prvAddNewTaskToReadyList+0x74>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <prvAddNewTaskToReadyList+0xd4>)
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <prvAddNewTaskToReadyList+0xd8>)
 8007576:	441a      	add	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7fe fdb5 	bl	80060ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007584:	f001 fd76 	bl	8009074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <prvAddNewTaskToReadyList+0xcc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	429a      	cmp	r2, r3
 800759c:	d207      	bcs.n	80075ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <prvAddNewTaskToReadyList+0xdc>)
 80075a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000f90 	.word	0x20000f90
 80075bc:	20000abc 	.word	0x20000abc
 80075c0:	20000f9c 	.word	0x20000f9c
 80075c4:	20000fac 	.word	0x20000fac
 80075c8:	20000f98 	.word	0x20000f98
 80075cc:	20000ac0 	.word	0x20000ac0
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <vTaskDelayUntil+0x2a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	617b      	str	r3, [r7, #20]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <vTaskDelayUntil+0x46>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	613b      	str	r3, [r7, #16]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800761a:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <vTaskDelayUntil+0xf0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <vTaskDelayUntil+0x64>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60fb      	str	r3, [r7, #12]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007638:	f000 faa2 	bl	8007b80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800763c:	4b22      	ldr	r3, [pc, #136]	; (80076c8 <vTaskDelayUntil+0xf4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	429a      	cmp	r2, r3
 8007654:	d20b      	bcs.n	800766e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	429a      	cmp	r2, r3
 800765e:	d211      	bcs.n	8007684 <vTaskDelayUntil+0xb0>
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	429a      	cmp	r2, r3
 8007666:	d90d      	bls.n	8007684 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
 800766c:	e00a      	b.n	8007684 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	429a      	cmp	r2, r3
 8007676:	d303      	bcc.n	8007680 <vTaskDelayUntil+0xac>
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	429a      	cmp	r2, r3
 800767e:	d901      	bls.n	8007684 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d006      	beq.n	800769e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f000 ffef 	bl	800867c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800769e:	f000 fa7d 	bl	8007b9c <xTaskResumeAll>
 80076a2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d107      	bne.n	80076ba <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80076aa:	4b08      	ldr	r3, [pc, #32]	; (80076cc <vTaskDelayUntil+0xf8>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076ba:	bf00      	nop
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000fb8 	.word	0x20000fb8
 80076c8:	20000f94 	.word	0x20000f94
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d017      	beq.n	8007712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <vTaskDelay+0x60>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <vTaskDelay+0x30>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60bb      	str	r3, [r7, #8]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007700:	f000 fa3e 	bl	8007b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 ffb8 	bl	800867c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800770c:	f000 fa46 	bl	8007b9c <xTaskResumeAll>
 8007710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d107      	bne.n	8007728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <vTaskDelay+0x64>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000fb8 	.word	0x20000fb8
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8007740:	f001 fc68 	bl	8009014 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <uxTaskPriorityGet+0x18>
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <uxTaskPriorityGet+0x30>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	e000      	b.n	8007752 <uxTaskPriorityGet+0x1a>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800775a:	f001 fc8b 	bl	8009074 <vPortExitCritical>

		return uxReturn;
 800775e:	68bb      	ldr	r3, [r7, #8]
	}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000abc 	.word	0x20000abc

0800776c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b37      	cmp	r3, #55	; 0x37
 800777e:	d90a      	bls.n	8007796 <vTaskPrioritySet+0x2a>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b37      	cmp	r3, #55	; 0x37
 800779a:	d901      	bls.n	80077a0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800779c:	2337      	movs	r3, #55	; 0x37
 800779e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80077a0:	f001 fc38 	bl	8009014 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <vTaskPrioritySet+0x44>
 80077aa:	4b3b      	ldr	r3, [pc, #236]	; (8007898 <vTaskPrioritySet+0x12c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	e000      	b.n	80077b2 <vTaskPrioritySet+0x46>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d063      	beq.n	800788a <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d90d      	bls.n	80077e6 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80077ca:	4b33      	ldr	r3, [pc, #204]	; (8007898 <vTaskPrioritySet+0x12c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d00f      	beq.n	80077f4 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80077d4:	4b30      	ldr	r3, [pc, #192]	; (8007898 <vTaskPrioritySet+0x12c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d309      	bcc.n	80077f4 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	e006      	b.n	80077f4 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80077e6:	4b2c      	ldr	r3, [pc, #176]	; (8007898 <vTaskPrioritySet+0x12c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d101      	bne.n	80077f4 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	429a      	cmp	r2, r3
 8007804:	d102      	bne.n	800780c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	db04      	blt.n	8007824 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	6959      	ldr	r1, [r3, #20]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a1a      	ldr	r2, [pc, #104]	; (800789c <vTaskPrioritySet+0x130>)
 8007834:	4413      	add	r3, r2
 8007836:	4299      	cmp	r1, r3
 8007838:	d11c      	bne.n	8007874 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	3304      	adds	r3, #4
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fcb2 	bl	80061a8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <vTaskPrioritySet+0x134>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d903      	bls.n	8007858 <vTaskPrioritySet+0xec>
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4a12      	ldr	r2, [pc, #72]	; (80078a0 <vTaskPrioritySet+0x134>)
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <vTaskPrioritySet+0x130>)
 8007866:	441a      	add	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fe fc3d 	bl	80060ee <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800787a:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <vTaskPrioritySet+0x138>)
 800787c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800788a:	f001 fbf3 	bl	8009074 <vPortExitCritical>
	}
 800788e:	bf00      	nop
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000abc 	.word	0x20000abc
 800789c:	20000ac0 	.word	0x20000ac0
 80078a0:	20000f98 	.word	0x20000f98
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80078b0:	f001 fbb0 	bl	8009014 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <vTaskSuspend+0x18>
 80078ba:	4b30      	ldr	r3, [pc, #192]	; (800797c <vTaskSuspend+0xd4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	e000      	b.n	80078c2 <vTaskSuspend+0x1a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fc6d 	bl	80061a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3318      	adds	r3, #24
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fc64 	bl	80061a8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4826      	ldr	r0, [pc, #152]	; (8007980 <vTaskSuspend+0xd8>)
 80078e8:	f7fe fc01 	bl	80060ee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d103      	bne.n	8007900 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007900:	f001 fbb8 	bl	8009074 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007904:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <vTaskSuspend+0xdc>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800790c:	f001 fb82 	bl	8009014 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007910:	f000 fd0a 	bl	8008328 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007914:	f001 fbae 	bl	8009074 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007918:	4b18      	ldr	r3, [pc, #96]	; (800797c <vTaskSuspend+0xd4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	429a      	cmp	r2, r3
 8007920:	d127      	bne.n	8007972 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <vTaskSuspend+0xdc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d017      	beq.n	800795a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800792a:	4b17      	ldr	r3, [pc, #92]	; (8007988 <vTaskSuspend+0xe0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <vTaskSuspend+0xa0>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	60bb      	str	r3, [r7, #8]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007948:	4b10      	ldr	r3, [pc, #64]	; (800798c <vTaskSuspend+0xe4>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007958:	e00b      	b.n	8007972 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <vTaskSuspend+0xd8>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <vTaskSuspend+0xe8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d103      	bne.n	800796e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <vTaskSuspend+0xd4>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
	}
 800796c:	e001      	b.n	8007972 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800796e:	f000 fa8f 	bl	8007e90 <vTaskSwitchContext>
	}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000abc 	.word	0x20000abc
 8007980:	20000f7c 	.word	0x20000f7c
 8007984:	20000f9c 	.word	0x20000f9c
 8007988:	20000fb8 	.word	0x20000fb8
 800798c:	e000ed04 	.word	0xe000ed04
 8007990:	20000f90 	.word	0x20000f90

08007994 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	60fb      	str	r3, [r7, #12]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <prvTaskIsTaskSuspended+0x5c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d10a      	bne.n	80079e0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <prvTaskIsTaskSuspended+0x60>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d005      	beq.n	80079e0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80079e2:	4618      	mov	r0, r3
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000f7c 	.word	0x20000f7c
 80079f4:	20000f50 	.word	0x20000f50

080079f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <vTaskResume+0x28>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	60bb      	str	r3, [r7, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007a20:	4b20      	ldr	r3, [pc, #128]	; (8007aa4 <vTaskResume+0xac>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d038      	beq.n	8007a9c <vTaskResume+0xa4>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d035      	beq.n	8007a9c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007a30:	f001 faf0 	bl	8009014 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff ffad 	bl	8007994 <prvTaskIsTaskSuspended>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d02b      	beq.n	8007a98 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fbaf 	bl	80061a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	4b16      	ldr	r3, [pc, #88]	; (8007aa8 <vTaskResume+0xb0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d903      	bls.n	8007a5e <vTaskResume+0x66>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <vTaskResume+0xb0>)
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4a10      	ldr	r2, [pc, #64]	; (8007aac <vTaskResume+0xb4>)
 8007a6c:	441a      	add	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fe fb3a 	bl	80060ee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <vTaskResume+0xac>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d307      	bcc.n	8007a98 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007a88:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <vTaskResume+0xb8>)
 8007a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007a98:	f001 faec 	bl	8009074 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000abc 	.word	0x20000abc
 8007aa8:	20000f98 	.word	0x20000f98
 8007aac:	20000ac0 	.word	0x20000ac0
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	; 0x28
 8007ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ac2:	463a      	mov	r2, r7
 8007ac4:	1d39      	adds	r1, r7, #4
 8007ac6:	f107 0308 	add.w	r3, r7, #8
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe faae 	bl	800602c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	9202      	str	r2, [sp, #8]
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	460a      	mov	r2, r1
 8007ae2:	4921      	ldr	r1, [pc, #132]	; (8007b68 <vTaskStartScheduler+0xb4>)
 8007ae4:	4821      	ldr	r0, [pc, #132]	; (8007b6c <vTaskStartScheduler+0xb8>)
 8007ae6:	f7ff fbd3 	bl	8007290 <xTaskCreateStatic>
 8007aea:	4603      	mov	r3, r0
 8007aec:	4a20      	ldr	r2, [pc, #128]	; (8007b70 <vTaskStartScheduler+0xbc>)
 8007aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007af0:	4b1f      	ldr	r3, [pc, #124]	; (8007b70 <vTaskStartScheduler+0xbc>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007af8:	2301      	movs	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e001      	b.n	8007b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d102      	bne.n	8007b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b08:	f000 fe0c 	bl	8008724 <xTimerCreateTimerTask>
 8007b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d116      	bne.n	8007b42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	613b      	str	r3, [r7, #16]
}
 8007b26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b28:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <vTaskStartScheduler+0xc0>)
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b30:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <vTaskStartScheduler+0xc4>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b36:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <vTaskStartScheduler+0xc8>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b3c:	f001 f9c8 	bl	8008ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b40:	e00e      	b.n	8007b60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b48:	d10a      	bne.n	8007b60 <vTaskStartScheduler+0xac>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60fb      	str	r3, [r7, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <vTaskStartScheduler+0xaa>
}
 8007b60:	bf00      	nop
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	0800c8e8 	.word	0x0800c8e8
 8007b6c:	080081bd 	.word	0x080081bd
 8007b70:	20000fb4 	.word	0x20000fb4
 8007b74:	20000fb0 	.word	0x20000fb0
 8007b78:	20000f9c 	.word	0x20000f9c
 8007b7c:	20000f94 	.word	0x20000f94

08007b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <vTaskSuspendAll+0x18>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a03      	ldr	r2, [pc, #12]	; (8007b98 <vTaskSuspendAll+0x18>)
 8007b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b8e:	bf00      	nop
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	20000fb8 	.word	0x20000fb8

08007b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007baa:	4b42      	ldr	r3, [pc, #264]	; (8007cb4 <xTaskResumeAll+0x118>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10a      	bne.n	8007bc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	603b      	str	r3, [r7, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bc8:	f001 fa24 	bl	8009014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bcc:	4b39      	ldr	r3, [pc, #228]	; (8007cb4 <xTaskResumeAll+0x118>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	4a38      	ldr	r2, [pc, #224]	; (8007cb4 <xTaskResumeAll+0x118>)
 8007bd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd6:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <xTaskResumeAll+0x118>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d162      	bne.n	8007ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bde:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <xTaskResumeAll+0x11c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d05e      	beq.n	8007ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007be6:	e02f      	b.n	8007c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be8:	4b34      	ldr	r3, [pc, #208]	; (8007cbc <xTaskResumeAll+0x120>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3318      	adds	r3, #24
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fad7 	bl	80061a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fad2 	bl	80061a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4b2d      	ldr	r3, [pc, #180]	; (8007cc0 <xTaskResumeAll+0x124>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d903      	bls.n	8007c18 <xTaskResumeAll+0x7c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	4a2a      	ldr	r2, [pc, #168]	; (8007cc0 <xTaskResumeAll+0x124>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a27      	ldr	r2, [pc, #156]	; (8007cc4 <xTaskResumeAll+0x128>)
 8007c26:	441a      	add	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f7fe fa5d 	bl	80060ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c38:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <xTaskResumeAll+0x12c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c42:	4b22      	ldr	r3, [pc, #136]	; (8007ccc <xTaskResumeAll+0x130>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c48:	4b1c      	ldr	r3, [pc, #112]	; (8007cbc <xTaskResumeAll+0x120>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1cb      	bne.n	8007be8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c56:	f000 fb67 	bl	8008328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c5a:	4b1d      	ldr	r3, [pc, #116]	; (8007cd0 <xTaskResumeAll+0x134>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d010      	beq.n	8007c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c66:	f000 f859 	bl	8007d1c <xTaskIncrementTick>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c70:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <xTaskResumeAll+0x130>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f1      	bne.n	8007c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <xTaskResumeAll+0x134>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c88:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <xTaskResumeAll+0x130>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c90:	2301      	movs	r3, #1
 8007c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <xTaskResumeAll+0x138>)
 8007c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ca4:	f001 f9e6 	bl	8009074 <vPortExitCritical>

	return xAlreadyYielded;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000fb8 	.word	0x20000fb8
 8007cb8:	20000f90 	.word	0x20000f90
 8007cbc:	20000f50 	.word	0x20000f50
 8007cc0:	20000f98 	.word	0x20000f98
 8007cc4:	20000ac0 	.word	0x20000ac0
 8007cc8:	20000abc 	.word	0x20000abc
 8007ccc:	20000fa4 	.word	0x20000fa4
 8007cd0:	20000fa0 	.word	0x20000fa0
 8007cd4:	e000ed04 	.word	0xe000ed04

08007cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <xTaskGetTickCount+0x1c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ce4:	687b      	ldr	r3, [r7, #4]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000f94 	.word	0x20000f94

08007cf8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cfe:	f001 fa6b 	bl	80091d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007d02:	2300      	movs	r3, #0
 8007d04:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007d06:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <xTaskGetTickCountFromISR+0x20>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d0c:	683b      	ldr	r3, [r7, #0]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000f94 	.word	0x20000f94

08007d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d26:	4b4f      	ldr	r3, [pc, #316]	; (8007e64 <xTaskIncrementTick+0x148>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 808f 	bne.w	8007e4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d30:	4b4d      	ldr	r3, [pc, #308]	; (8007e68 <xTaskIncrementTick+0x14c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d38:	4a4b      	ldr	r2, [pc, #300]	; (8007e68 <xTaskIncrementTick+0x14c>)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d120      	bne.n	8007d86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d44:	4b49      	ldr	r3, [pc, #292]	; (8007e6c <xTaskIncrementTick+0x150>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	603b      	str	r3, [r7, #0]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xTaskIncrementTick+0x46>
 8007d64:	4b41      	ldr	r3, [pc, #260]	; (8007e6c <xTaskIncrementTick+0x150>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	4b41      	ldr	r3, [pc, #260]	; (8007e70 <xTaskIncrementTick+0x154>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a3f      	ldr	r2, [pc, #252]	; (8007e6c <xTaskIncrementTick+0x150>)
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	4a3f      	ldr	r2, [pc, #252]	; (8007e70 <xTaskIncrementTick+0x154>)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4b3e      	ldr	r3, [pc, #248]	; (8007e74 <xTaskIncrementTick+0x158>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	4a3d      	ldr	r2, [pc, #244]	; (8007e74 <xTaskIncrementTick+0x158>)
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	f000 fad1 	bl	8008328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d86:	4b3c      	ldr	r3, [pc, #240]	; (8007e78 <xTaskIncrementTick+0x15c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d349      	bcc.n	8007e24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d90:	4b36      	ldr	r3, [pc, #216]	; (8007e6c <xTaskIncrementTick+0x150>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d9a:	4b37      	ldr	r3, [pc, #220]	; (8007e78 <xTaskIncrementTick+0x15c>)
 8007d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007da0:	601a      	str	r2, [r3, #0]
					break;
 8007da2:	e03f      	b.n	8007e24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da4:	4b31      	ldr	r3, [pc, #196]	; (8007e6c <xTaskIncrementTick+0x150>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d203      	bcs.n	8007dc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dbc:	4a2e      	ldr	r2, [pc, #184]	; (8007e78 <xTaskIncrementTick+0x15c>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dc2:	e02f      	b.n	8007e24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe f9ed 	bl	80061a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	3318      	adds	r3, #24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe f9e4 	bl	80061a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <xTaskIncrementTick+0x160>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d903      	bls.n	8007df4 <xTaskIncrementTick+0xd8>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <xTaskIncrementTick+0x160>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <xTaskIncrementTick+0x164>)
 8007e02:	441a      	add	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe f96f 	bl	80060ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4b1b      	ldr	r3, [pc, #108]	; (8007e84 <xTaskIncrementTick+0x168>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d3b8      	bcc.n	8007d90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e22:	e7b5      	b.n	8007d90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e24:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <xTaskIncrementTick+0x168>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2a:	4915      	ldr	r1, [pc, #84]	; (8007e80 <xTaskIncrementTick+0x164>)
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d901      	bls.n	8007e40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <xTaskIncrementTick+0x16c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e004      	b.n	8007e58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <xTaskIncrementTick+0x170>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	4a0d      	ldr	r2, [pc, #52]	; (8007e8c <xTaskIncrementTick+0x170>)
 8007e56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e58:	697b      	ldr	r3, [r7, #20]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000fb8 	.word	0x20000fb8
 8007e68:	20000f94 	.word	0x20000f94
 8007e6c:	20000f48 	.word	0x20000f48
 8007e70:	20000f4c 	.word	0x20000f4c
 8007e74:	20000fa8 	.word	0x20000fa8
 8007e78:	20000fb0 	.word	0x20000fb0
 8007e7c:	20000f98 	.word	0x20000f98
 8007e80:	20000ac0 	.word	0x20000ac0
 8007e84:	20000abc 	.word	0x20000abc
 8007e88:	20000fa4 	.word	0x20000fa4
 8007e8c:	20000fa0 	.word	0x20000fa0

08007e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e96:	4b28      	ldr	r3, [pc, #160]	; (8007f38 <vTaskSwitchContext+0xa8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e9e:	4b27      	ldr	r3, [pc, #156]	; (8007f3c <vTaskSwitchContext+0xac>)
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ea4:	e041      	b.n	8007f2a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007ea6:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <vTaskSwitchContext+0xac>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eac:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <vTaskSwitchContext+0xb0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	e010      	b.n	8007ed6 <vTaskSwitchContext+0x46>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	607b      	str	r3, [r7, #4]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <vTaskSwitchContext+0x3e>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	491b      	ldr	r1, [pc, #108]	; (8007f44 <vTaskSwitchContext+0xb4>)
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0e4      	beq.n	8007eb4 <vTaskSwitchContext+0x24>
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <vTaskSwitchContext+0xb4>)
 8007ef6:	4413      	add	r3, r2
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d104      	bne.n	8007f1a <vTaskSwitchContext+0x8a>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	4a09      	ldr	r2, [pc, #36]	; (8007f48 <vTaskSwitchContext+0xb8>)
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4a06      	ldr	r2, [pc, #24]	; (8007f40 <vTaskSwitchContext+0xb0>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6013      	str	r3, [r2, #0]
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	20000fb8 	.word	0x20000fb8
 8007f3c:	20000fa4 	.word	0x20000fa4
 8007f40:	20000f98 	.word	0x20000f98
 8007f44:	20000ac0 	.word	0x20000ac0
 8007f48:	20000abc 	.word	0x20000abc

08007f4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f72:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <vTaskPlaceOnEventList+0x44>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3318      	adds	r3, #24
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe f8db 	bl	8006136 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f80:	2101      	movs	r1, #1
 8007f82:	6838      	ldr	r0, [r7, #0]
 8007f84:	f000 fb7a 	bl	800867c <prvAddCurrentTaskToDelayedList>
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000abc 	.word	0x20000abc

08007f94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	617b      	str	r3, [r7, #20]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3318      	adds	r3, #24
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7fe f892 	bl	80060ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	68b8      	ldr	r0, [r7, #8]
 8007fda:	f000 fb4f 	bl	800867c <prvAddCurrentTaskToDelayedList>
	}
 8007fde:	bf00      	nop
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000abc 	.word	0x20000abc

08007fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60fb      	str	r3, [r7, #12]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	3318      	adds	r3, #24
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe f8c3 	bl	80061a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008022:	4b1e      	ldr	r3, [pc, #120]	; (800809c <xTaskRemoveFromEventList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11d      	bne.n	8008066 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	3304      	adds	r3, #4
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe f8ba 	bl	80061a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <xTaskRemoveFromEventList+0xb4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d903      	bls.n	8008048 <xTaskRemoveFromEventList+0x5c>
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <xTaskRemoveFromEventList+0xb4>)
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4a13      	ldr	r2, [pc, #76]	; (80080a4 <xTaskRemoveFromEventList+0xb8>)
 8008056:	441a      	add	r2, r3
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe f845 	bl	80060ee <vListInsertEnd>
 8008064:	e005      	b.n	8008072 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	3318      	adds	r3, #24
 800806a:	4619      	mov	r1, r3
 800806c:	480e      	ldr	r0, [pc, #56]	; (80080a8 <xTaskRemoveFromEventList+0xbc>)
 800806e:	f7fe f83e 	bl	80060ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <xTaskRemoveFromEventList+0xc0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	429a      	cmp	r2, r3
 800807e:	d905      	bls.n	800808c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <xTaskRemoveFromEventList+0xc4>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e001      	b.n	8008090 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008090:	697b      	ldr	r3, [r7, #20]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000fb8 	.word	0x20000fb8
 80080a0:	20000f98 	.word	0x20000f98
 80080a4:	20000ac0 	.word	0x20000ac0
 80080a8:	20000f50 	.word	0x20000f50
 80080ac:	20000abc 	.word	0x20000abc
 80080b0:	20000fa4 	.word	0x20000fa4

080080b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080bc:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <vTaskInternalSetTimeOutState+0x24>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <vTaskInternalSetTimeOutState+0x28>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	605a      	str	r2, [r3, #4]
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	20000fa8 	.word	0x20000fa8
 80080dc:	20000f94 	.word	0x20000f94

080080e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008122:	f000 ff77 	bl	8009014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <xTaskCheckForTimeOut+0xbc>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d102      	bne.n	8008146 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e023      	b.n	800818e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <xTaskCheckForTimeOut+0xc0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d007      	beq.n	8008162 <xTaskCheckForTimeOut+0x82>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	429a      	cmp	r2, r3
 800815a:	d302      	bcc.n	8008162 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e015      	b.n	800818e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	429a      	cmp	r2, r3
 800816a:	d20b      	bcs.n	8008184 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1ad2      	subs	r2, r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ff9b 	bl	80080b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	61fb      	str	r3, [r7, #28]
 8008182:	e004      	b.n	800818e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800818a:	2301      	movs	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800818e:	f000 ff71 	bl	8009074 <vPortExitCritical>

	return xReturn;
 8008192:	69fb      	ldr	r3, [r7, #28]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000f94 	.word	0x20000f94
 80081a0:	20000fa8 	.word	0x20000fa8

080081a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081a8:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <vTaskMissedYield+0x14>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
}
 80081ae:	bf00      	nop
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000fa4 	.word	0x20000fa4

080081bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081c4:	f000 f852 	bl	800826c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081c8:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <prvIdleTask+0x28>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d9f9      	bls.n	80081c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <prvIdleTask+0x2c>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081e0:	e7f0      	b.n	80081c4 <prvIdleTask+0x8>
 80081e2:	bf00      	nop
 80081e4:	20000ac0 	.word	0x20000ac0
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f2:	2300      	movs	r3, #0
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	e00c      	b.n	8008212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4a12      	ldr	r2, [pc, #72]	; (800824c <prvInitialiseTaskLists+0x60>)
 8008204:	4413      	add	r3, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd ff44 	bl	8006094 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3301      	adds	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b37      	cmp	r3, #55	; 0x37
 8008216:	d9ef      	bls.n	80081f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008218:	480d      	ldr	r0, [pc, #52]	; (8008250 <prvInitialiseTaskLists+0x64>)
 800821a:	f7fd ff3b 	bl	8006094 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800821e:	480d      	ldr	r0, [pc, #52]	; (8008254 <prvInitialiseTaskLists+0x68>)
 8008220:	f7fd ff38 	bl	8006094 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008224:	480c      	ldr	r0, [pc, #48]	; (8008258 <prvInitialiseTaskLists+0x6c>)
 8008226:	f7fd ff35 	bl	8006094 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800822a:	480c      	ldr	r0, [pc, #48]	; (800825c <prvInitialiseTaskLists+0x70>)
 800822c:	f7fd ff32 	bl	8006094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008230:	480b      	ldr	r0, [pc, #44]	; (8008260 <prvInitialiseTaskLists+0x74>)
 8008232:	f7fd ff2f 	bl	8006094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <prvInitialiseTaskLists+0x78>)
 8008238:	4a05      	ldr	r2, [pc, #20]	; (8008250 <prvInitialiseTaskLists+0x64>)
 800823a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <prvInitialiseTaskLists+0x7c>)
 800823e:	4a05      	ldr	r2, [pc, #20]	; (8008254 <prvInitialiseTaskLists+0x68>)
 8008240:	601a      	str	r2, [r3, #0]
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000ac0 	.word	0x20000ac0
 8008250:	20000f20 	.word	0x20000f20
 8008254:	20000f34 	.word	0x20000f34
 8008258:	20000f50 	.word	0x20000f50
 800825c:	20000f64 	.word	0x20000f64
 8008260:	20000f7c 	.word	0x20000f7c
 8008264:	20000f48 	.word	0x20000f48
 8008268:	20000f4c 	.word	0x20000f4c

0800826c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008272:	e019      	b.n	80082a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008274:	f000 fece 	bl	8009014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008278:	4b10      	ldr	r3, [pc, #64]	; (80082bc <prvCheckTasksWaitingTermination+0x50>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	4618      	mov	r0, r3
 8008286:	f7fd ff8f 	bl	80061a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <prvCheckTasksWaitingTermination+0x54>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3b01      	subs	r3, #1
 8008290:	4a0b      	ldr	r2, [pc, #44]	; (80082c0 <prvCheckTasksWaitingTermination+0x54>)
 8008292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008294:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <prvCheckTasksWaitingTermination+0x58>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3b01      	subs	r3, #1
 800829a:	4a0a      	ldr	r2, [pc, #40]	; (80082c4 <prvCheckTasksWaitingTermination+0x58>)
 800829c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800829e:	f000 fee9 	bl	8009074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f810 	bl	80082c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <prvCheckTasksWaitingTermination+0x58>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e1      	bne.n	8008274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000f64 	.word	0x20000f64
 80082c0:	20000f90 	.word	0x20000f90
 80082c4:	20000f78 	.word	0x20000f78

080082c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d108      	bne.n	80082ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 f886 	bl	80093f0 <vPortFree>
				vPortFree( pxTCB );
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f883 	bl	80093f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ea:	e018      	b.n	800831e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d103      	bne.n	80082fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f87a 	bl	80093f0 <vPortFree>
	}
 80082fc:	e00f      	b.n	800831e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008304:	2b02      	cmp	r3, #2
 8008306:	d00a      	beq.n	800831e <prvDeleteTCB+0x56>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	60fb      	str	r3, [r7, #12]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <prvDeleteTCB+0x54>
	}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <prvResetNextTaskUnblockTime+0x38>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008338:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <prvResetNextTaskUnblockTime+0x3c>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008340:	e008      	b.n	8008354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <prvResetNextTaskUnblockTime+0x38>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a04      	ldr	r2, [pc, #16]	; (8008364 <prvResetNextTaskUnblockTime+0x3c>)
 8008352:	6013      	str	r3, [r2, #0]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	20000f48 	.word	0x20000f48
 8008364:	20000fb0 	.word	0x20000fb0

08008368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800836e:	4b0b      	ldr	r3, [pc, #44]	; (800839c <xTaskGetSchedulerState+0x34>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008376:	2301      	movs	r3, #1
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	e008      	b.n	800838e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837c:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <xTaskGetSchedulerState+0x38>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008384:	2302      	movs	r3, #2
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	e001      	b.n	800838e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800838e:	687b      	ldr	r3, [r7, #4]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000f9c 	.word	0x20000f9c
 80083a0:	20000fb8 	.word	0x20000fb8

080083a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d051      	beq.n	800845e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083be:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <xTaskPriorityInherit+0xc4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d241      	bcs.n	800844c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	db06      	blt.n	80083de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d0:	4b25      	ldr	r3, [pc, #148]	; (8008468 <xTaskPriorityInherit+0xc4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6959      	ldr	r1, [r3, #20]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a1f      	ldr	r2, [pc, #124]	; (800846c <xTaskPriorityInherit+0xc8>)
 80083f0:	4413      	add	r3, r2
 80083f2:	4299      	cmp	r1, r3
 80083f4:	d122      	bne.n	800843c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd fed4 	bl	80061a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008400:	4b19      	ldr	r3, [pc, #100]	; (8008468 <xTaskPriorityInherit+0xc4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840e:	4b18      	ldr	r3, [pc, #96]	; (8008470 <xTaskPriorityInherit+0xcc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d903      	bls.n	800841e <xTaskPriorityInherit+0x7a>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	4a15      	ldr	r2, [pc, #84]	; (8008470 <xTaskPriorityInherit+0xcc>)
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4a10      	ldr	r2, [pc, #64]	; (800846c <xTaskPriorityInherit+0xc8>)
 800842c:	441a      	add	r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7fd fe5a 	bl	80060ee <vListInsertEnd>
 800843a:	e004      	b.n	8008446 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <xTaskPriorityInherit+0xc4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008446:	2301      	movs	r3, #1
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e008      	b.n	800845e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <xTaskPriorityInherit+0xc4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	429a      	cmp	r2, r3
 8008458:	d201      	bcs.n	800845e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800845e:	68fb      	ldr	r3, [r7, #12]
	}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000abc 	.word	0x20000abc
 800846c:	20000ac0 	.word	0x20000ac0
 8008470:	20000f98 	.word	0x20000f98

08008474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d056      	beq.n	8008538 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800848a:	4b2e      	ldr	r3, [pc, #184]	; (8008544 <xTaskPriorityDisinherit+0xd0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	429a      	cmp	r2, r3
 8008492:	d00a      	beq.n	80084aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60fb      	str	r3, [r7, #12]
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	60bb      	str	r3, [r7, #8]
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084cc:	1e5a      	subs	r2, r3, #1
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084da:	429a      	cmp	r2, r3
 80084dc:	d02c      	beq.n	8008538 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d128      	bne.n	8008538 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fd fe5c 	bl	80061a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008508:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskPriorityDisinherit+0xd4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d903      	bls.n	8008518 <xTaskPriorityDisinherit+0xa4>
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <xTaskPriorityDisinherit+0xd4>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4a09      	ldr	r2, [pc, #36]	; (800854c <xTaskPriorityDisinherit+0xd8>)
 8008526:	441a      	add	r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3304      	adds	r3, #4
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fd fddd 	bl	80060ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008538:	697b      	ldr	r3, [r7, #20]
	}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000abc 	.word	0x20000abc
 8008548:	20000f98 	.word	0x20000f98
 800854c:	20000ac0 	.word	0x20000ac0

08008550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800855e:	2301      	movs	r3, #1
 8008560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d06a      	beq.n	800863e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d902      	bls.n	8008596 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	e002      	b.n	800859c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d04b      	beq.n	800863e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d146      	bne.n	800863e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085b0:	4b25      	ldr	r3, [pc, #148]	; (8008648 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d10a      	bne.n	80085d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	60bb      	str	r3, [r7, #8]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db04      	blt.n	80085ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	6959      	ldr	r1, [r3, #20]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4a13      	ldr	r2, [pc, #76]	; (800864c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085fe:	4413      	add	r3, r2
 8008600:	4299      	cmp	r1, r3
 8008602:	d11c      	bne.n	800863e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fdcd 	bl	80061a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d903      	bls.n	8008622 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	4a0c      	ldr	r2, [pc, #48]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4a07      	ldr	r2, [pc, #28]	; (800864c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008630:	441a      	add	r2, r3
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7fd fd58 	bl	80060ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800863e:	bf00      	nop
 8008640:	3720      	adds	r7, #32
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000abc 	.word	0x20000abc
 800864c:	20000ac0 	.word	0x20000ac0
 8008650:	20000f98 	.word	0x20000f98

08008654 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <pvTaskIncrementMutexHeldCount+0x24>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008660:	4b05      	ldr	r3, [pc, #20]	; (8008678 <pvTaskIncrementMutexHeldCount+0x24>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008666:	3201      	adds	r2, #1
 8008668:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800866a:	4b03      	ldr	r3, [pc, #12]	; (8008678 <pvTaskIncrementMutexHeldCount+0x24>)
 800866c:	681b      	ldr	r3, [r3, #0]
	}
 800866e:	4618      	mov	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	20000abc 	.word	0x20000abc

0800867c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008686:	4b21      	ldr	r3, [pc, #132]	; (800870c <prvAddCurrentTaskToDelayedList+0x90>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800868c:	4b20      	ldr	r3, [pc, #128]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3304      	adds	r3, #4
 8008692:	4618      	mov	r0, r3
 8008694:	f7fd fd88 	bl	80061a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d10a      	bne.n	80086b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d007      	beq.n	80086b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	4819      	ldr	r0, [pc, #100]	; (8008714 <prvAddCurrentTaskToDelayedList+0x98>)
 80086b0:	f7fd fd1d 	bl	80060ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086b4:	e026      	b.n	8008704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d209      	bcs.n	80086e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ce:	4b12      	ldr	r3, [pc, #72]	; (8008718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fd fd2b 	bl	8006136 <vListInsert>
}
 80086e0:	e010      	b.n	8008704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e2:	4b0e      	ldr	r3, [pc, #56]	; (800871c <prvAddCurrentTaskToDelayedList+0xa0>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f7fd fd21 	bl	8006136 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d202      	bcs.n	8008704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6013      	str	r3, [r2, #0]
}
 8008704:	bf00      	nop
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000f94 	.word	0x20000f94
 8008710:	20000abc 	.word	0x20000abc
 8008714:	20000f7c 	.word	0x20000f7c
 8008718:	20000f4c 	.word	0x20000f4c
 800871c:	20000f48 	.word	0x20000f48
 8008720:	20000fb0 	.word	0x20000fb0

08008724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08a      	sub	sp, #40	; 0x28
 8008728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800872e:	f000 fb07 	bl	8008d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <xTimerCreateTimerTask+0x80>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d021      	beq.n	800877e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008742:	1d3a      	adds	r2, r7, #4
 8008744:	f107 0108 	add.w	r1, r7, #8
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd fc87 	bl	8006060 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	9202      	str	r2, [sp, #8]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	2302      	movs	r3, #2
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2300      	movs	r3, #0
 8008762:	460a      	mov	r2, r1
 8008764:	4910      	ldr	r1, [pc, #64]	; (80087a8 <xTimerCreateTimerTask+0x84>)
 8008766:	4811      	ldr	r0, [pc, #68]	; (80087ac <xTimerCreateTimerTask+0x88>)
 8008768:	f7fe fd92 	bl	8007290 <xTaskCreateStatic>
 800876c:	4603      	mov	r3, r0
 800876e:	4a10      	ldr	r2, [pc, #64]	; (80087b0 <xTimerCreateTimerTask+0x8c>)
 8008770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <xTimerCreateTimerTask+0x8c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800877a:	2301      	movs	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	613b      	str	r3, [r7, #16]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800879a:	697b      	ldr	r3, [r7, #20]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000fec 	.word	0x20000fec
 80087a8:	0800c8f0 	.word	0x0800c8f0
 80087ac:	080088e9 	.word	0x080088e9
 80087b0:	20000ff0 	.word	0x20000ff0

080087b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	623b      	str	r3, [r7, #32]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087e2:	4b1a      	ldr	r3, [pc, #104]	; (800884c <xTimerGenericCommand+0x98>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d02a      	beq.n	8008840 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	dc18      	bgt.n	800882e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087fc:	f7ff fdb4 	bl	8008368 <xTaskGetSchedulerState>
 8008800:	4603      	mov	r3, r0
 8008802:	2b02      	cmp	r3, #2
 8008804:	d109      	bne.n	800881a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <xTimerGenericCommand+0x98>)
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f107 0110 	add.w	r1, r7, #16
 800880e:	2300      	movs	r3, #0
 8008810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008812:	f7fd fe9b 	bl	800654c <xQueueGenericSend>
 8008816:	6278      	str	r0, [r7, #36]	; 0x24
 8008818:	e012      	b.n	8008840 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <xTimerGenericCommand+0x98>)
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	f107 0110 	add.w	r1, r7, #16
 8008822:	2300      	movs	r3, #0
 8008824:	2200      	movs	r2, #0
 8008826:	f7fd fe91 	bl	800654c <xQueueGenericSend>
 800882a:	6278      	str	r0, [r7, #36]	; 0x24
 800882c:	e008      	b.n	8008840 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <xTimerGenericCommand+0x98>)
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f107 0110 	add.w	r1, r7, #16
 8008836:	2300      	movs	r3, #0
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	f7fd ff85 	bl	8006748 <xQueueGenericSendFromISR>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008842:	4618      	mov	r0, r3
 8008844:	3728      	adds	r7, #40	; 0x28
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000fec 	.word	0x20000fec

08008850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af02      	add	r7, sp, #8
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885a:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <prvProcessExpiredTimer+0x94>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7fd fc9d 	bl	80061a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d022      	beq.n	80088c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	18d1      	adds	r1, r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f000 f8d1 	bl	8008a30 <prvInsertTimerInActiveList>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01f      	beq.n	80088d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008894:	2300      	movs	r3, #0
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	2300      	movs	r3, #0
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	2100      	movs	r1, #0
 800889e:	6978      	ldr	r0, [r7, #20]
 80088a0:	f7ff ff88 	bl	80087b4 <xTimerGenericCommand>
 80088a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d113      	bne.n	80088d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	60fb      	str	r3, [r7, #12]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	4798      	blx	r3
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20000fe4 	.word	0x20000fe4

080088e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088f0:	f107 0308 	add.w	r3, r7, #8
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f857 	bl	80089a8 <prvGetNextExpireTime>
 80088fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4619      	mov	r1, r3
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f803 	bl	800890c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008906:	f000 f8d5 	bl	8008ab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800890a:	e7f1      	b.n	80088f0 <prvTimerTask+0x8>

0800890c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008916:	f7ff f933 	bl	8007b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f000 f866 	bl	80089f0 <prvSampleTimeNow>
 8008924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d130      	bne.n	800898e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <prvProcessTimerOrBlockTask+0x3c>
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	429a      	cmp	r2, r3
 8008938:	d806      	bhi.n	8008948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800893a:	f7ff f92f 	bl	8007b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ff85 	bl	8008850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008946:	e024      	b.n	8008992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <prvProcessTimerOrBlockTask+0x90>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <prvProcessTimerOrBlockTask+0x50>
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <prvProcessTimerOrBlockTask+0x52>
 800895c:	2300      	movs	r3, #0
 800895e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <prvProcessTimerOrBlockTask+0x94>)
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	f7fe fc5b 	bl	8007228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008972:	f7ff f913 	bl	8007b9c <xTaskResumeAll>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800897c:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <prvProcessTimerOrBlockTask+0x98>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
}
 800898c:	e001      	b.n	8008992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800898e:	f7ff f905 	bl	8007b9c <xTaskResumeAll>
}
 8008992:	bf00      	nop
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20000fe8 	.word	0x20000fe8
 80089a0:	20000fec 	.word	0x20000fec
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089b0:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <prvGetNextExpireTime+0x44>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <prvGetNextExpireTime+0x16>
 80089ba:	2201      	movs	r2, #1
 80089bc:	e000      	b.n	80089c0 <prvGetNextExpireTime+0x18>
 80089be:	2200      	movs	r2, #0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089cc:	4b07      	ldr	r3, [pc, #28]	; (80089ec <prvGetNextExpireTime+0x44>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	e001      	b.n	80089dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089dc:	68fb      	ldr	r3, [r7, #12]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20000fe4 	.word	0x20000fe4

080089f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089f8:	f7ff f96e 	bl	8007cd8 <xTaskGetTickCount>
 80089fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <prvSampleTimeNow+0x3c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d205      	bcs.n	8008a14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a08:	f000 f936 	bl	8008c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a1a:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <prvSampleTimeNow+0x3c>)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a20:	68fb      	ldr	r3, [r7, #12]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000ff4 	.word	0x20000ff4

08008a30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d812      	bhi.n	8008a7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	e01b      	b.n	8008aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a6a:	4b10      	ldr	r3, [pc, #64]	; (8008aac <prvInsertTimerInActiveList+0x7c>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7fd fb5e 	bl	8006136 <vListInsert>
 8008a7a:	e012      	b.n	8008aa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d206      	bcs.n	8008a92 <prvInsertTimerInActiveList+0x62>
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e007      	b.n	8008aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <prvInsertTimerInActiveList+0x80>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fd fb4a 	bl	8006136 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008aa2:	697b      	ldr	r3, [r7, #20]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20000fe8 	.word	0x20000fe8
 8008ab0:	20000fe4 	.word	0x20000fe4

08008ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aba:	e0ca      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	da18      	bge.n	8008af4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	61fb      	str	r3, [r7, #28]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aea:	6850      	ldr	r0, [r2, #4]
 8008aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aee:	6892      	ldr	r2, [r2, #8]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f2c0 80ab 	blt.w	8008c52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fd fb4b 	bl	80061a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b12:	463b      	mov	r3, r7
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff ff6b 	bl	80089f0 <prvSampleTimeNow>
 8008b1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	f200 8096 	bhi.w	8008c50 <prvProcessReceivedCommands+0x19c>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <prvProcessReceivedCommands+0x78>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b55 	.word	0x08008b55
 8008b30:	08008b55 	.word	0x08008b55
 8008b34:	08008b55 	.word	0x08008b55
 8008b38:	08008bc9 	.word	0x08008bc9
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008c27 	.word	0x08008c27
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b55 	.word	0x08008b55
 8008b4c:	08008bc9 	.word	0x08008bc9
 8008b50:	08008bdd 	.word	0x08008bdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	18d1      	adds	r1, r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b74:	f7ff ff5c 	bl	8008a30 <prvInsertTimerInActiveList>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d069      	beq.n	8008c52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d05e      	beq.n	8008c52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	441a      	add	r2, r3
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba6:	f7ff fe05 	bl	80087b4 <xTimerGenericCommand>
 8008baa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d14f      	bne.n	8008c52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	61bb      	str	r3, [r7, #24]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bda:	e03a      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be2:	f043 0301 	orr.w	r3, r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	617b      	str	r3, [r7, #20]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	18d1      	adds	r1, r2, r3
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c20:	f7ff ff06 	bl	8008a30 <prvInsertTimerInActiveList>
					break;
 8008c24:	e015      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c36:	f000 fbdb 	bl	80093f0 <vPortFree>
 8008c3a:	e00a      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c42:	f023 0301 	bic.w	r3, r3, #1
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c4e:	e000      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008c50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <prvProcessReceivedCommands+0x1c0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	1d39      	adds	r1, r7, #4
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fd fe9c 	bl	8006998 <xQueueReceive>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f47f af2a 	bne.w	8008abc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	3730      	adds	r7, #48	; 0x30
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000fec 	.word	0x20000fec

08008c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c7e:	e048      	b.n	8008d12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c80:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8a:	4b2b      	ldr	r3, [pc, #172]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fd fa85 	bl	80061a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02e      	beq.n	8008d12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4413      	add	r3, r2
 8008cbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d90e      	bls.n	8008ce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cd2:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fd fa2a 	bl	8006136 <vListInsert>
 8008ce2:	e016      	b.n	8008d12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff fd60 	bl	80087b4 <xTimerGenericCommand>
 8008cf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	603b      	str	r3, [r7, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1b1      	bne.n	8008c80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d22:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <prvSwitchTimerLists+0xc4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a04      	ldr	r2, [pc, #16]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008d28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d2a:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <prvSwitchTimerLists+0xc4>)
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6013      	str	r3, [r2, #0]
}
 8008d30:	bf00      	nop
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000fe4 	.word	0x20000fe4
 8008d3c:	20000fe8 	.word	0x20000fe8

08008d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d46:	f000 f965 	bl	8009014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d120      	bne.n	8008d94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d52:	4814      	ldr	r0, [pc, #80]	; (8008da4 <prvCheckForValidListAndQueue+0x64>)
 8008d54:	f7fd f99e 	bl	8006094 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d58:	4813      	ldr	r0, [pc, #76]	; (8008da8 <prvCheckForValidListAndQueue+0x68>)
 8008d5a:	f7fd f99b 	bl	8006094 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <prvCheckForValidListAndQueue+0x6c>)
 8008d60:	4a10      	ldr	r2, [pc, #64]	; (8008da4 <prvCheckForValidListAndQueue+0x64>)
 8008d62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <prvCheckForValidListAndQueue+0x70>)
 8008d66:	4a10      	ldr	r2, [pc, #64]	; (8008da8 <prvCheckForValidListAndQueue+0x68>)
 8008d68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <prvCheckForValidListAndQueue+0x74>)
 8008d70:	4a11      	ldr	r2, [pc, #68]	; (8008db8 <prvCheckForValidListAndQueue+0x78>)
 8008d72:	2110      	movs	r1, #16
 8008d74:	200a      	movs	r0, #10
 8008d76:	f7fd faa9 	bl	80062cc <xQueueGenericCreateStatic>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d80:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	490b      	ldr	r1, [pc, #44]	; (8008dbc <prvCheckForValidListAndQueue+0x7c>)
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe f9f6 	bl	8007180 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d94:	f000 f96e 	bl	8009074 <vPortExitCritical>
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000fec 	.word	0x20000fec
 8008da4:	20000fbc 	.word	0x20000fbc
 8008da8:	20000fd0 	.word	0x20000fd0
 8008dac:	20000fe4 	.word	0x20000fe4
 8008db0:	20000fe8 	.word	0x20000fe8
 8008db4:	20001098 	.word	0x20001098
 8008db8:	20000ff8 	.word	0x20000ff8
 8008dbc:	0800c8f8 	.word	0x0800c8f8

08008dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3b04      	subs	r3, #4
 8008dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0201 	bic.w	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3b04      	subs	r3, #4
 8008dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008df0:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <pxPortInitialiseStack+0x64>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3b14      	subs	r3, #20
 8008dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3b04      	subs	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f06f 0202 	mvn.w	r2, #2
 8008e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3b20      	subs	r3, #32
 8008e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e16:	68fb      	ldr	r3, [r7, #12]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	08008e29 	.word	0x08008e29

08008e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <prvTaskExitError+0x54>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d00a      	beq.n	8008e52 <prvTaskExitError+0x2a>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	60fb      	str	r3, [r7, #12]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <prvTaskExitError+0x28>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60bb      	str	r3, [r7, #8]
}
 8008e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e66:	bf00      	nop
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0fc      	beq.n	8008e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	20000018 	.word	0x20000018

08008e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <pxCurrentTCBConst2>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	6808      	ldr	r0, [r1, #0]
 8008e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	f380 8809 	msr	PSP, r0
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8811 	msr	BASEPRI, r0
 8008e9a:	4770      	bx	lr
 8008e9c:	f3af 8000 	nop.w

08008ea0 <pxCurrentTCBConst2>:
 8008ea0:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <prvPortStartFirstTask+0x24>)
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f380 8808 	msr	MSP, r0
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8814 	msr	CONTROL, r0
 8008eba:	b662      	cpsie	i
 8008ebc:	b661      	cpsie	f
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	df00      	svc	0
 8008ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eca:	bf00      	nop
 8008ecc:	e000ed08 	.word	0xe000ed08

08008ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ed6:	4b46      	ldr	r3, [pc, #280]	; (8008ff0 <xPortStartScheduler+0x120>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a46      	ldr	r2, [pc, #280]	; (8008ff4 <xPortStartScheduler+0x124>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10a      	bne.n	8008ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	613b      	str	r3, [r7, #16]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ef6:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <xPortStartScheduler+0x120>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a3f      	ldr	r2, [pc, #252]	; (8008ff8 <xPortStartScheduler+0x128>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d10a      	bne.n	8008f16 <xPortStartScheduler+0x46>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f16:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <xPortStartScheduler+0x12c>)
 8008f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	22ff      	movs	r2, #255	; 0xff
 8008f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <xPortStartScheduler+0x130>)
 8008f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <xPortStartScheduler+0x134>)
 8008f40:	2207      	movs	r2, #7
 8008f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f44:	e009      	b.n	8008f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f46:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <xPortStartScheduler+0x134>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	4a2d      	ldr	r2, [pc, #180]	; (8009004 <xPortStartScheduler+0x134>)
 8008f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f62:	2b80      	cmp	r3, #128	; 0x80
 8008f64:	d0ef      	beq.n	8008f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f66:	4b27      	ldr	r3, [pc, #156]	; (8009004 <xPortStartScheduler+0x134>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f1c3 0307 	rsb	r3, r3, #7
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d00a      	beq.n	8008f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	60bb      	str	r3, [r7, #8]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f88:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <xPortStartScheduler+0x134>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <xPortStartScheduler+0x134>)
 8008f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f92:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <xPortStartScheduler+0x134>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f9a:	4a1a      	ldr	r2, [pc, #104]	; (8009004 <xPortStartScheduler+0x134>)
 8008f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fa6:	4b18      	ldr	r3, [pc, #96]	; (8009008 <xPortStartScheduler+0x138>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a17      	ldr	r2, [pc, #92]	; (8009008 <xPortStartScheduler+0x138>)
 8008fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fb2:	4b15      	ldr	r3, [pc, #84]	; (8009008 <xPortStartScheduler+0x138>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a14      	ldr	r2, [pc, #80]	; (8009008 <xPortStartScheduler+0x138>)
 8008fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fbe:	f000 f8dd 	bl	800917c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <xPortStartScheduler+0x13c>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fc8:	f000 f8fc 	bl	80091c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <xPortStartScheduler+0x140>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <xPortStartScheduler+0x140>)
 8008fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fd8:	f7ff ff66 	bl	8008ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fdc:	f7fe ff58 	bl	8007e90 <vTaskSwitchContext>
	prvTaskExitError();
 8008fe0:	f7ff ff22 	bl	8008e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	e000ed00 	.word	0xe000ed00
 8008ff4:	410fc271 	.word	0x410fc271
 8008ff8:	410fc270 	.word	0x410fc270
 8008ffc:	e000e400 	.word	0xe000e400
 8009000:	200010e8 	.word	0x200010e8
 8009004:	200010ec 	.word	0x200010ec
 8009008:	e000ed20 	.word	0xe000ed20
 800900c:	20000018 	.word	0x20000018
 8009010:	e000ef34 	.word	0xe000ef34

08009014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	607b      	str	r3, [r7, #4]
}
 800902c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800902e:	4b0f      	ldr	r3, [pc, #60]	; (800906c <vPortEnterCritical+0x58>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	4a0d      	ldr	r2, [pc, #52]	; (800906c <vPortEnterCritical+0x58>)
 8009036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <vPortEnterCritical+0x58>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10f      	bne.n	8009060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <vPortEnterCritical+0x5c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <vPortEnterCritical+0x4c>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	603b      	str	r3, [r7, #0]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vPortEnterCritical+0x4a>
	}
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20000018 	.word	0x20000018
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800907a:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <vPortExitCritical+0x50>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <vPortExitCritical+0x24>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	607b      	str	r3, [r7, #4]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009098:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <vPortExitCritical+0x50>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <vPortExitCritical+0x50>)
 80090a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090a2:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <vPortExitCritical+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <vPortExitCritical+0x42>
 80090aa:	2300      	movs	r3, #0
 80090ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	f383 8811 	msr	BASEPRI, r3
}
 80090b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20000018 	.word	0x20000018
	...

080090d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090d0:	f3ef 8009 	mrs	r0, PSP
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <pxCurrentTCBConst>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	f01e 0f10 	tst.w	lr, #16
 80090e0:	bf08      	it	eq
 80090e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090f4:	f380 8811 	msr	BASEPRI, r0
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f7fe fec6 	bl	8007e90 <vTaskSwitchContext>
 8009104:	f04f 0000 	mov.w	r0, #0
 8009108:	f380 8811 	msr	BASEPRI, r0
 800910c:	bc09      	pop	{r0, r3}
 800910e:	6819      	ldr	r1, [r3, #0]
 8009110:	6808      	ldr	r0, [r1, #0]
 8009112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009116:	f01e 0f10 	tst.w	lr, #16
 800911a:	bf08      	it	eq
 800911c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009120:	f380 8809 	msr	PSP, r0
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w

08009130 <pxCurrentTCBConst>:
 8009130:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	607b      	str	r3, [r7, #4]
}
 8009150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009152:	f7fe fde3 	bl	8007d1c <xTaskIncrementTick>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <xPortSysTickHandler+0x40>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f383 8811 	msr	BASEPRI, r3
}
 800916e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <vPortSetupTimerInterrupt+0x38>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <vPortSetupTimerInterrupt+0x3c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <vPortSetupTimerInterrupt+0x40>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	099b      	lsrs	r3, r3, #6
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <vPortSetupTimerInterrupt+0x44>)
 800919a:	3b01      	subs	r3, #1
 800919c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800919e:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 80091a0:	2207      	movs	r2, #7
 80091a2:	601a      	str	r2, [r3, #0]
}
 80091a4:	bf00      	nop
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	e000e010 	.word	0xe000e010
 80091b4:	e000e018 	.word	0xe000e018
 80091b8:	2000000c 	.word	0x2000000c
 80091bc:	10624dd3 	.word	0x10624dd3
 80091c0:	e000e014 	.word	0xe000e014

080091c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091d4 <vPortEnableVFP+0x10>
 80091c8:	6801      	ldr	r1, [r0, #0]
 80091ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ce:	6001      	str	r1, [r0, #0]
 80091d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091d2:	bf00      	nop
 80091d4:	e000ed88 	.word	0xe000ed88

080091d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091de:	f3ef 8305 	mrs	r3, IPSR
 80091e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b0f      	cmp	r3, #15
 80091e8:	d914      	bls.n	8009214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ea:	4a17      	ldr	r2, [pc, #92]	; (8009248 <vPortValidateInterruptPriority+0x70>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <vPortValidateInterruptPriority+0x74>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	7afa      	ldrb	r2, [r7, #11]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d20a      	bcs.n	8009214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	607b      	str	r3, [r7, #4]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009214:	4b0e      	ldr	r3, [pc, #56]	; (8009250 <vPortValidateInterruptPriority+0x78>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800921c:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <vPortValidateInterruptPriority+0x7c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d90a      	bls.n	800923a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	603b      	str	r3, [r7, #0]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <vPortValidateInterruptPriority+0x60>
	}
 800923a:	bf00      	nop
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	e000e3f0 	.word	0xe000e3f0
 800924c:	200010e8 	.word	0x200010e8
 8009250:	e000ed0c 	.word	0xe000ed0c
 8009254:	200010ec 	.word	0x200010ec

08009258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009264:	f7fe fc8c 	bl	8007b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009268:	4b5b      	ldr	r3, [pc, #364]	; (80093d8 <pvPortMalloc+0x180>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009270:	f000 f920 	bl	80094b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <pvPortMalloc+0x184>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4013      	ands	r3, r2
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8093 	bne.w	80093a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01d      	beq.n	80092c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009288:	2208      	movs	r2, #8
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b00      	cmp	r3, #0
 8009298:	d014      	beq.n	80092c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	3308      	adds	r3, #8
 80092a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <pvPortMalloc+0x6c>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	617b      	str	r3, [r7, #20]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d06e      	beq.n	80093a8 <pvPortMalloc+0x150>
 80092ca:	4b45      	ldr	r3, [pc, #276]	; (80093e0 <pvPortMalloc+0x188>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d869      	bhi.n	80093a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092d4:	4b43      	ldr	r3, [pc, #268]	; (80093e4 <pvPortMalloc+0x18c>)
 80092d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092d8:	4b42      	ldr	r3, [pc, #264]	; (80093e4 <pvPortMalloc+0x18c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092de:	e004      	b.n	80092ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d903      	bls.n	80092fc <pvPortMalloc+0xa4>
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1f1      	bne.n	80092e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092fc:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <pvPortMalloc+0x180>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009302:	429a      	cmp	r2, r3
 8009304:	d050      	beq.n	80093a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2208      	movs	r2, #8
 800930c:	4413      	add	r3, r2
 800930e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	1ad2      	subs	r2, r2, r3
 8009320:	2308      	movs	r3, #8
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	429a      	cmp	r2, r3
 8009326:	d91f      	bls.n	8009368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <pvPortMalloc+0xf8>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	613b      	str	r3, [r7, #16]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009362:	69b8      	ldr	r0, [r7, #24]
 8009364:	f000 f908 	bl	8009578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009368:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <pvPortMalloc+0x188>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <pvPortMalloc+0x188>)
 8009374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <pvPortMalloc+0x188>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <pvPortMalloc+0x190>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009382:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <pvPortMalloc+0x188>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <pvPortMalloc+0x190>)
 8009388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <pvPortMalloc+0x184>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	431a      	orrs	r2, r3
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <pvPortMalloc+0x194>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a11      	ldr	r2, [pc, #68]	; (80093ec <pvPortMalloc+0x194>)
 80093a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093a8:	f7fe fbf8 	bl	8007b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <pvPortMalloc+0x174>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <pvPortMalloc+0x172>
	return pvReturn;
 80093cc:	69fb      	ldr	r3, [r7, #28]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20004cf8 	.word	0x20004cf8
 80093dc:	20004d0c 	.word	0x20004d0c
 80093e0:	20004cfc 	.word	0x20004cfc
 80093e4:	20004cf0 	.word	0x20004cf0
 80093e8:	20004d00 	.word	0x20004d00
 80093ec:	20004d04 	.word	0x20004d04

080093f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d04d      	beq.n	800949e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009402:	2308      	movs	r3, #8
 8009404:	425b      	negs	r3, r3
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <vPortFree+0xb8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4013      	ands	r3, r2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <vPortFree+0x44>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	60fb      	str	r3, [r7, #12]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <vPortFree+0x62>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60bb      	str	r3, [r7, #8]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <vPortFree+0xb8>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01e      	beq.n	800949e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11a      	bne.n	800949e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	4b0e      	ldr	r3, [pc, #56]	; (80094a8 <vPortFree+0xb8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009478:	f7fe fb82 	bl	8007b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <vPortFree+0xbc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4413      	add	r3, r2
 8009486:	4a09      	ldr	r2, [pc, #36]	; (80094ac <vPortFree+0xbc>)
 8009488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948a:	6938      	ldr	r0, [r7, #16]
 800948c:	f000 f874 	bl	8009578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009490:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <vPortFree+0xc0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	4a06      	ldr	r2, [pc, #24]	; (80094b0 <vPortFree+0xc0>)
 8009498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800949a:	f7fe fb7f 	bl	8007b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800949e:	bf00      	nop
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20004d0c 	.word	0x20004d0c
 80094ac:	20004cfc 	.word	0x20004cfc
 80094b0:	20004d08 	.word	0x20004d08

080094b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <prvHeapInit+0xac>)
 80094c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00c      	beq.n	80094e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0307 	bic.w	r3, r3, #7
 80094da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <prvHeapInit+0xac>)
 80094e4:	4413      	add	r3, r2
 80094e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094ec:	4a1d      	ldr	r2, [pc, #116]	; (8009564 <prvHeapInit+0xb0>)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094f2:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <prvHeapInit+0xb0>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	4413      	add	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009500:	2208      	movs	r2, #8
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1a9b      	subs	r3, r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0307 	bic.w	r3, r3, #7
 800950e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4a15      	ldr	r2, [pc, #84]	; (8009568 <prvHeapInit+0xb4>)
 8009514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <prvHeapInit+0xb4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <prvHeapInit+0xb4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <prvHeapInit+0xb4>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	4a0a      	ldr	r2, [pc, #40]	; (800956c <prvHeapInit+0xb8>)
 8009542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4a09      	ldr	r2, [pc, #36]	; (8009570 <prvHeapInit+0xbc>)
 800954a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <prvHeapInit+0xc0>)
 800954e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	200010f0 	.word	0x200010f0
 8009564:	20004cf0 	.word	0x20004cf0
 8009568:	20004cf8 	.word	0x20004cf8
 800956c:	20004d00 	.word	0x20004d00
 8009570:	20004cfc 	.word	0x20004cfc
 8009574:	20004d0c 	.word	0x20004d0c

08009578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009580:	4b28      	ldr	r3, [pc, #160]	; (8009624 <prvInsertBlockIntoFreeList+0xac>)
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	e002      	b.n	800958c <prvInsertBlockIntoFreeList+0x14>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	429a      	cmp	r2, r3
 8009594:	d8f7      	bhi.n	8009586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4413      	add	r3, r2
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d108      	bne.n	80095ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	441a      	add	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	441a      	add	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d118      	bne.n	8009600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <prvInsertBlockIntoFreeList+0xb0>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d00d      	beq.n	80095f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	441a      	add	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	e008      	b.n	8009608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095f6:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <prvInsertBlockIntoFreeList+0xb0>)
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e003      	b.n	8009608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d002      	beq.n	8009616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20004cf0 	.word	0x20004cf0
 8009628:	20004cf8 	.word	0x20004cf8

0800962c <atoi>:
 800962c:	220a      	movs	r2, #10
 800962e:	2100      	movs	r1, #0
 8009630:	f000 b882 	b.w	8009738 <strtol>

08009634 <_strtol_l.constprop.0>:
 8009634:	2b01      	cmp	r3, #1
 8009636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800963a:	d001      	beq.n	8009640 <_strtol_l.constprop.0+0xc>
 800963c:	2b24      	cmp	r3, #36	; 0x24
 800963e:	d906      	bls.n	800964e <_strtol_l.constprop.0+0x1a>
 8009640:	f000 ffc0 	bl	800a5c4 <__errno>
 8009644:	2316      	movs	r3, #22
 8009646:	6003      	str	r3, [r0, #0]
 8009648:	2000      	movs	r0, #0
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009734 <_strtol_l.constprop.0+0x100>
 8009652:	460d      	mov	r5, r1
 8009654:	462e      	mov	r6, r5
 8009656:	f815 4b01 	ldrb.w	r4, [r5], #1
 800965a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800965e:	f017 0708 	ands.w	r7, r7, #8
 8009662:	d1f7      	bne.n	8009654 <_strtol_l.constprop.0+0x20>
 8009664:	2c2d      	cmp	r4, #45	; 0x2d
 8009666:	d132      	bne.n	80096ce <_strtol_l.constprop.0+0x9a>
 8009668:	782c      	ldrb	r4, [r5, #0]
 800966a:	2701      	movs	r7, #1
 800966c:	1cb5      	adds	r5, r6, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d05b      	beq.n	800972a <_strtol_l.constprop.0+0xf6>
 8009672:	2b10      	cmp	r3, #16
 8009674:	d109      	bne.n	800968a <_strtol_l.constprop.0+0x56>
 8009676:	2c30      	cmp	r4, #48	; 0x30
 8009678:	d107      	bne.n	800968a <_strtol_l.constprop.0+0x56>
 800967a:	782c      	ldrb	r4, [r5, #0]
 800967c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009680:	2c58      	cmp	r4, #88	; 0x58
 8009682:	d14d      	bne.n	8009720 <_strtol_l.constprop.0+0xec>
 8009684:	786c      	ldrb	r4, [r5, #1]
 8009686:	2310      	movs	r3, #16
 8009688:	3502      	adds	r5, #2
 800968a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800968e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009692:	f04f 0e00 	mov.w	lr, #0
 8009696:	fbb8 f9f3 	udiv	r9, r8, r3
 800969a:	4676      	mov	r6, lr
 800969c:	fb03 8a19 	mls	sl, r3, r9, r8
 80096a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80096a4:	f1bc 0f09 	cmp.w	ip, #9
 80096a8:	d816      	bhi.n	80096d8 <_strtol_l.constprop.0+0xa4>
 80096aa:	4664      	mov	r4, ip
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	dd24      	ble.n	80096fa <_strtol_l.constprop.0+0xc6>
 80096b0:	f1be 3fff 	cmp.w	lr, #4294967295
 80096b4:	d008      	beq.n	80096c8 <_strtol_l.constprop.0+0x94>
 80096b6:	45b1      	cmp	r9, r6
 80096b8:	d31c      	bcc.n	80096f4 <_strtol_l.constprop.0+0xc0>
 80096ba:	d101      	bne.n	80096c0 <_strtol_l.constprop.0+0x8c>
 80096bc:	45a2      	cmp	sl, r4
 80096be:	db19      	blt.n	80096f4 <_strtol_l.constprop.0+0xc0>
 80096c0:	fb06 4603 	mla	r6, r6, r3, r4
 80096c4:	f04f 0e01 	mov.w	lr, #1
 80096c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096cc:	e7e8      	b.n	80096a0 <_strtol_l.constprop.0+0x6c>
 80096ce:	2c2b      	cmp	r4, #43	; 0x2b
 80096d0:	bf04      	itt	eq
 80096d2:	782c      	ldrbeq	r4, [r5, #0]
 80096d4:	1cb5      	addeq	r5, r6, #2
 80096d6:	e7ca      	b.n	800966e <_strtol_l.constprop.0+0x3a>
 80096d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80096dc:	f1bc 0f19 	cmp.w	ip, #25
 80096e0:	d801      	bhi.n	80096e6 <_strtol_l.constprop.0+0xb2>
 80096e2:	3c37      	subs	r4, #55	; 0x37
 80096e4:	e7e2      	b.n	80096ac <_strtol_l.constprop.0+0x78>
 80096e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096ea:	f1bc 0f19 	cmp.w	ip, #25
 80096ee:	d804      	bhi.n	80096fa <_strtol_l.constprop.0+0xc6>
 80096f0:	3c57      	subs	r4, #87	; 0x57
 80096f2:	e7db      	b.n	80096ac <_strtol_l.constprop.0+0x78>
 80096f4:	f04f 3eff 	mov.w	lr, #4294967295
 80096f8:	e7e6      	b.n	80096c8 <_strtol_l.constprop.0+0x94>
 80096fa:	f1be 3fff 	cmp.w	lr, #4294967295
 80096fe:	d105      	bne.n	800970c <_strtol_l.constprop.0+0xd8>
 8009700:	2322      	movs	r3, #34	; 0x22
 8009702:	6003      	str	r3, [r0, #0]
 8009704:	4646      	mov	r6, r8
 8009706:	b942      	cbnz	r2, 800971a <_strtol_l.constprop.0+0xe6>
 8009708:	4630      	mov	r0, r6
 800970a:	e79e      	b.n	800964a <_strtol_l.constprop.0+0x16>
 800970c:	b107      	cbz	r7, 8009710 <_strtol_l.constprop.0+0xdc>
 800970e:	4276      	negs	r6, r6
 8009710:	2a00      	cmp	r2, #0
 8009712:	d0f9      	beq.n	8009708 <_strtol_l.constprop.0+0xd4>
 8009714:	f1be 0f00 	cmp.w	lr, #0
 8009718:	d000      	beq.n	800971c <_strtol_l.constprop.0+0xe8>
 800971a:	1e69      	subs	r1, r5, #1
 800971c:	6011      	str	r1, [r2, #0]
 800971e:	e7f3      	b.n	8009708 <_strtol_l.constprop.0+0xd4>
 8009720:	2430      	movs	r4, #48	; 0x30
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1b1      	bne.n	800968a <_strtol_l.constprop.0+0x56>
 8009726:	2308      	movs	r3, #8
 8009728:	e7af      	b.n	800968a <_strtol_l.constprop.0+0x56>
 800972a:	2c30      	cmp	r4, #48	; 0x30
 800972c:	d0a5      	beq.n	800967a <_strtol_l.constprop.0+0x46>
 800972e:	230a      	movs	r3, #10
 8009730:	e7ab      	b.n	800968a <_strtol_l.constprop.0+0x56>
 8009732:	bf00      	nop
 8009734:	0800c9ed 	.word	0x0800c9ed

08009738 <strtol>:
 8009738:	4613      	mov	r3, r2
 800973a:	460a      	mov	r2, r1
 800973c:	4601      	mov	r1, r0
 800973e:	4802      	ldr	r0, [pc, #8]	; (8009748 <strtol+0x10>)
 8009740:	6800      	ldr	r0, [r0, #0]
 8009742:	f7ff bf77 	b.w	8009634 <_strtol_l.constprop.0>
 8009746:	bf00      	nop
 8009748:	20000074 	.word	0x20000074

0800974c <__cvt>:
 800974c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	ec55 4b10 	vmov	r4, r5, d0
 8009754:	2d00      	cmp	r5, #0
 8009756:	460e      	mov	r6, r1
 8009758:	4619      	mov	r1, r3
 800975a:	462b      	mov	r3, r5
 800975c:	bfbb      	ittet	lt
 800975e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009762:	461d      	movlt	r5, r3
 8009764:	2300      	movge	r3, #0
 8009766:	232d      	movlt	r3, #45	; 0x2d
 8009768:	700b      	strb	r3, [r1, #0]
 800976a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009770:	4691      	mov	r9, r2
 8009772:	f023 0820 	bic.w	r8, r3, #32
 8009776:	bfbc      	itt	lt
 8009778:	4622      	movlt	r2, r4
 800977a:	4614      	movlt	r4, r2
 800977c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009780:	d005      	beq.n	800978e <__cvt+0x42>
 8009782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009786:	d100      	bne.n	800978a <__cvt+0x3e>
 8009788:	3601      	adds	r6, #1
 800978a:	2102      	movs	r1, #2
 800978c:	e000      	b.n	8009790 <__cvt+0x44>
 800978e:	2103      	movs	r1, #3
 8009790:	ab03      	add	r3, sp, #12
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	ab02      	add	r3, sp, #8
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	ec45 4b10 	vmov	d0, r4, r5
 800979c:	4653      	mov	r3, sl
 800979e:	4632      	mov	r2, r6
 80097a0:	f000 fff2 	bl	800a788 <_dtoa_r>
 80097a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097a8:	4607      	mov	r7, r0
 80097aa:	d102      	bne.n	80097b2 <__cvt+0x66>
 80097ac:	f019 0f01 	tst.w	r9, #1
 80097b0:	d022      	beq.n	80097f8 <__cvt+0xac>
 80097b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097b6:	eb07 0906 	add.w	r9, r7, r6
 80097ba:	d110      	bne.n	80097de <__cvt+0x92>
 80097bc:	783b      	ldrb	r3, [r7, #0]
 80097be:	2b30      	cmp	r3, #48	; 0x30
 80097c0:	d10a      	bne.n	80097d8 <__cvt+0x8c>
 80097c2:	2200      	movs	r2, #0
 80097c4:	2300      	movs	r3, #0
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 f995 	bl	8000af8 <__aeabi_dcmpeq>
 80097ce:	b918      	cbnz	r0, 80097d8 <__cvt+0x8c>
 80097d0:	f1c6 0601 	rsb	r6, r6, #1
 80097d4:	f8ca 6000 	str.w	r6, [sl]
 80097d8:	f8da 3000 	ldr.w	r3, [sl]
 80097dc:	4499      	add	r9, r3
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	4620      	mov	r0, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7f7 f987 	bl	8000af8 <__aeabi_dcmpeq>
 80097ea:	b108      	cbz	r0, 80097f0 <__cvt+0xa4>
 80097ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80097f0:	2230      	movs	r2, #48	; 0x30
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	454b      	cmp	r3, r9
 80097f6:	d307      	bcc.n	8009808 <__cvt+0xbc>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fc:	1bdb      	subs	r3, r3, r7
 80097fe:	4638      	mov	r0, r7
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	b004      	add	sp, #16
 8009804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009808:	1c59      	adds	r1, r3, #1
 800980a:	9103      	str	r1, [sp, #12]
 800980c:	701a      	strb	r2, [r3, #0]
 800980e:	e7f0      	b.n	80097f2 <__cvt+0xa6>

08009810 <__exponent>:
 8009810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009812:	4603      	mov	r3, r0
 8009814:	2900      	cmp	r1, #0
 8009816:	bfb8      	it	lt
 8009818:	4249      	neglt	r1, r1
 800981a:	f803 2b02 	strb.w	r2, [r3], #2
 800981e:	bfb4      	ite	lt
 8009820:	222d      	movlt	r2, #45	; 0x2d
 8009822:	222b      	movge	r2, #43	; 0x2b
 8009824:	2909      	cmp	r1, #9
 8009826:	7042      	strb	r2, [r0, #1]
 8009828:	dd2a      	ble.n	8009880 <__exponent+0x70>
 800982a:	f10d 0207 	add.w	r2, sp, #7
 800982e:	4617      	mov	r7, r2
 8009830:	260a      	movs	r6, #10
 8009832:	4694      	mov	ip, r2
 8009834:	fb91 f5f6 	sdiv	r5, r1, r6
 8009838:	fb06 1415 	mls	r4, r6, r5, r1
 800983c:	3430      	adds	r4, #48	; 0x30
 800983e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009842:	460c      	mov	r4, r1
 8009844:	2c63      	cmp	r4, #99	; 0x63
 8009846:	f102 32ff 	add.w	r2, r2, #4294967295
 800984a:	4629      	mov	r1, r5
 800984c:	dcf1      	bgt.n	8009832 <__exponent+0x22>
 800984e:	3130      	adds	r1, #48	; 0x30
 8009850:	f1ac 0402 	sub.w	r4, ip, #2
 8009854:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009858:	1c41      	adds	r1, r0, #1
 800985a:	4622      	mov	r2, r4
 800985c:	42ba      	cmp	r2, r7
 800985e:	d30a      	bcc.n	8009876 <__exponent+0x66>
 8009860:	f10d 0209 	add.w	r2, sp, #9
 8009864:	eba2 020c 	sub.w	r2, r2, ip
 8009868:	42bc      	cmp	r4, r7
 800986a:	bf88      	it	hi
 800986c:	2200      	movhi	r2, #0
 800986e:	4413      	add	r3, r2
 8009870:	1a18      	subs	r0, r3, r0
 8009872:	b003      	add	sp, #12
 8009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009876:	f812 5b01 	ldrb.w	r5, [r2], #1
 800987a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800987e:	e7ed      	b.n	800985c <__exponent+0x4c>
 8009880:	2330      	movs	r3, #48	; 0x30
 8009882:	3130      	adds	r1, #48	; 0x30
 8009884:	7083      	strb	r3, [r0, #2]
 8009886:	70c1      	strb	r1, [r0, #3]
 8009888:	1d03      	adds	r3, r0, #4
 800988a:	e7f1      	b.n	8009870 <__exponent+0x60>

0800988c <_printf_float>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	ed2d 8b02 	vpush	{d8}
 8009894:	b08d      	sub	sp, #52	; 0x34
 8009896:	460c      	mov	r4, r1
 8009898:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800989c:	4616      	mov	r6, r2
 800989e:	461f      	mov	r7, r3
 80098a0:	4605      	mov	r5, r0
 80098a2:	f000 fe45 	bl	800a530 <_localeconv_r>
 80098a6:	f8d0 a000 	ldr.w	sl, [r0]
 80098aa:	4650      	mov	r0, sl
 80098ac:	f7f6 fcf8 	bl	80002a0 <strlen>
 80098b0:	2300      	movs	r3, #0
 80098b2:	930a      	str	r3, [sp, #40]	; 0x28
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	9305      	str	r3, [sp, #20]
 80098b8:	f8d8 3000 	ldr.w	r3, [r8]
 80098bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098c0:	3307      	adds	r3, #7
 80098c2:	f023 0307 	bic.w	r3, r3, #7
 80098c6:	f103 0208 	add.w	r2, r3, #8
 80098ca:	f8c8 2000 	str.w	r2, [r8]
 80098ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80098dc:	ee08 0a10 	vmov	s16, r0
 80098e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80098e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098e8:	4b9e      	ldr	r3, [pc, #632]	; (8009b64 <_printf_float+0x2d8>)
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	f7f7 f935 	bl	8000b5c <__aeabi_dcmpun>
 80098f2:	bb88      	cbnz	r0, 8009958 <_printf_float+0xcc>
 80098f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098f8:	4b9a      	ldr	r3, [pc, #616]	; (8009b64 <_printf_float+0x2d8>)
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295
 80098fe:	f7f7 f90f 	bl	8000b20 <__aeabi_dcmple>
 8009902:	bb48      	cbnz	r0, 8009958 <_printf_float+0xcc>
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f7f7 f8fe 	bl	8000b0c <__aeabi_dcmplt>
 8009910:	b110      	cbz	r0, 8009918 <_printf_float+0x8c>
 8009912:	232d      	movs	r3, #45	; 0x2d
 8009914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009918:	4a93      	ldr	r2, [pc, #588]	; (8009b68 <_printf_float+0x2dc>)
 800991a:	4b94      	ldr	r3, [pc, #592]	; (8009b6c <_printf_float+0x2e0>)
 800991c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009920:	bf94      	ite	ls
 8009922:	4690      	movls	r8, r2
 8009924:	4698      	movhi	r8, r3
 8009926:	2303      	movs	r3, #3
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	f023 0304 	bic.w	r3, r3, #4
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	9700      	str	r7, [sp, #0]
 8009938:	4633      	mov	r3, r6
 800993a:	aa0b      	add	r2, sp, #44	; 0x2c
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f000 f9da 	bl	8009cf8 <_printf_common>
 8009944:	3001      	adds	r0, #1
 8009946:	f040 8090 	bne.w	8009a6a <_printf_float+0x1de>
 800994a:	f04f 30ff 	mov.w	r0, #4294967295
 800994e:	b00d      	add	sp, #52	; 0x34
 8009950:	ecbd 8b02 	vpop	{d8}
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	4640      	mov	r0, r8
 800995e:	4649      	mov	r1, r9
 8009960:	f7f7 f8fc 	bl	8000b5c <__aeabi_dcmpun>
 8009964:	b140      	cbz	r0, 8009978 <_printf_float+0xec>
 8009966:	464b      	mov	r3, r9
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfbc      	itt	lt
 800996c:	232d      	movlt	r3, #45	; 0x2d
 800996e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009972:	4a7f      	ldr	r2, [pc, #508]	; (8009b70 <_printf_float+0x2e4>)
 8009974:	4b7f      	ldr	r3, [pc, #508]	; (8009b74 <_printf_float+0x2e8>)
 8009976:	e7d1      	b.n	800991c <_printf_float+0x90>
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800997e:	9206      	str	r2, [sp, #24]
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	d13f      	bne.n	8009a04 <_printf_float+0x178>
 8009984:	2306      	movs	r3, #6
 8009986:	6063      	str	r3, [r4, #4]
 8009988:	9b05      	ldr	r3, [sp, #20]
 800998a:	6861      	ldr	r1, [r4, #4]
 800998c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009990:	2300      	movs	r3, #0
 8009992:	9303      	str	r3, [sp, #12]
 8009994:	ab0a      	add	r3, sp, #40	; 0x28
 8009996:	e9cd b301 	strd	fp, r3, [sp, #4]
 800999a:	ab09      	add	r3, sp, #36	; 0x24
 800999c:	ec49 8b10 	vmov	d0, r8, r9
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	6022      	str	r2, [r4, #0]
 80099a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099a8:	4628      	mov	r0, r5
 80099aa:	f7ff fecf 	bl	800974c <__cvt>
 80099ae:	9b06      	ldr	r3, [sp, #24]
 80099b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099b2:	2b47      	cmp	r3, #71	; 0x47
 80099b4:	4680      	mov	r8, r0
 80099b6:	d108      	bne.n	80099ca <_printf_float+0x13e>
 80099b8:	1cc8      	adds	r0, r1, #3
 80099ba:	db02      	blt.n	80099c2 <_printf_float+0x136>
 80099bc:	6863      	ldr	r3, [r4, #4]
 80099be:	4299      	cmp	r1, r3
 80099c0:	dd41      	ble.n	8009a46 <_printf_float+0x1ba>
 80099c2:	f1ab 0302 	sub.w	r3, fp, #2
 80099c6:	fa5f fb83 	uxtb.w	fp, r3
 80099ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099ce:	d820      	bhi.n	8009a12 <_printf_float+0x186>
 80099d0:	3901      	subs	r1, #1
 80099d2:	465a      	mov	r2, fp
 80099d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099d8:	9109      	str	r1, [sp, #36]	; 0x24
 80099da:	f7ff ff19 	bl	8009810 <__exponent>
 80099de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e0:	1813      	adds	r3, r2, r0
 80099e2:	2a01      	cmp	r2, #1
 80099e4:	4681      	mov	r9, r0
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	dc02      	bgt.n	80099f0 <_printf_float+0x164>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	07d2      	lsls	r2, r2, #31
 80099ee:	d501      	bpl.n	80099f4 <_printf_float+0x168>
 80099f0:	3301      	adds	r3, #1
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d09c      	beq.n	8009936 <_printf_float+0xaa>
 80099fc:	232d      	movs	r3, #45	; 0x2d
 80099fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a02:	e798      	b.n	8009936 <_printf_float+0xaa>
 8009a04:	9a06      	ldr	r2, [sp, #24]
 8009a06:	2a47      	cmp	r2, #71	; 0x47
 8009a08:	d1be      	bne.n	8009988 <_printf_float+0xfc>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1bc      	bne.n	8009988 <_printf_float+0xfc>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e7b9      	b.n	8009986 <_printf_float+0xfa>
 8009a12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a16:	d118      	bne.n	8009a4a <_printf_float+0x1be>
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	6863      	ldr	r3, [r4, #4]
 8009a1c:	dd0b      	ble.n	8009a36 <_printf_float+0x1aa>
 8009a1e:	6121      	str	r1, [r4, #16]
 8009a20:	b913      	cbnz	r3, 8009a28 <_printf_float+0x19c>
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	07d0      	lsls	r0, r2, #31
 8009a26:	d502      	bpl.n	8009a2e <_printf_float+0x1a2>
 8009a28:	3301      	adds	r3, #1
 8009a2a:	440b      	add	r3, r1
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a30:	f04f 0900 	mov.w	r9, #0
 8009a34:	e7de      	b.n	80099f4 <_printf_float+0x168>
 8009a36:	b913      	cbnz	r3, 8009a3e <_printf_float+0x1b2>
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	07d2      	lsls	r2, r2, #31
 8009a3c:	d501      	bpl.n	8009a42 <_printf_float+0x1b6>
 8009a3e:	3302      	adds	r3, #2
 8009a40:	e7f4      	b.n	8009a2c <_printf_float+0x1a0>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e7f2      	b.n	8009a2c <_printf_float+0x1a0>
 8009a46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	db05      	blt.n	8009a5c <_printf_float+0x1d0>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	6121      	str	r1, [r4, #16]
 8009a54:	07d8      	lsls	r0, r3, #31
 8009a56:	d5ea      	bpl.n	8009a2e <_printf_float+0x1a2>
 8009a58:	1c4b      	adds	r3, r1, #1
 8009a5a:	e7e7      	b.n	8009a2c <_printf_float+0x1a0>
 8009a5c:	2900      	cmp	r1, #0
 8009a5e:	bfd4      	ite	le
 8009a60:	f1c1 0202 	rsble	r2, r1, #2
 8009a64:	2201      	movgt	r2, #1
 8009a66:	4413      	add	r3, r2
 8009a68:	e7e0      	b.n	8009a2c <_printf_float+0x1a0>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	055a      	lsls	r2, r3, #21
 8009a6e:	d407      	bmi.n	8009a80 <_printf_float+0x1f4>
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	4642      	mov	r2, r8
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d12c      	bne.n	8009ad8 <_printf_float+0x24c>
 8009a7e:	e764      	b.n	800994a <_printf_float+0xbe>
 8009a80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a84:	f240 80e0 	bls.w	8009c48 <_printf_float+0x3bc>
 8009a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f7f7 f832 	bl	8000af8 <__aeabi_dcmpeq>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d034      	beq.n	8009b02 <_printf_float+0x276>
 8009a98:	4a37      	ldr	r2, [pc, #220]	; (8009b78 <_printf_float+0x2ec>)
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	f43f af51 	beq.w	800994a <_printf_float+0xbe>
 8009aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aac:	429a      	cmp	r2, r3
 8009aae:	db02      	blt.n	8009ab6 <_printf_float+0x22a>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	07d8      	lsls	r0, r3, #31
 8009ab4:	d510      	bpl.n	8009ad8 <_printf_float+0x24c>
 8009ab6:	ee18 3a10 	vmov	r3, s16
 8009aba:	4652      	mov	r2, sl
 8009abc:	4631      	mov	r1, r6
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b8      	blx	r7
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	f43f af41 	beq.w	800994a <_printf_float+0xbe>
 8009ac8:	f04f 0800 	mov.w	r8, #0
 8009acc:	f104 091a 	add.w	r9, r4, #26
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4543      	cmp	r3, r8
 8009ad6:	dc09      	bgt.n	8009aec <_printf_float+0x260>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	079b      	lsls	r3, r3, #30
 8009adc:	f100 8107 	bmi.w	8009cee <_printf_float+0x462>
 8009ae0:	68e0      	ldr	r0, [r4, #12]
 8009ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae4:	4298      	cmp	r0, r3
 8009ae6:	bfb8      	it	lt
 8009ae8:	4618      	movlt	r0, r3
 8009aea:	e730      	b.n	800994e <_printf_float+0xc2>
 8009aec:	2301      	movs	r3, #1
 8009aee:	464a      	mov	r2, r9
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af27 	beq.w	800994a <_printf_float+0xbe>
 8009afc:	f108 0801 	add.w	r8, r8, #1
 8009b00:	e7e6      	b.n	8009ad0 <_printf_float+0x244>
 8009b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dc39      	bgt.n	8009b7c <_printf_float+0x2f0>
 8009b08:	4a1b      	ldr	r2, [pc, #108]	; (8009b78 <_printf_float+0x2ec>)
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f af19 	beq.w	800994a <_printf_float+0xbe>
 8009b18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d102      	bne.n	8009b26 <_printf_float+0x29a>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	d5d8      	bpl.n	8009ad8 <_printf_float+0x24c>
 8009b26:	ee18 3a10 	vmov	r3, s16
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f af09 	beq.w	800994a <_printf_float+0xbe>
 8009b38:	f04f 0900 	mov.w	r9, #0
 8009b3c:	f104 0a1a 	add.w	sl, r4, #26
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	425b      	negs	r3, r3
 8009b44:	454b      	cmp	r3, r9
 8009b46:	dc01      	bgt.n	8009b4c <_printf_float+0x2c0>
 8009b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4a:	e792      	b.n	8009a72 <_printf_float+0x1e6>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4652      	mov	r2, sl
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f aef7 	beq.w	800994a <_printf_float+0xbe>
 8009b5c:	f109 0901 	add.w	r9, r9, #1
 8009b60:	e7ee      	b.n	8009b40 <_printf_float+0x2b4>
 8009b62:	bf00      	nop
 8009b64:	7fefffff 	.word	0x7fefffff
 8009b68:	0800caed 	.word	0x0800caed
 8009b6c:	0800caf1 	.word	0x0800caf1
 8009b70:	0800caf5 	.word	0x0800caf5
 8009b74:	0800caf9 	.word	0x0800caf9
 8009b78:	0800cafd 	.word	0x0800cafd
 8009b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b80:	429a      	cmp	r2, r3
 8009b82:	bfa8      	it	ge
 8009b84:	461a      	movge	r2, r3
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	4691      	mov	r9, r2
 8009b8a:	dc37      	bgt.n	8009bfc <_printf_float+0x370>
 8009b8c:	f04f 0b00 	mov.w	fp, #0
 8009b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b94:	f104 021a 	add.w	r2, r4, #26
 8009b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b9a:	9305      	str	r3, [sp, #20]
 8009b9c:	eba3 0309 	sub.w	r3, r3, r9
 8009ba0:	455b      	cmp	r3, fp
 8009ba2:	dc33      	bgt.n	8009c0c <_printf_float+0x380>
 8009ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	db3b      	blt.n	8009c24 <_printf_float+0x398>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	07da      	lsls	r2, r3, #31
 8009bb0:	d438      	bmi.n	8009c24 <_printf_float+0x398>
 8009bb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bb6:	eba2 0903 	sub.w	r9, r2, r3
 8009bba:	9b05      	ldr	r3, [sp, #20]
 8009bbc:	1ad2      	subs	r2, r2, r3
 8009bbe:	4591      	cmp	r9, r2
 8009bc0:	bfa8      	it	ge
 8009bc2:	4691      	movge	r9, r2
 8009bc4:	f1b9 0f00 	cmp.w	r9, #0
 8009bc8:	dc35      	bgt.n	8009c36 <_printf_float+0x3aa>
 8009bca:	f04f 0800 	mov.w	r8, #0
 8009bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd2:	f104 0a1a 	add.w	sl, r4, #26
 8009bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	eba3 0309 	sub.w	r3, r3, r9
 8009be0:	4543      	cmp	r3, r8
 8009be2:	f77f af79 	ble.w	8009ad8 <_printf_float+0x24c>
 8009be6:	2301      	movs	r3, #1
 8009be8:	4652      	mov	r2, sl
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f aeaa 	beq.w	800994a <_printf_float+0xbe>
 8009bf6:	f108 0801 	add.w	r8, r8, #1
 8009bfa:	e7ec      	b.n	8009bd6 <_printf_float+0x34a>
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4642      	mov	r2, r8
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	d1c0      	bne.n	8009b8c <_printf_float+0x300>
 8009c0a:	e69e      	b.n	800994a <_printf_float+0xbe>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	9205      	str	r2, [sp, #20]
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f ae97 	beq.w	800994a <_printf_float+0xbe>
 8009c1c:	9a05      	ldr	r2, [sp, #20]
 8009c1e:	f10b 0b01 	add.w	fp, fp, #1
 8009c22:	e7b9      	b.n	8009b98 <_printf_float+0x30c>
 8009c24:	ee18 3a10 	vmov	r3, s16
 8009c28:	4652      	mov	r2, sl
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	d1be      	bne.n	8009bb2 <_printf_float+0x326>
 8009c34:	e689      	b.n	800994a <_printf_float+0xbe>
 8009c36:	9a05      	ldr	r2, [sp, #20]
 8009c38:	464b      	mov	r3, r9
 8009c3a:	4442      	add	r2, r8
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	d1c1      	bne.n	8009bca <_printf_float+0x33e>
 8009c46:	e680      	b.n	800994a <_printf_float+0xbe>
 8009c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4a:	2a01      	cmp	r2, #1
 8009c4c:	dc01      	bgt.n	8009c52 <_printf_float+0x3c6>
 8009c4e:	07db      	lsls	r3, r3, #31
 8009c50:	d53a      	bpl.n	8009cc8 <_printf_float+0x43c>
 8009c52:	2301      	movs	r3, #1
 8009c54:	4642      	mov	r2, r8
 8009c56:	4631      	mov	r1, r6
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b8      	blx	r7
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f43f ae74 	beq.w	800994a <_printf_float+0xbe>
 8009c62:	ee18 3a10 	vmov	r3, s16
 8009c66:	4652      	mov	r2, sl
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b8      	blx	r7
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f43f ae6b 	beq.w	800994a <_printf_float+0xbe>
 8009c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009c80:	f7f6 ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8009c84:	b9d8      	cbnz	r0, 8009cbe <_printf_float+0x432>
 8009c86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c8a:	f108 0201 	add.w	r2, r8, #1
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	d10e      	bne.n	8009cb6 <_printf_float+0x42a>
 8009c98:	e657      	b.n	800994a <_printf_float+0xbe>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f43f ae50 	beq.w	800994a <_printf_float+0xbe>
 8009caa:	f108 0801 	add.w	r8, r8, #1
 8009cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	4543      	cmp	r3, r8
 8009cb4:	dcf1      	bgt.n	8009c9a <_printf_float+0x40e>
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cbc:	e6da      	b.n	8009a74 <_printf_float+0x1e8>
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	f104 0a1a 	add.w	sl, r4, #26
 8009cc6:	e7f2      	b.n	8009cae <_printf_float+0x422>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4642      	mov	r2, r8
 8009ccc:	e7df      	b.n	8009c8e <_printf_float+0x402>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	464a      	mov	r2, r9
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	47b8      	blx	r7
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f43f ae36 	beq.w	800994a <_printf_float+0xbe>
 8009cde:	f108 0801 	add.w	r8, r8, #1
 8009ce2:	68e3      	ldr	r3, [r4, #12]
 8009ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ce6:	1a5b      	subs	r3, r3, r1
 8009ce8:	4543      	cmp	r3, r8
 8009cea:	dcf0      	bgt.n	8009cce <_printf_float+0x442>
 8009cec:	e6f8      	b.n	8009ae0 <_printf_float+0x254>
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	f104 0919 	add.w	r9, r4, #25
 8009cf6:	e7f4      	b.n	8009ce2 <_printf_float+0x456>

08009cf8 <_printf_common>:
 8009cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	4699      	mov	r9, r3
 8009d00:	688a      	ldr	r2, [r1, #8]
 8009d02:	690b      	ldr	r3, [r1, #16]
 8009d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	bfb8      	it	lt
 8009d0c:	4613      	movlt	r3, r2
 8009d0e:	6033      	str	r3, [r6, #0]
 8009d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d14:	4607      	mov	r7, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b10a      	cbz	r2, 8009d1e <_printf_common+0x26>
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	0699      	lsls	r1, r3, #26
 8009d22:	bf42      	ittt	mi
 8009d24:	6833      	ldrmi	r3, [r6, #0]
 8009d26:	3302      	addmi	r3, #2
 8009d28:	6033      	strmi	r3, [r6, #0]
 8009d2a:	6825      	ldr	r5, [r4, #0]
 8009d2c:	f015 0506 	ands.w	r5, r5, #6
 8009d30:	d106      	bne.n	8009d40 <_printf_common+0x48>
 8009d32:	f104 0a19 	add.w	sl, r4, #25
 8009d36:	68e3      	ldr	r3, [r4, #12]
 8009d38:	6832      	ldr	r2, [r6, #0]
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	dc26      	bgt.n	8009d8e <_printf_common+0x96>
 8009d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d44:	1e13      	subs	r3, r2, #0
 8009d46:	6822      	ldr	r2, [r4, #0]
 8009d48:	bf18      	it	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	0692      	lsls	r2, r2, #26
 8009d4e:	d42b      	bmi.n	8009da8 <_printf_common+0xb0>
 8009d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d54:	4649      	mov	r1, r9
 8009d56:	4638      	mov	r0, r7
 8009d58:	47c0      	blx	r8
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d01e      	beq.n	8009d9c <_printf_common+0xa4>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	f003 0306 	and.w	r3, r3, #6
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	bf02      	ittt	eq
 8009d6a:	68e5      	ldreq	r5, [r4, #12]
 8009d6c:	6833      	ldreq	r3, [r6, #0]
 8009d6e:	1aed      	subeq	r5, r5, r3
 8009d70:	68a3      	ldr	r3, [r4, #8]
 8009d72:	bf0c      	ite	eq
 8009d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d78:	2500      	movne	r5, #0
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	bfc4      	itt	gt
 8009d7e:	1a9b      	subgt	r3, r3, r2
 8009d80:	18ed      	addgt	r5, r5, r3
 8009d82:	2600      	movs	r6, #0
 8009d84:	341a      	adds	r4, #26
 8009d86:	42b5      	cmp	r5, r6
 8009d88:	d11a      	bne.n	8009dc0 <_printf_common+0xc8>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e008      	b.n	8009da0 <_printf_common+0xa8>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4652      	mov	r2, sl
 8009d92:	4649      	mov	r1, r9
 8009d94:	4638      	mov	r0, r7
 8009d96:	47c0      	blx	r8
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d103      	bne.n	8009da4 <_printf_common+0xac>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da4:	3501      	adds	r5, #1
 8009da6:	e7c6      	b.n	8009d36 <_printf_common+0x3e>
 8009da8:	18e1      	adds	r1, r4, r3
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	2030      	movs	r0, #48	; 0x30
 8009dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009db2:	4422      	add	r2, r4
 8009db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	e7c7      	b.n	8009d50 <_printf_common+0x58>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	47c0      	blx	r8
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d0e6      	beq.n	8009d9c <_printf_common+0xa4>
 8009dce:	3601      	adds	r6, #1
 8009dd0:	e7d9      	b.n	8009d86 <_printf_common+0x8e>
	...

08009dd4 <_printf_i>:
 8009dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	7e0f      	ldrb	r7, [r1, #24]
 8009dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ddc:	2f78      	cmp	r7, #120	; 0x78
 8009dde:	4691      	mov	r9, r2
 8009de0:	4680      	mov	r8, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	469a      	mov	sl, r3
 8009de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dea:	d807      	bhi.n	8009dfc <_printf_i+0x28>
 8009dec:	2f62      	cmp	r7, #98	; 0x62
 8009dee:	d80a      	bhi.n	8009e06 <_printf_i+0x32>
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	f000 80d4 	beq.w	8009f9e <_printf_i+0x1ca>
 8009df6:	2f58      	cmp	r7, #88	; 0x58
 8009df8:	f000 80c0 	beq.w	8009f7c <_printf_i+0x1a8>
 8009dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e04:	e03a      	b.n	8009e7c <_printf_i+0xa8>
 8009e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e0a:	2b15      	cmp	r3, #21
 8009e0c:	d8f6      	bhi.n	8009dfc <_printf_i+0x28>
 8009e0e:	a101      	add	r1, pc, #4	; (adr r1, 8009e14 <_printf_i+0x40>)
 8009e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e14:	08009e6d 	.word	0x08009e6d
 8009e18:	08009e81 	.word	0x08009e81
 8009e1c:	08009dfd 	.word	0x08009dfd
 8009e20:	08009dfd 	.word	0x08009dfd
 8009e24:	08009dfd 	.word	0x08009dfd
 8009e28:	08009dfd 	.word	0x08009dfd
 8009e2c:	08009e81 	.word	0x08009e81
 8009e30:	08009dfd 	.word	0x08009dfd
 8009e34:	08009dfd 	.word	0x08009dfd
 8009e38:	08009dfd 	.word	0x08009dfd
 8009e3c:	08009dfd 	.word	0x08009dfd
 8009e40:	08009f85 	.word	0x08009f85
 8009e44:	08009ead 	.word	0x08009ead
 8009e48:	08009f3f 	.word	0x08009f3f
 8009e4c:	08009dfd 	.word	0x08009dfd
 8009e50:	08009dfd 	.word	0x08009dfd
 8009e54:	08009fa7 	.word	0x08009fa7
 8009e58:	08009dfd 	.word	0x08009dfd
 8009e5c:	08009ead 	.word	0x08009ead
 8009e60:	08009dfd 	.word	0x08009dfd
 8009e64:	08009dfd 	.word	0x08009dfd
 8009e68:	08009f47 	.word	0x08009f47
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	602a      	str	r2, [r5, #0]
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e09f      	b.n	8009fc0 <_printf_i+0x1ec>
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	682b      	ldr	r3, [r5, #0]
 8009e84:	0607      	lsls	r7, r0, #24
 8009e86:	f103 0104 	add.w	r1, r3, #4
 8009e8a:	6029      	str	r1, [r5, #0]
 8009e8c:	d501      	bpl.n	8009e92 <_printf_i+0xbe>
 8009e8e:	681e      	ldr	r6, [r3, #0]
 8009e90:	e003      	b.n	8009e9a <_printf_i+0xc6>
 8009e92:	0646      	lsls	r6, r0, #25
 8009e94:	d5fb      	bpl.n	8009e8e <_printf_i+0xba>
 8009e96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e9a:	2e00      	cmp	r6, #0
 8009e9c:	da03      	bge.n	8009ea6 <_printf_i+0xd2>
 8009e9e:	232d      	movs	r3, #45	; 0x2d
 8009ea0:	4276      	negs	r6, r6
 8009ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ea6:	485a      	ldr	r0, [pc, #360]	; (800a010 <_printf_i+0x23c>)
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	e012      	b.n	8009ed2 <_printf_i+0xfe>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	6820      	ldr	r0, [r4, #0]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	6029      	str	r1, [r5, #0]
 8009eb4:	0605      	lsls	r5, r0, #24
 8009eb6:	d501      	bpl.n	8009ebc <_printf_i+0xe8>
 8009eb8:	681e      	ldr	r6, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <_printf_i+0xee>
 8009ebc:	0641      	lsls	r1, r0, #25
 8009ebe:	d5fb      	bpl.n	8009eb8 <_printf_i+0xe4>
 8009ec0:	881e      	ldrh	r6, [r3, #0]
 8009ec2:	4853      	ldr	r0, [pc, #332]	; (800a010 <_printf_i+0x23c>)
 8009ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ec6:	bf0c      	ite	eq
 8009ec8:	2308      	moveq	r3, #8
 8009eca:	230a      	movne	r3, #10
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ed2:	6865      	ldr	r5, [r4, #4]
 8009ed4:	60a5      	str	r5, [r4, #8]
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	bfa2      	ittt	ge
 8009eda:	6821      	ldrge	r1, [r4, #0]
 8009edc:	f021 0104 	bicge.w	r1, r1, #4
 8009ee0:	6021      	strge	r1, [r4, #0]
 8009ee2:	b90e      	cbnz	r6, 8009ee8 <_printf_i+0x114>
 8009ee4:	2d00      	cmp	r5, #0
 8009ee6:	d04b      	beq.n	8009f80 <_printf_i+0x1ac>
 8009ee8:	4615      	mov	r5, r2
 8009eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eee:	fb03 6711 	mls	r7, r3, r1, r6
 8009ef2:	5dc7      	ldrb	r7, [r0, r7]
 8009ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ef8:	4637      	mov	r7, r6
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	460e      	mov	r6, r1
 8009efe:	d9f4      	bls.n	8009eea <_printf_i+0x116>
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d10b      	bne.n	8009f1c <_printf_i+0x148>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	07de      	lsls	r6, r3, #31
 8009f08:	d508      	bpl.n	8009f1c <_printf_i+0x148>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6861      	ldr	r1, [r4, #4]
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	bfde      	ittt	le
 8009f12:	2330      	movle	r3, #48	; 0x30
 8009f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f1c:	1b52      	subs	r2, r2, r5
 8009f1e:	6122      	str	r2, [r4, #16]
 8009f20:	f8cd a000 	str.w	sl, [sp]
 8009f24:	464b      	mov	r3, r9
 8009f26:	aa03      	add	r2, sp, #12
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7ff fee4 	bl	8009cf8 <_printf_common>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d14a      	bne.n	8009fca <_printf_i+0x1f6>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b004      	add	sp, #16
 8009f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	f043 0320 	orr.w	r3, r3, #32
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	4833      	ldr	r0, [pc, #204]	; (800a014 <_printf_i+0x240>)
 8009f48:	2778      	movs	r7, #120	; 0x78
 8009f4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	6829      	ldr	r1, [r5, #0]
 8009f52:	061f      	lsls	r7, r3, #24
 8009f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f58:	d402      	bmi.n	8009f60 <_printf_i+0x18c>
 8009f5a:	065f      	lsls	r7, r3, #25
 8009f5c:	bf48      	it	mi
 8009f5e:	b2b6      	uxthmi	r6, r6
 8009f60:	07df      	lsls	r7, r3, #31
 8009f62:	bf48      	it	mi
 8009f64:	f043 0320 	orrmi.w	r3, r3, #32
 8009f68:	6029      	str	r1, [r5, #0]
 8009f6a:	bf48      	it	mi
 8009f6c:	6023      	strmi	r3, [r4, #0]
 8009f6e:	b91e      	cbnz	r6, 8009f78 <_printf_i+0x1a4>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	f023 0320 	bic.w	r3, r3, #32
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	2310      	movs	r3, #16
 8009f7a:	e7a7      	b.n	8009ecc <_printf_i+0xf8>
 8009f7c:	4824      	ldr	r0, [pc, #144]	; (800a010 <_printf_i+0x23c>)
 8009f7e:	e7e4      	b.n	8009f4a <_printf_i+0x176>
 8009f80:	4615      	mov	r5, r2
 8009f82:	e7bd      	b.n	8009f00 <_printf_i+0x12c>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	6826      	ldr	r6, [r4, #0]
 8009f88:	6961      	ldr	r1, [r4, #20]
 8009f8a:	1d18      	adds	r0, r3, #4
 8009f8c:	6028      	str	r0, [r5, #0]
 8009f8e:	0635      	lsls	r5, r6, #24
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	d501      	bpl.n	8009f98 <_printf_i+0x1c4>
 8009f94:	6019      	str	r1, [r3, #0]
 8009f96:	e002      	b.n	8009f9e <_printf_i+0x1ca>
 8009f98:	0670      	lsls	r0, r6, #25
 8009f9a:	d5fb      	bpl.n	8009f94 <_printf_i+0x1c0>
 8009f9c:	8019      	strh	r1, [r3, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	4615      	mov	r5, r2
 8009fa4:	e7bc      	b.n	8009f20 <_printf_i+0x14c>
 8009fa6:	682b      	ldr	r3, [r5, #0]
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	602a      	str	r2, [r5, #0]
 8009fac:	681d      	ldr	r5, [r3, #0]
 8009fae:	6862      	ldr	r2, [r4, #4]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7f6 f924 	bl	8000200 <memchr>
 8009fb8:	b108      	cbz	r0, 8009fbe <_printf_i+0x1ea>
 8009fba:	1b40      	subs	r0, r0, r5
 8009fbc:	6060      	str	r0, [r4, #4]
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc8:	e7aa      	b.n	8009f20 <_printf_i+0x14c>
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	462a      	mov	r2, r5
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	47d0      	blx	sl
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d0ad      	beq.n	8009f34 <_printf_i+0x160>
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	079b      	lsls	r3, r3, #30
 8009fdc:	d413      	bmi.n	800a006 <_printf_i+0x232>
 8009fde:	68e0      	ldr	r0, [r4, #12]
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	4298      	cmp	r0, r3
 8009fe4:	bfb8      	it	lt
 8009fe6:	4618      	movlt	r0, r3
 8009fe8:	e7a6      	b.n	8009f38 <_printf_i+0x164>
 8009fea:	2301      	movs	r3, #1
 8009fec:	4632      	mov	r2, r6
 8009fee:	4649      	mov	r1, r9
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	47d0      	blx	sl
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d09d      	beq.n	8009f34 <_printf_i+0x160>
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	9903      	ldr	r1, [sp, #12]
 8009ffe:	1a5b      	subs	r3, r3, r1
 800a000:	42ab      	cmp	r3, r5
 800a002:	dcf2      	bgt.n	8009fea <_printf_i+0x216>
 800a004:	e7eb      	b.n	8009fde <_printf_i+0x20a>
 800a006:	2500      	movs	r5, #0
 800a008:	f104 0619 	add.w	r6, r4, #25
 800a00c:	e7f5      	b.n	8009ffa <_printf_i+0x226>
 800a00e:	bf00      	nop
 800a010:	0800caff 	.word	0x0800caff
 800a014:	0800cb10 	.word	0x0800cb10

0800a018 <std>:
 800a018:	2300      	movs	r3, #0
 800a01a:	b510      	push	{r4, lr}
 800a01c:	4604      	mov	r4, r0
 800a01e:	e9c0 3300 	strd	r3, r3, [r0]
 800a022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a026:	6083      	str	r3, [r0, #8]
 800a028:	8181      	strh	r1, [r0, #12]
 800a02a:	6643      	str	r3, [r0, #100]	; 0x64
 800a02c:	81c2      	strh	r2, [r0, #14]
 800a02e:	6183      	str	r3, [r0, #24]
 800a030:	4619      	mov	r1, r3
 800a032:	2208      	movs	r2, #8
 800a034:	305c      	adds	r0, #92	; 0x5c
 800a036:	f000 fa17 	bl	800a468 <memset>
 800a03a:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <std+0x58>)
 800a03c:	6263      	str	r3, [r4, #36]	; 0x24
 800a03e:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <std+0x5c>)
 800a040:	62a3      	str	r3, [r4, #40]	; 0x28
 800a042:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <std+0x60>)
 800a044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a046:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <std+0x64>)
 800a048:	6323      	str	r3, [r4, #48]	; 0x30
 800a04a:	4b0d      	ldr	r3, [pc, #52]	; (800a080 <std+0x68>)
 800a04c:	6224      	str	r4, [r4, #32]
 800a04e:	429c      	cmp	r4, r3
 800a050:	d006      	beq.n	800a060 <std+0x48>
 800a052:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a056:	4294      	cmp	r4, r2
 800a058:	d002      	beq.n	800a060 <std+0x48>
 800a05a:	33d0      	adds	r3, #208	; 0xd0
 800a05c:	429c      	cmp	r4, r3
 800a05e:	d105      	bne.n	800a06c <std+0x54>
 800a060:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a068:	f000 bad6 	b.w	800a618 <__retarget_lock_init_recursive>
 800a06c:	bd10      	pop	{r4, pc}
 800a06e:	bf00      	nop
 800a070:	0800a2b9 	.word	0x0800a2b9
 800a074:	0800a2db 	.word	0x0800a2db
 800a078:	0800a313 	.word	0x0800a313
 800a07c:	0800a337 	.word	0x0800a337
 800a080:	20004d10 	.word	0x20004d10

0800a084 <stdio_exit_handler>:
 800a084:	4a02      	ldr	r2, [pc, #8]	; (800a090 <stdio_exit_handler+0xc>)
 800a086:	4903      	ldr	r1, [pc, #12]	; (800a094 <stdio_exit_handler+0x10>)
 800a088:	4803      	ldr	r0, [pc, #12]	; (800a098 <stdio_exit_handler+0x14>)
 800a08a:	f000 b869 	b.w	800a160 <_fwalk_sglue>
 800a08e:	bf00      	nop
 800a090:	2000001c 	.word	0x2000001c
 800a094:	0800c2a9 	.word	0x0800c2a9
 800a098:	20000028 	.word	0x20000028

0800a09c <cleanup_stdio>:
 800a09c:	6841      	ldr	r1, [r0, #4]
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <cleanup_stdio+0x34>)
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	d001      	beq.n	800a0ac <cleanup_stdio+0x10>
 800a0a8:	f002 f8fe 	bl	800c2a8 <_fflush_r>
 800a0ac:	68a1      	ldr	r1, [r4, #8]
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <cleanup_stdio+0x38>)
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <cleanup_stdio+0x1e>
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f002 f8f7 	bl	800c2a8 <_fflush_r>
 800a0ba:	68e1      	ldr	r1, [r4, #12]
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <cleanup_stdio+0x3c>)
 800a0be:	4299      	cmp	r1, r3
 800a0c0:	d004      	beq.n	800a0cc <cleanup_stdio+0x30>
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c8:	f002 b8ee 	b.w	800c2a8 <_fflush_r>
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20004d10 	.word	0x20004d10
 800a0d4:	20004d78 	.word	0x20004d78
 800a0d8:	20004de0 	.word	0x20004de0

0800a0dc <global_stdio_init.part.0>:
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	4b0b      	ldr	r3, [pc, #44]	; (800a10c <global_stdio_init.part.0+0x30>)
 800a0e0:	4c0b      	ldr	r4, [pc, #44]	; (800a110 <global_stdio_init.part.0+0x34>)
 800a0e2:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <global_stdio_init.part.0+0x38>)
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2104      	movs	r1, #4
 800a0ec:	f7ff ff94 	bl	800a018 <std>
 800a0f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	2109      	movs	r1, #9
 800a0f8:	f7ff ff8e 	bl	800a018 <std>
 800a0fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a100:	2202      	movs	r2, #2
 800a102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a106:	2112      	movs	r1, #18
 800a108:	f7ff bf86 	b.w	800a018 <std>
 800a10c:	20004e48 	.word	0x20004e48
 800a110:	20004d10 	.word	0x20004d10
 800a114:	0800a085 	.word	0x0800a085

0800a118 <__sfp_lock_acquire>:
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <__sfp_lock_acquire+0x8>)
 800a11a:	f000 ba7e 	b.w	800a61a <__retarget_lock_acquire_recursive>
 800a11e:	bf00      	nop
 800a120:	20004e51 	.word	0x20004e51

0800a124 <__sfp_lock_release>:
 800a124:	4801      	ldr	r0, [pc, #4]	; (800a12c <__sfp_lock_release+0x8>)
 800a126:	f000 ba79 	b.w	800a61c <__retarget_lock_release_recursive>
 800a12a:	bf00      	nop
 800a12c:	20004e51 	.word	0x20004e51

0800a130 <__sinit>:
 800a130:	b510      	push	{r4, lr}
 800a132:	4604      	mov	r4, r0
 800a134:	f7ff fff0 	bl	800a118 <__sfp_lock_acquire>
 800a138:	6a23      	ldr	r3, [r4, #32]
 800a13a:	b11b      	cbz	r3, 800a144 <__sinit+0x14>
 800a13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a140:	f7ff bff0 	b.w	800a124 <__sfp_lock_release>
 800a144:	4b04      	ldr	r3, [pc, #16]	; (800a158 <__sinit+0x28>)
 800a146:	6223      	str	r3, [r4, #32]
 800a148:	4b04      	ldr	r3, [pc, #16]	; (800a15c <__sinit+0x2c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1f5      	bne.n	800a13c <__sinit+0xc>
 800a150:	f7ff ffc4 	bl	800a0dc <global_stdio_init.part.0>
 800a154:	e7f2      	b.n	800a13c <__sinit+0xc>
 800a156:	bf00      	nop
 800a158:	0800a09d 	.word	0x0800a09d
 800a15c:	20004e48 	.word	0x20004e48

0800a160 <_fwalk_sglue>:
 800a160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a164:	4607      	mov	r7, r0
 800a166:	4688      	mov	r8, r1
 800a168:	4614      	mov	r4, r2
 800a16a:	2600      	movs	r6, #0
 800a16c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a170:	f1b9 0901 	subs.w	r9, r9, #1
 800a174:	d505      	bpl.n	800a182 <_fwalk_sglue+0x22>
 800a176:	6824      	ldr	r4, [r4, #0]
 800a178:	2c00      	cmp	r4, #0
 800a17a:	d1f7      	bne.n	800a16c <_fwalk_sglue+0xc>
 800a17c:	4630      	mov	r0, r6
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d907      	bls.n	800a198 <_fwalk_sglue+0x38>
 800a188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a18c:	3301      	adds	r3, #1
 800a18e:	d003      	beq.n	800a198 <_fwalk_sglue+0x38>
 800a190:	4629      	mov	r1, r5
 800a192:	4638      	mov	r0, r7
 800a194:	47c0      	blx	r8
 800a196:	4306      	orrs	r6, r0
 800a198:	3568      	adds	r5, #104	; 0x68
 800a19a:	e7e9      	b.n	800a170 <_fwalk_sglue+0x10>

0800a19c <iprintf>:
 800a19c:	b40f      	push	{r0, r1, r2, r3}
 800a19e:	b507      	push	{r0, r1, r2, lr}
 800a1a0:	4906      	ldr	r1, [pc, #24]	; (800a1bc <iprintf+0x20>)
 800a1a2:	ab04      	add	r3, sp, #16
 800a1a4:	6808      	ldr	r0, [r1, #0]
 800a1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1aa:	6881      	ldr	r1, [r0, #8]
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	f001 fedb 	bl	800bf68 <_vfiprintf_r>
 800a1b2:	b003      	add	sp, #12
 800a1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b8:	b004      	add	sp, #16
 800a1ba:	4770      	bx	lr
 800a1bc:	20000074 	.word	0x20000074

0800a1c0 <_puts_r>:
 800a1c0:	6a03      	ldr	r3, [r0, #32]
 800a1c2:	b570      	push	{r4, r5, r6, lr}
 800a1c4:	6884      	ldr	r4, [r0, #8]
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	460e      	mov	r6, r1
 800a1ca:	b90b      	cbnz	r3, 800a1d0 <_puts_r+0x10>
 800a1cc:	f7ff ffb0 	bl	800a130 <__sinit>
 800a1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1d2:	07db      	lsls	r3, r3, #31
 800a1d4:	d405      	bmi.n	800a1e2 <_puts_r+0x22>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	0598      	lsls	r0, r3, #22
 800a1da:	d402      	bmi.n	800a1e2 <_puts_r+0x22>
 800a1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1de:	f000 fa1c 	bl	800a61a <__retarget_lock_acquire_recursive>
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	0719      	lsls	r1, r3, #28
 800a1e6:	d513      	bpl.n	800a210 <_puts_r+0x50>
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	b18b      	cbz	r3, 800a210 <_puts_r+0x50>
 800a1ec:	3e01      	subs	r6, #1
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	60a3      	str	r3, [r4, #8]
 800a1f8:	b9e9      	cbnz	r1, 800a236 <_puts_r+0x76>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	da2e      	bge.n	800a25c <_puts_r+0x9c>
 800a1fe:	4622      	mov	r2, r4
 800a200:	210a      	movs	r1, #10
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f89b 	bl	800a33e <__swbuf_r>
 800a208:	3001      	adds	r0, #1
 800a20a:	d007      	beq.n	800a21c <_puts_r+0x5c>
 800a20c:	250a      	movs	r5, #10
 800a20e:	e007      	b.n	800a220 <_puts_r+0x60>
 800a210:	4621      	mov	r1, r4
 800a212:	4628      	mov	r0, r5
 800a214:	f000 f8d0 	bl	800a3b8 <__swsetup_r>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d0e7      	beq.n	800a1ec <_puts_r+0x2c>
 800a21c:	f04f 35ff 	mov.w	r5, #4294967295
 800a220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a222:	07da      	lsls	r2, r3, #31
 800a224:	d405      	bmi.n	800a232 <_puts_r+0x72>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	059b      	lsls	r3, r3, #22
 800a22a:	d402      	bmi.n	800a232 <_puts_r+0x72>
 800a22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22e:	f000 f9f5 	bl	800a61c <__retarget_lock_release_recursive>
 800a232:	4628      	mov	r0, r5
 800a234:	bd70      	pop	{r4, r5, r6, pc}
 800a236:	2b00      	cmp	r3, #0
 800a238:	da04      	bge.n	800a244 <_puts_r+0x84>
 800a23a:	69a2      	ldr	r2, [r4, #24]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	dc06      	bgt.n	800a24e <_puts_r+0x8e>
 800a240:	290a      	cmp	r1, #10
 800a242:	d004      	beq.n	800a24e <_puts_r+0x8e>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	6022      	str	r2, [r4, #0]
 800a24a:	7019      	strb	r1, [r3, #0]
 800a24c:	e7cf      	b.n	800a1ee <_puts_r+0x2e>
 800a24e:	4622      	mov	r2, r4
 800a250:	4628      	mov	r0, r5
 800a252:	f000 f874 	bl	800a33e <__swbuf_r>
 800a256:	3001      	adds	r0, #1
 800a258:	d1c9      	bne.n	800a1ee <_puts_r+0x2e>
 800a25a:	e7df      	b.n	800a21c <_puts_r+0x5c>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	250a      	movs	r5, #10
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	6022      	str	r2, [r4, #0]
 800a264:	701d      	strb	r5, [r3, #0]
 800a266:	e7db      	b.n	800a220 <_puts_r+0x60>

0800a268 <puts>:
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <puts+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f7ff bfa7 	b.w	800a1c0 <_puts_r>
 800a272:	bf00      	nop
 800a274:	20000074 	.word	0x20000074

0800a278 <siprintf>:
 800a278:	b40e      	push	{r1, r2, r3}
 800a27a:	b500      	push	{lr}
 800a27c:	b09c      	sub	sp, #112	; 0x70
 800a27e:	ab1d      	add	r3, sp, #116	; 0x74
 800a280:	9002      	str	r0, [sp, #8]
 800a282:	9006      	str	r0, [sp, #24]
 800a284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a288:	4809      	ldr	r0, [pc, #36]	; (800a2b0 <siprintf+0x38>)
 800a28a:	9107      	str	r1, [sp, #28]
 800a28c:	9104      	str	r1, [sp, #16]
 800a28e:	4909      	ldr	r1, [pc, #36]	; (800a2b4 <siprintf+0x3c>)
 800a290:	f853 2b04 	ldr.w	r2, [r3], #4
 800a294:	9105      	str	r1, [sp, #20]
 800a296:	6800      	ldr	r0, [r0, #0]
 800a298:	9301      	str	r3, [sp, #4]
 800a29a:	a902      	add	r1, sp, #8
 800a29c:	f001 fd3c 	bl	800bd18 <_svfiprintf_r>
 800a2a0:	9b02      	ldr	r3, [sp, #8]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	b01c      	add	sp, #112	; 0x70
 800a2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ac:	b003      	add	sp, #12
 800a2ae:	4770      	bx	lr
 800a2b0:	20000074 	.word	0x20000074
 800a2b4:	ffff0208 	.word	0xffff0208

0800a2b8 <__sread>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c0:	f000 f95c 	bl	800a57c <_read_r>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	bfab      	itete	ge
 800a2c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a2cc:	181b      	addge	r3, r3, r0
 800a2ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2d2:	bfac      	ite	ge
 800a2d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2d6:	81a3      	strhlt	r3, [r4, #12]
 800a2d8:	bd10      	pop	{r4, pc}

0800a2da <__swrite>:
 800a2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2de:	461f      	mov	r7, r3
 800a2e0:	898b      	ldrh	r3, [r1, #12]
 800a2e2:	05db      	lsls	r3, r3, #23
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	4616      	mov	r6, r2
 800a2ea:	d505      	bpl.n	800a2f8 <__swrite+0x1e>
 800a2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f000 f930 	bl	800a558 <_lseek_r>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a302:	81a3      	strh	r3, [r4, #12]
 800a304:	4632      	mov	r2, r6
 800a306:	463b      	mov	r3, r7
 800a308:	4628      	mov	r0, r5
 800a30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a30e:	f000 b947 	b.w	800a5a0 <_write_r>

0800a312 <__sseek>:
 800a312:	b510      	push	{r4, lr}
 800a314:	460c      	mov	r4, r1
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 f91d 	bl	800a558 <_lseek_r>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	bf15      	itete	ne
 800a324:	6560      	strne	r0, [r4, #84]	; 0x54
 800a326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a32a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a32e:	81a3      	strheq	r3, [r4, #12]
 800a330:	bf18      	it	ne
 800a332:	81a3      	strhne	r3, [r4, #12]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__sclose>:
 800a336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33a:	f000 b8fd 	b.w	800a538 <_close_r>

0800a33e <__swbuf_r>:
 800a33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a340:	460e      	mov	r6, r1
 800a342:	4614      	mov	r4, r2
 800a344:	4605      	mov	r5, r0
 800a346:	b118      	cbz	r0, 800a350 <__swbuf_r+0x12>
 800a348:	6a03      	ldr	r3, [r0, #32]
 800a34a:	b90b      	cbnz	r3, 800a350 <__swbuf_r+0x12>
 800a34c:	f7ff fef0 	bl	800a130 <__sinit>
 800a350:	69a3      	ldr	r3, [r4, #24]
 800a352:	60a3      	str	r3, [r4, #8]
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	071a      	lsls	r2, r3, #28
 800a358:	d525      	bpl.n	800a3a6 <__swbuf_r+0x68>
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	b31b      	cbz	r3, 800a3a6 <__swbuf_r+0x68>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	6922      	ldr	r2, [r4, #16]
 800a362:	1a98      	subs	r0, r3, r2
 800a364:	6963      	ldr	r3, [r4, #20]
 800a366:	b2f6      	uxtb	r6, r6
 800a368:	4283      	cmp	r3, r0
 800a36a:	4637      	mov	r7, r6
 800a36c:	dc04      	bgt.n	800a378 <__swbuf_r+0x3a>
 800a36e:	4621      	mov	r1, r4
 800a370:	4628      	mov	r0, r5
 800a372:	f001 ff99 	bl	800c2a8 <_fflush_r>
 800a376:	b9e0      	cbnz	r0, 800a3b2 <__swbuf_r+0x74>
 800a378:	68a3      	ldr	r3, [r4, #8]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	60a3      	str	r3, [r4, #8]
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	6022      	str	r2, [r4, #0]
 800a384:	701e      	strb	r6, [r3, #0]
 800a386:	6962      	ldr	r2, [r4, #20]
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d004      	beq.n	800a398 <__swbuf_r+0x5a>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	07db      	lsls	r3, r3, #31
 800a392:	d506      	bpl.n	800a3a2 <__swbuf_r+0x64>
 800a394:	2e0a      	cmp	r6, #10
 800a396:	d104      	bne.n	800a3a2 <__swbuf_r+0x64>
 800a398:	4621      	mov	r1, r4
 800a39a:	4628      	mov	r0, r5
 800a39c:	f001 ff84 	bl	800c2a8 <_fflush_r>
 800a3a0:	b938      	cbnz	r0, 800a3b2 <__swbuf_r+0x74>
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f000 f805 	bl	800a3b8 <__swsetup_r>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d0d5      	beq.n	800a35e <__swbuf_r+0x20>
 800a3b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3b6:	e7f4      	b.n	800a3a2 <__swbuf_r+0x64>

0800a3b8 <__swsetup_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4b2a      	ldr	r3, [pc, #168]	; (800a464 <__swsetup_r+0xac>)
 800a3bc:	4605      	mov	r5, r0
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	b118      	cbz	r0, 800a3cc <__swsetup_r+0x14>
 800a3c4:	6a03      	ldr	r3, [r0, #32]
 800a3c6:	b90b      	cbnz	r3, 800a3cc <__swsetup_r+0x14>
 800a3c8:	f7ff feb2 	bl	800a130 <__sinit>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d2:	0718      	lsls	r0, r3, #28
 800a3d4:	d422      	bmi.n	800a41c <__swsetup_r+0x64>
 800a3d6:	06d9      	lsls	r1, r3, #27
 800a3d8:	d407      	bmi.n	800a3ea <__swsetup_r+0x32>
 800a3da:	2309      	movs	r3, #9
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e034      	b.n	800a454 <__swsetup_r+0x9c>
 800a3ea:	0758      	lsls	r0, r3, #29
 800a3ec:	d512      	bpl.n	800a414 <__swsetup_r+0x5c>
 800a3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f0:	b141      	cbz	r1, 800a404 <__swsetup_r+0x4c>
 800a3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3f6:	4299      	cmp	r1, r3
 800a3f8:	d002      	beq.n	800a400 <__swsetup_r+0x48>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 ffb6 	bl	800b36c <_free_r>
 800a400:	2300      	movs	r3, #0
 800a402:	6363      	str	r3, [r4, #52]	; 0x34
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	2300      	movs	r3, #0
 800a40e:	6063      	str	r3, [r4, #4]
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	f043 0308 	orr.w	r3, r3, #8
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	b94b      	cbnz	r3, 800a434 <__swsetup_r+0x7c>
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a42a:	d003      	beq.n	800a434 <__swsetup_r+0x7c>
 800a42c:	4621      	mov	r1, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	f001 ff9a 	bl	800c368 <__smakebuf_r>
 800a434:	89a0      	ldrh	r0, [r4, #12]
 800a436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a43a:	f010 0301 	ands.w	r3, r0, #1
 800a43e:	d00a      	beq.n	800a456 <__swsetup_r+0x9e>
 800a440:	2300      	movs	r3, #0
 800a442:	60a3      	str	r3, [r4, #8]
 800a444:	6963      	ldr	r3, [r4, #20]
 800a446:	425b      	negs	r3, r3
 800a448:	61a3      	str	r3, [r4, #24]
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	b943      	cbnz	r3, 800a460 <__swsetup_r+0xa8>
 800a44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a452:	d1c4      	bne.n	800a3de <__swsetup_r+0x26>
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	0781      	lsls	r1, r0, #30
 800a458:	bf58      	it	pl
 800a45a:	6963      	ldrpl	r3, [r4, #20]
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	e7f4      	b.n	800a44a <__swsetup_r+0x92>
 800a460:	2000      	movs	r0, #0
 800a462:	e7f7      	b.n	800a454 <__swsetup_r+0x9c>
 800a464:	20000074 	.word	0x20000074

0800a468 <memset>:
 800a468:	4402      	add	r2, r0
 800a46a:	4603      	mov	r3, r0
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d100      	bne.n	800a472 <memset+0xa>
 800a470:	4770      	bx	lr
 800a472:	f803 1b01 	strb.w	r1, [r3], #1
 800a476:	e7f9      	b.n	800a46c <memset+0x4>

0800a478 <strtok>:
 800a478:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <strtok+0x5c>)
 800a47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a47c:	681e      	ldr	r6, [r3, #0]
 800a47e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a480:	4605      	mov	r5, r0
 800a482:	b9fc      	cbnz	r4, 800a4c4 <strtok+0x4c>
 800a484:	2050      	movs	r0, #80	; 0x50
 800a486:	9101      	str	r1, [sp, #4]
 800a488:	f000 ffbc 	bl	800b404 <malloc>
 800a48c:	9901      	ldr	r1, [sp, #4]
 800a48e:	6470      	str	r0, [r6, #68]	; 0x44
 800a490:	4602      	mov	r2, r0
 800a492:	b920      	cbnz	r0, 800a49e <strtok+0x26>
 800a494:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <strtok+0x60>)
 800a496:	4811      	ldr	r0, [pc, #68]	; (800a4dc <strtok+0x64>)
 800a498:	215b      	movs	r1, #91	; 0x5b
 800a49a:	f000 f8cf 	bl	800a63c <__assert_func>
 800a49e:	e9c0 4400 	strd	r4, r4, [r0]
 800a4a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a4a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a4aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a4ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a4b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a4b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a4ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a4be:	6184      	str	r4, [r0, #24]
 800a4c0:	7704      	strb	r4, [r0, #28]
 800a4c2:	6244      	str	r4, [r0, #36]	; 0x24
 800a4c4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	b002      	add	sp, #8
 800a4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4d0:	f000 b806 	b.w	800a4e0 <__strtok_r>
 800a4d4:	20000074 	.word	0x20000074
 800a4d8:	0800cb21 	.word	0x0800cb21
 800a4dc:	0800cb38 	.word	0x0800cb38

0800a4e0 <__strtok_r>:
 800a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e2:	b908      	cbnz	r0, 800a4e8 <__strtok_r+0x8>
 800a4e4:	6810      	ldr	r0, [r2, #0]
 800a4e6:	b188      	cbz	r0, 800a50c <__strtok_r+0x2c>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a4f6:	b91e      	cbnz	r6, 800a500 <__strtok_r+0x20>
 800a4f8:	b965      	cbnz	r5, 800a514 <__strtok_r+0x34>
 800a4fa:	6015      	str	r5, [r2, #0]
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	e005      	b.n	800a50c <__strtok_r+0x2c>
 800a500:	42b5      	cmp	r5, r6
 800a502:	d1f6      	bne.n	800a4f2 <__strtok_r+0x12>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1f0      	bne.n	800a4ea <__strtok_r+0xa>
 800a508:	6014      	str	r4, [r2, #0]
 800a50a:	7003      	strb	r3, [r0, #0]
 800a50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50e:	461c      	mov	r4, r3
 800a510:	e00c      	b.n	800a52c <__strtok_r+0x4c>
 800a512:	b915      	cbnz	r5, 800a51a <__strtok_r+0x3a>
 800a514:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a518:	460e      	mov	r6, r1
 800a51a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a51e:	42ab      	cmp	r3, r5
 800a520:	d1f7      	bne.n	800a512 <__strtok_r+0x32>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f3      	beq.n	800a50e <__strtok_r+0x2e>
 800a526:	2300      	movs	r3, #0
 800a528:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a52c:	6014      	str	r4, [r2, #0]
 800a52e:	e7ed      	b.n	800a50c <__strtok_r+0x2c>

0800a530 <_localeconv_r>:
 800a530:	4800      	ldr	r0, [pc, #0]	; (800a534 <_localeconv_r+0x4>)
 800a532:	4770      	bx	lr
 800a534:	20000168 	.word	0x20000168

0800a538 <_close_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_close_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f7 ffe3 	bl	800250e <_close>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_close_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_close_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	20004e4c 	.word	0x20004e4c

0800a558 <_lseek_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d07      	ldr	r5, [pc, #28]	; (800a578 <_lseek_r+0x20>)
 800a55c:	4604      	mov	r4, r0
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	2200      	movs	r2, #0
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f7 fff8 	bl	800255c <_lseek>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_lseek_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_lseek_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	20004e4c 	.word	0x20004e4c

0800a57c <_read_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4d07      	ldr	r5, [pc, #28]	; (800a59c <_read_r+0x20>)
 800a580:	4604      	mov	r4, r0
 800a582:	4608      	mov	r0, r1
 800a584:	4611      	mov	r1, r2
 800a586:	2200      	movs	r2, #0
 800a588:	602a      	str	r2, [r5, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	f7f7 ff86 	bl	800249c <_read>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d102      	bne.n	800a59a <_read_r+0x1e>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	b103      	cbz	r3, 800a59a <_read_r+0x1e>
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	20004e4c 	.word	0x20004e4c

0800a5a0 <_write_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4d07      	ldr	r5, [pc, #28]	; (800a5c0 <_write_r+0x20>)
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	602a      	str	r2, [r5, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f7f7 ff91 	bl	80024d6 <_write>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_write_r+0x1e>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_write_r+0x1e>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20004e4c 	.word	0x20004e4c

0800a5c4 <__errno>:
 800a5c4:	4b01      	ldr	r3, [pc, #4]	; (800a5cc <__errno+0x8>)
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20000074 	.word	0x20000074

0800a5d0 <__libc_init_array>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4d0d      	ldr	r5, [pc, #52]	; (800a608 <__libc_init_array+0x38>)
 800a5d4:	4c0d      	ldr	r4, [pc, #52]	; (800a60c <__libc_init_array+0x3c>)
 800a5d6:	1b64      	subs	r4, r4, r5
 800a5d8:	10a4      	asrs	r4, r4, #2
 800a5da:	2600      	movs	r6, #0
 800a5dc:	42a6      	cmp	r6, r4
 800a5de:	d109      	bne.n	800a5f4 <__libc_init_array+0x24>
 800a5e0:	4d0b      	ldr	r5, [pc, #44]	; (800a610 <__libc_init_array+0x40>)
 800a5e2:	4c0c      	ldr	r4, [pc, #48]	; (800a614 <__libc_init_array+0x44>)
 800a5e4:	f002 f800 	bl	800c5e8 <_init>
 800a5e8:	1b64      	subs	r4, r4, r5
 800a5ea:	10a4      	asrs	r4, r4, #2
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	42a6      	cmp	r6, r4
 800a5f0:	d105      	bne.n	800a5fe <__libc_init_array+0x2e>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f8:	4798      	blx	r3
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7ee      	b.n	800a5dc <__libc_init_array+0xc>
 800a5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a602:	4798      	blx	r3
 800a604:	3601      	adds	r6, #1
 800a606:	e7f2      	b.n	800a5ee <__libc_init_array+0x1e>
 800a608:	0800cdc0 	.word	0x0800cdc0
 800a60c:	0800cdc0 	.word	0x0800cdc0
 800a610:	0800cdc0 	.word	0x0800cdc0
 800a614:	0800cdc4 	.word	0x0800cdc4

0800a618 <__retarget_lock_init_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_acquire_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <__retarget_lock_release_recursive>:
 800a61c:	4770      	bx	lr

0800a61e <memcpy>:
 800a61e:	440a      	add	r2, r1
 800a620:	4291      	cmp	r1, r2
 800a622:	f100 33ff 	add.w	r3, r0, #4294967295
 800a626:	d100      	bne.n	800a62a <memcpy+0xc>
 800a628:	4770      	bx	lr
 800a62a:	b510      	push	{r4, lr}
 800a62c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a630:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a634:	4291      	cmp	r1, r2
 800a636:	d1f9      	bne.n	800a62c <memcpy+0xe>
 800a638:	bd10      	pop	{r4, pc}
	...

0800a63c <__assert_func>:
 800a63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a63e:	4614      	mov	r4, r2
 800a640:	461a      	mov	r2, r3
 800a642:	4b09      	ldr	r3, [pc, #36]	; (800a668 <__assert_func+0x2c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4605      	mov	r5, r0
 800a648:	68d8      	ldr	r0, [r3, #12]
 800a64a:	b14c      	cbz	r4, 800a660 <__assert_func+0x24>
 800a64c:	4b07      	ldr	r3, [pc, #28]	; (800a66c <__assert_func+0x30>)
 800a64e:	9100      	str	r1, [sp, #0]
 800a650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a654:	4906      	ldr	r1, [pc, #24]	; (800a670 <__assert_func+0x34>)
 800a656:	462b      	mov	r3, r5
 800a658:	f001 fe4e 	bl	800c2f8 <fiprintf>
 800a65c:	f001 ff0c 	bl	800c478 <abort>
 800a660:	4b04      	ldr	r3, [pc, #16]	; (800a674 <__assert_func+0x38>)
 800a662:	461c      	mov	r4, r3
 800a664:	e7f3      	b.n	800a64e <__assert_func+0x12>
 800a666:	bf00      	nop
 800a668:	20000074 	.word	0x20000074
 800a66c:	0800cb92 	.word	0x0800cb92
 800a670:	0800cb9f 	.word	0x0800cb9f
 800a674:	0800cbcd 	.word	0x0800cbcd

0800a678 <quorem>:
 800a678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	6903      	ldr	r3, [r0, #16]
 800a67e:	690c      	ldr	r4, [r1, #16]
 800a680:	42a3      	cmp	r3, r4
 800a682:	4607      	mov	r7, r0
 800a684:	db7e      	blt.n	800a784 <quorem+0x10c>
 800a686:	3c01      	subs	r4, #1
 800a688:	f101 0814 	add.w	r8, r1, #20
 800a68c:	f100 0514 	add.w	r5, r0, #20
 800a690:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a69a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6ae:	d331      	bcc.n	800a714 <quorem+0x9c>
 800a6b0:	f04f 0e00 	mov.w	lr, #0
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	46ac      	mov	ip, r5
 800a6b8:	46f2      	mov	sl, lr
 800a6ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6be:	b293      	uxth	r3, r2
 800a6c0:	fb06 e303 	mla	r3, r6, r3, lr
 800a6c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6c8:	0c1a      	lsrs	r2, r3, #16
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	ebaa 0303 	sub.w	r3, sl, r3
 800a6d0:	f8dc a000 	ldr.w	sl, [ip]
 800a6d4:	fa13 f38a 	uxtah	r3, r3, sl
 800a6d8:	fb06 220e 	mla	r2, r6, lr, r2
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6e4:	b292      	uxth	r2, r2
 800a6e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6ee:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6f2:	4581      	cmp	r9, r0
 800a6f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f8:	f84c 3b04 	str.w	r3, [ip], #4
 800a6fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a700:	d2db      	bcs.n	800a6ba <quorem+0x42>
 800a702:	f855 300b 	ldr.w	r3, [r5, fp]
 800a706:	b92b      	cbnz	r3, 800a714 <quorem+0x9c>
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	3b04      	subs	r3, #4
 800a70c:	429d      	cmp	r5, r3
 800a70e:	461a      	mov	r2, r3
 800a710:	d32c      	bcc.n	800a76c <quorem+0xf4>
 800a712:	613c      	str	r4, [r7, #16]
 800a714:	4638      	mov	r0, r7
 800a716:	f001 f9a5 	bl	800ba64 <__mcmp>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	db22      	blt.n	800a764 <quorem+0xec>
 800a71e:	3601      	adds	r6, #1
 800a720:	4629      	mov	r1, r5
 800a722:	2000      	movs	r0, #0
 800a724:	f858 2b04 	ldr.w	r2, [r8], #4
 800a728:	f8d1 c000 	ldr.w	ip, [r1]
 800a72c:	b293      	uxth	r3, r2
 800a72e:	1ac3      	subs	r3, r0, r3
 800a730:	0c12      	lsrs	r2, r2, #16
 800a732:	fa13 f38c 	uxtah	r3, r3, ip
 800a736:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a73a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a73e:	b29b      	uxth	r3, r3
 800a740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a744:	45c1      	cmp	r9, r8
 800a746:	f841 3b04 	str.w	r3, [r1], #4
 800a74a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a74e:	d2e9      	bcs.n	800a724 <quorem+0xac>
 800a750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a754:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a758:	b922      	cbnz	r2, 800a764 <quorem+0xec>
 800a75a:	3b04      	subs	r3, #4
 800a75c:	429d      	cmp	r5, r3
 800a75e:	461a      	mov	r2, r3
 800a760:	d30a      	bcc.n	800a778 <quorem+0x100>
 800a762:	613c      	str	r4, [r7, #16]
 800a764:	4630      	mov	r0, r6
 800a766:	b003      	add	sp, #12
 800a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	3b04      	subs	r3, #4
 800a770:	2a00      	cmp	r2, #0
 800a772:	d1ce      	bne.n	800a712 <quorem+0x9a>
 800a774:	3c01      	subs	r4, #1
 800a776:	e7c9      	b.n	800a70c <quorem+0x94>
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	3b04      	subs	r3, #4
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d1f0      	bne.n	800a762 <quorem+0xea>
 800a780:	3c01      	subs	r4, #1
 800a782:	e7eb      	b.n	800a75c <quorem+0xe4>
 800a784:	2000      	movs	r0, #0
 800a786:	e7ee      	b.n	800a766 <quorem+0xee>

0800a788 <_dtoa_r>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	ed2d 8b04 	vpush	{d8-d9}
 800a790:	69c5      	ldr	r5, [r0, #28]
 800a792:	b093      	sub	sp, #76	; 0x4c
 800a794:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a798:	ec57 6b10 	vmov	r6, r7, d0
 800a79c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7a0:	9107      	str	r1, [sp, #28]
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a7a6:	930d      	str	r3, [sp, #52]	; 0x34
 800a7a8:	b975      	cbnz	r5, 800a7c8 <_dtoa_r+0x40>
 800a7aa:	2010      	movs	r0, #16
 800a7ac:	f000 fe2a 	bl	800b404 <malloc>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	61e0      	str	r0, [r4, #28]
 800a7b4:	b920      	cbnz	r0, 800a7c0 <_dtoa_r+0x38>
 800a7b6:	4bae      	ldr	r3, [pc, #696]	; (800aa70 <_dtoa_r+0x2e8>)
 800a7b8:	21ef      	movs	r1, #239	; 0xef
 800a7ba:	48ae      	ldr	r0, [pc, #696]	; (800aa74 <_dtoa_r+0x2ec>)
 800a7bc:	f7ff ff3e 	bl	800a63c <__assert_func>
 800a7c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7c4:	6005      	str	r5, [r0, #0]
 800a7c6:	60c5      	str	r5, [r0, #12]
 800a7c8:	69e3      	ldr	r3, [r4, #28]
 800a7ca:	6819      	ldr	r1, [r3, #0]
 800a7cc:	b151      	cbz	r1, 800a7e4 <_dtoa_r+0x5c>
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	604a      	str	r2, [r1, #4]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4093      	lsls	r3, r2
 800a7d6:	608b      	str	r3, [r1, #8]
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 ff07 	bl	800b5ec <_Bfree>
 800a7de:	69e3      	ldr	r3, [r4, #28]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	1e3b      	subs	r3, r7, #0
 800a7e6:	bfbb      	ittet	lt
 800a7e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7ec:	9303      	strlt	r3, [sp, #12]
 800a7ee:	2300      	movge	r3, #0
 800a7f0:	2201      	movlt	r2, #1
 800a7f2:	bfac      	ite	ge
 800a7f4:	f8c8 3000 	strge.w	r3, [r8]
 800a7f8:	f8c8 2000 	strlt.w	r2, [r8]
 800a7fc:	4b9e      	ldr	r3, [pc, #632]	; (800aa78 <_dtoa_r+0x2f0>)
 800a7fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a802:	ea33 0308 	bics.w	r3, r3, r8
 800a806:	d11b      	bne.n	800a840 <_dtoa_r+0xb8>
 800a808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a80a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a814:	4333      	orrs	r3, r6
 800a816:	f000 8593 	beq.w	800b340 <_dtoa_r+0xbb8>
 800a81a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a81c:	b963      	cbnz	r3, 800a838 <_dtoa_r+0xb0>
 800a81e:	4b97      	ldr	r3, [pc, #604]	; (800aa7c <_dtoa_r+0x2f4>)
 800a820:	e027      	b.n	800a872 <_dtoa_r+0xea>
 800a822:	4b97      	ldr	r3, [pc, #604]	; (800aa80 <_dtoa_r+0x2f8>)
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	9800      	ldr	r0, [sp, #0]
 800a82e:	b013      	add	sp, #76	; 0x4c
 800a830:	ecbd 8b04 	vpop	{d8-d9}
 800a834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a838:	4b90      	ldr	r3, [pc, #576]	; (800aa7c <_dtoa_r+0x2f4>)
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	3303      	adds	r3, #3
 800a83e:	e7f3      	b.n	800a828 <_dtoa_r+0xa0>
 800a840:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a844:	2200      	movs	r2, #0
 800a846:	ec51 0b17 	vmov	r0, r1, d7
 800a84a:	eeb0 8a47 	vmov.f32	s16, s14
 800a84e:	eef0 8a67 	vmov.f32	s17, s15
 800a852:	2300      	movs	r3, #0
 800a854:	f7f6 f950 	bl	8000af8 <__aeabi_dcmpeq>
 800a858:	4681      	mov	r9, r0
 800a85a:	b160      	cbz	r0, 800a876 <_dtoa_r+0xee>
 800a85c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a85e:	2301      	movs	r3, #1
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 8568 	beq.w	800b33a <_dtoa_r+0xbb2>
 800a86a:	4b86      	ldr	r3, [pc, #536]	; (800aa84 <_dtoa_r+0x2fc>)
 800a86c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	3b01      	subs	r3, #1
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	e7da      	b.n	800a82c <_dtoa_r+0xa4>
 800a876:	aa10      	add	r2, sp, #64	; 0x40
 800a878:	a911      	add	r1, sp, #68	; 0x44
 800a87a:	4620      	mov	r0, r4
 800a87c:	eeb0 0a48 	vmov.f32	s0, s16
 800a880:	eef0 0a68 	vmov.f32	s1, s17
 800a884:	f001 f994 	bl	800bbb0 <__d2b>
 800a888:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a88c:	4682      	mov	sl, r0
 800a88e:	2d00      	cmp	r5, #0
 800a890:	d07f      	beq.n	800a992 <_dtoa_r+0x20a>
 800a892:	ee18 3a90 	vmov	r3, s17
 800a896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a89a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a89e:	ec51 0b18 	vmov	r0, r1, d8
 800a8a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4b75      	ldr	r3, [pc, #468]	; (800aa88 <_dtoa_r+0x300>)
 800a8b4:	f7f5 fd00 	bl	80002b8 <__aeabi_dsub>
 800a8b8:	a367      	add	r3, pc, #412	; (adr r3, 800aa58 <_dtoa_r+0x2d0>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 feb3 	bl	8000628 <__aeabi_dmul>
 800a8c2:	a367      	add	r3, pc, #412	; (adr r3, 800aa60 <_dtoa_r+0x2d8>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fcf8 	bl	80002bc <__adddf3>
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	f7f5 fe3f 	bl	8000554 <__aeabi_i2d>
 800a8d6:	a364      	add	r3, pc, #400	; (adr r3, 800aa68 <_dtoa_r+0x2e0>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 fea4 	bl	8000628 <__aeabi_dmul>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	f7f5 fce8 	bl	80002bc <__adddf3>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	f7f6 f94a 	bl	8000b88 <__aeabi_d2iz>
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4683      	mov	fp, r0
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	f7f6 f905 	bl	8000b0c <__aeabi_dcmplt>
 800a902:	b148      	cbz	r0, 800a918 <_dtoa_r+0x190>
 800a904:	4658      	mov	r0, fp
 800a906:	f7f5 fe25 	bl	8000554 <__aeabi_i2d>
 800a90a:	4632      	mov	r2, r6
 800a90c:	463b      	mov	r3, r7
 800a90e:	f7f6 f8f3 	bl	8000af8 <__aeabi_dcmpeq>
 800a912:	b908      	cbnz	r0, 800a918 <_dtoa_r+0x190>
 800a914:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a918:	f1bb 0f16 	cmp.w	fp, #22
 800a91c:	d857      	bhi.n	800a9ce <_dtoa_r+0x246>
 800a91e:	4b5b      	ldr	r3, [pc, #364]	; (800aa8c <_dtoa_r+0x304>)
 800a920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	ec51 0b18 	vmov	r0, r1, d8
 800a92c:	f7f6 f8ee 	bl	8000b0c <__aeabi_dcmplt>
 800a930:	2800      	cmp	r0, #0
 800a932:	d04e      	beq.n	800a9d2 <_dtoa_r+0x24a>
 800a934:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a938:	2300      	movs	r3, #0
 800a93a:	930c      	str	r3, [sp, #48]	; 0x30
 800a93c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a93e:	1b5b      	subs	r3, r3, r5
 800a940:	1e5a      	subs	r2, r3, #1
 800a942:	bf45      	ittet	mi
 800a944:	f1c3 0301 	rsbmi	r3, r3, #1
 800a948:	9305      	strmi	r3, [sp, #20]
 800a94a:	2300      	movpl	r3, #0
 800a94c:	2300      	movmi	r3, #0
 800a94e:	9206      	str	r2, [sp, #24]
 800a950:	bf54      	ite	pl
 800a952:	9305      	strpl	r3, [sp, #20]
 800a954:	9306      	strmi	r3, [sp, #24]
 800a956:	f1bb 0f00 	cmp.w	fp, #0
 800a95a:	db3c      	blt.n	800a9d6 <_dtoa_r+0x24e>
 800a95c:	9b06      	ldr	r3, [sp, #24]
 800a95e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a962:	445b      	add	r3, fp
 800a964:	9306      	str	r3, [sp, #24]
 800a966:	2300      	movs	r3, #0
 800a968:	9308      	str	r3, [sp, #32]
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	2b09      	cmp	r3, #9
 800a96e:	d868      	bhi.n	800aa42 <_dtoa_r+0x2ba>
 800a970:	2b05      	cmp	r3, #5
 800a972:	bfc4      	itt	gt
 800a974:	3b04      	subgt	r3, #4
 800a976:	9307      	strgt	r3, [sp, #28]
 800a978:	9b07      	ldr	r3, [sp, #28]
 800a97a:	f1a3 0302 	sub.w	r3, r3, #2
 800a97e:	bfcc      	ite	gt
 800a980:	2500      	movgt	r5, #0
 800a982:	2501      	movle	r5, #1
 800a984:	2b03      	cmp	r3, #3
 800a986:	f200 8085 	bhi.w	800aa94 <_dtoa_r+0x30c>
 800a98a:	e8df f003 	tbb	[pc, r3]
 800a98e:	3b2e      	.short	0x3b2e
 800a990:	5839      	.short	0x5839
 800a992:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a996:	441d      	add	r5, r3
 800a998:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	bfc1      	itttt	gt
 800a9a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a9ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a9b0:	bfd6      	itet	le
 800a9b2:	f1c3 0320 	rsble	r3, r3, #32
 800a9b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a9ba:	fa06 f003 	lslle.w	r0, r6, r3
 800a9be:	f7f5 fdb9 	bl	8000534 <__aeabi_ui2d>
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a9c8:	3d01      	subs	r5, #1
 800a9ca:	920e      	str	r2, [sp, #56]	; 0x38
 800a9cc:	e76f      	b.n	800a8ae <_dtoa_r+0x126>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7b3      	b.n	800a93a <_dtoa_r+0x1b2>
 800a9d2:	900c      	str	r0, [sp, #48]	; 0x30
 800a9d4:	e7b2      	b.n	800a93c <_dtoa_r+0x1b4>
 800a9d6:	9b05      	ldr	r3, [sp, #20]
 800a9d8:	eba3 030b 	sub.w	r3, r3, fp
 800a9dc:	9305      	str	r3, [sp, #20]
 800a9de:	f1cb 0300 	rsb	r3, fp, #0
 800a9e2:	9308      	str	r3, [sp, #32]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9e8:	e7bf      	b.n	800a96a <_dtoa_r+0x1e2>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc52      	bgt.n	800aa9a <_dtoa_r+0x312>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	9304      	str	r3, [sp, #16]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	920a      	str	r2, [sp, #40]	; 0x28
 800a9fe:	e00b      	b.n	800aa18 <_dtoa_r+0x290>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e7f3      	b.n	800a9ec <_dtoa_r+0x264>
 800aa04:	2300      	movs	r3, #0
 800aa06:	9309      	str	r3, [sp, #36]	; 0x24
 800aa08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0a:	445b      	add	r3, fp
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	bfb8      	it	lt
 800aa16:	2301      	movlt	r3, #1
 800aa18:	69e0      	ldr	r0, [r4, #28]
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	f102 0614 	add.w	r6, r2, #20
 800aa22:	429e      	cmp	r6, r3
 800aa24:	d93d      	bls.n	800aaa2 <_dtoa_r+0x31a>
 800aa26:	6041      	str	r1, [r0, #4]
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 fd9f 	bl	800b56c <_Balloc>
 800aa2e:	9000      	str	r0, [sp, #0]
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d139      	bne.n	800aaa8 <_dtoa_r+0x320>
 800aa34:	4b16      	ldr	r3, [pc, #88]	; (800aa90 <_dtoa_r+0x308>)
 800aa36:	4602      	mov	r2, r0
 800aa38:	f240 11af 	movw	r1, #431	; 0x1af
 800aa3c:	e6bd      	b.n	800a7ba <_dtoa_r+0x32>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e7e1      	b.n	800aa06 <_dtoa_r+0x27e>
 800aa42:	2501      	movs	r5, #1
 800aa44:	2300      	movs	r3, #0
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	9509      	str	r5, [sp, #36]	; 0x24
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	2200      	movs	r2, #0
 800aa54:	2312      	movs	r3, #18
 800aa56:	e7d1      	b.n	800a9fc <_dtoa_r+0x274>
 800aa58:	636f4361 	.word	0x636f4361
 800aa5c:	3fd287a7 	.word	0x3fd287a7
 800aa60:	8b60c8b3 	.word	0x8b60c8b3
 800aa64:	3fc68a28 	.word	0x3fc68a28
 800aa68:	509f79fb 	.word	0x509f79fb
 800aa6c:	3fd34413 	.word	0x3fd34413
 800aa70:	0800cb21 	.word	0x0800cb21
 800aa74:	0800cbdb 	.word	0x0800cbdb
 800aa78:	7ff00000 	.word	0x7ff00000
 800aa7c:	0800cbd7 	.word	0x0800cbd7
 800aa80:	0800cbce 	.word	0x0800cbce
 800aa84:	0800cafe 	.word	0x0800cafe
 800aa88:	3ff80000 	.word	0x3ff80000
 800aa8c:	0800ccc8 	.word	0x0800ccc8
 800aa90:	0800cc33 	.word	0x0800cc33
 800aa94:	2301      	movs	r3, #1
 800aa96:	9309      	str	r3, [sp, #36]	; 0x24
 800aa98:	e7d7      	b.n	800aa4a <_dtoa_r+0x2c2>
 800aa9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	e7ba      	b.n	800aa18 <_dtoa_r+0x290>
 800aaa2:	3101      	adds	r1, #1
 800aaa4:	0052      	lsls	r2, r2, #1
 800aaa6:	e7ba      	b.n	800aa1e <_dtoa_r+0x296>
 800aaa8:	69e3      	ldr	r3, [r4, #28]
 800aaaa:	9a00      	ldr	r2, [sp, #0]
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	9b04      	ldr	r3, [sp, #16]
 800aab0:	2b0e      	cmp	r3, #14
 800aab2:	f200 80a8 	bhi.w	800ac06 <_dtoa_r+0x47e>
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	f000 80a5 	beq.w	800ac06 <_dtoa_r+0x47e>
 800aabc:	f1bb 0f00 	cmp.w	fp, #0
 800aac0:	dd38      	ble.n	800ab34 <_dtoa_r+0x3ac>
 800aac2:	4bc0      	ldr	r3, [pc, #768]	; (800adc4 <_dtoa_r+0x63c>)
 800aac4:	f00b 020f 	and.w	r2, fp, #15
 800aac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aacc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aad0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aad4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aad8:	d019      	beq.n	800ab0e <_dtoa_r+0x386>
 800aada:	4bbb      	ldr	r3, [pc, #748]	; (800adc8 <_dtoa_r+0x640>)
 800aadc:	ec51 0b18 	vmov	r0, r1, d8
 800aae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aae4:	f7f5 feca 	bl	800087c <__aeabi_ddiv>
 800aae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaec:	f008 080f 	and.w	r8, r8, #15
 800aaf0:	2503      	movs	r5, #3
 800aaf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800adc8 <_dtoa_r+0x640>
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	d10a      	bne.n	800ab12 <_dtoa_r+0x38a>
 800aafc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab00:	4632      	mov	r2, r6
 800ab02:	463b      	mov	r3, r7
 800ab04:	f7f5 feba 	bl	800087c <__aeabi_ddiv>
 800ab08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0c:	e02b      	b.n	800ab66 <_dtoa_r+0x3de>
 800ab0e:	2502      	movs	r5, #2
 800ab10:	e7ef      	b.n	800aaf2 <_dtoa_r+0x36a>
 800ab12:	f018 0f01 	tst.w	r8, #1
 800ab16:	d008      	beq.n	800ab2a <_dtoa_r+0x3a2>
 800ab18:	4630      	mov	r0, r6
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab20:	f7f5 fd82 	bl	8000628 <__aeabi_dmul>
 800ab24:	3501      	adds	r5, #1
 800ab26:	4606      	mov	r6, r0
 800ab28:	460f      	mov	r7, r1
 800ab2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab2e:	f109 0908 	add.w	r9, r9, #8
 800ab32:	e7e0      	b.n	800aaf6 <_dtoa_r+0x36e>
 800ab34:	f000 809f 	beq.w	800ac76 <_dtoa_r+0x4ee>
 800ab38:	f1cb 0600 	rsb	r6, fp, #0
 800ab3c:	4ba1      	ldr	r3, [pc, #644]	; (800adc4 <_dtoa_r+0x63c>)
 800ab3e:	4fa2      	ldr	r7, [pc, #648]	; (800adc8 <_dtoa_r+0x640>)
 800ab40:	f006 020f 	and.w	r2, r6, #15
 800ab44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	ec51 0b18 	vmov	r0, r1, d8
 800ab50:	f7f5 fd6a 	bl	8000628 <__aeabi_dmul>
 800ab54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab58:	1136      	asrs	r6, r6, #4
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2502      	movs	r5, #2
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d17e      	bne.n	800ac60 <_dtoa_r+0x4d8>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1d0      	bne.n	800ab08 <_dtoa_r+0x380>
 800ab66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 8084 	beq.w	800ac7a <_dtoa_r+0x4f2>
 800ab72:	4b96      	ldr	r3, [pc, #600]	; (800adcc <_dtoa_r+0x644>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	4640      	mov	r0, r8
 800ab78:	4649      	mov	r1, r9
 800ab7a:	f7f5 ffc7 	bl	8000b0c <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d07b      	beq.n	800ac7a <_dtoa_r+0x4f2>
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d078      	beq.n	800ac7a <_dtoa_r+0x4f2>
 800ab88:	9b01      	ldr	r3, [sp, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dd39      	ble.n	800ac02 <_dtoa_r+0x47a>
 800ab8e:	4b90      	ldr	r3, [pc, #576]	; (800add0 <_dtoa_r+0x648>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	f7f5 fd47 	bl	8000628 <__aeabi_dmul>
 800ab9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab9e:	9e01      	ldr	r6, [sp, #4]
 800aba0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800aba4:	3501      	adds	r5, #1
 800aba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abaa:	4628      	mov	r0, r5
 800abac:	f7f5 fcd2 	bl	8000554 <__aeabi_i2d>
 800abb0:	4642      	mov	r2, r8
 800abb2:	464b      	mov	r3, r9
 800abb4:	f7f5 fd38 	bl	8000628 <__aeabi_dmul>
 800abb8:	4b86      	ldr	r3, [pc, #536]	; (800add4 <_dtoa_r+0x64c>)
 800abba:	2200      	movs	r2, #0
 800abbc:	f7f5 fb7e 	bl	80002bc <__adddf3>
 800abc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800abc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc8:	9303      	str	r3, [sp, #12]
 800abca:	2e00      	cmp	r6, #0
 800abcc:	d158      	bne.n	800ac80 <_dtoa_r+0x4f8>
 800abce:	4b82      	ldr	r3, [pc, #520]	; (800add8 <_dtoa_r+0x650>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	4640      	mov	r0, r8
 800abd4:	4649      	mov	r1, r9
 800abd6:	f7f5 fb6f 	bl	80002b8 <__aeabi_dsub>
 800abda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abde:	4680      	mov	r8, r0
 800abe0:	4689      	mov	r9, r1
 800abe2:	f7f5 ffb1 	bl	8000b48 <__aeabi_dcmpgt>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f040 8296 	bne.w	800b118 <_dtoa_r+0x990>
 800abec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abf0:	4640      	mov	r0, r8
 800abf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 ff88 	bl	8000b0c <__aeabi_dcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	f040 8289 	bne.w	800b114 <_dtoa_r+0x98c>
 800ac02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f2c0 814e 	blt.w	800aeaa <_dtoa_r+0x722>
 800ac0e:	f1bb 0f0e 	cmp.w	fp, #14
 800ac12:	f300 814a 	bgt.w	800aeaa <_dtoa_r+0x722>
 800ac16:	4b6b      	ldr	r3, [pc, #428]	; (800adc4 <_dtoa_r+0x63c>)
 800ac18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f280 80dc 	bge.w	800ade0 <_dtoa_r+0x658>
 800ac28:	9b04      	ldr	r3, [sp, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f300 80d8 	bgt.w	800ade0 <_dtoa_r+0x658>
 800ac30:	f040 826f 	bne.w	800b112 <_dtoa_r+0x98a>
 800ac34:	4b68      	ldr	r3, [pc, #416]	; (800add8 <_dtoa_r+0x650>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	4640      	mov	r0, r8
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	f7f5 fcf4 	bl	8000628 <__aeabi_dmul>
 800ac40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac44:	f7f5 ff76 	bl	8000b34 <__aeabi_dcmpge>
 800ac48:	9e04      	ldr	r6, [sp, #16]
 800ac4a:	4637      	mov	r7, r6
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	f040 8245 	bne.w	800b0dc <_dtoa_r+0x954>
 800ac52:	9d00      	ldr	r5, [sp, #0]
 800ac54:	2331      	movs	r3, #49	; 0x31
 800ac56:	f805 3b01 	strb.w	r3, [r5], #1
 800ac5a:	f10b 0b01 	add.w	fp, fp, #1
 800ac5e:	e241      	b.n	800b0e4 <_dtoa_r+0x95c>
 800ac60:	07f2      	lsls	r2, r6, #31
 800ac62:	d505      	bpl.n	800ac70 <_dtoa_r+0x4e8>
 800ac64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac68:	f7f5 fcde 	bl	8000628 <__aeabi_dmul>
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	2301      	movs	r3, #1
 800ac70:	1076      	asrs	r6, r6, #1
 800ac72:	3708      	adds	r7, #8
 800ac74:	e773      	b.n	800ab5e <_dtoa_r+0x3d6>
 800ac76:	2502      	movs	r5, #2
 800ac78:	e775      	b.n	800ab66 <_dtoa_r+0x3de>
 800ac7a:	9e04      	ldr	r6, [sp, #16]
 800ac7c:	465f      	mov	r7, fp
 800ac7e:	e792      	b.n	800aba6 <_dtoa_r+0x41e>
 800ac80:	9900      	ldr	r1, [sp, #0]
 800ac82:	4b50      	ldr	r3, [pc, #320]	; (800adc4 <_dtoa_r+0x63c>)
 800ac84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac88:	4431      	add	r1, r6
 800ac8a:	9102      	str	r1, [sp, #8]
 800ac8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac8e:	eeb0 9a47 	vmov.f32	s18, s14
 800ac92:	eef0 9a67 	vmov.f32	s19, s15
 800ac96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac9e:	2900      	cmp	r1, #0
 800aca0:	d044      	beq.n	800ad2c <_dtoa_r+0x5a4>
 800aca2:	494e      	ldr	r1, [pc, #312]	; (800addc <_dtoa_r+0x654>)
 800aca4:	2000      	movs	r0, #0
 800aca6:	f7f5 fde9 	bl	800087c <__aeabi_ddiv>
 800acaa:	ec53 2b19 	vmov	r2, r3, d9
 800acae:	f7f5 fb03 	bl	80002b8 <__aeabi_dsub>
 800acb2:	9d00      	ldr	r5, [sp, #0]
 800acb4:	ec41 0b19 	vmov	d9, r0, r1
 800acb8:	4649      	mov	r1, r9
 800acba:	4640      	mov	r0, r8
 800acbc:	f7f5 ff64 	bl	8000b88 <__aeabi_d2iz>
 800acc0:	4606      	mov	r6, r0
 800acc2:	f7f5 fc47 	bl	8000554 <__aeabi_i2d>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4640      	mov	r0, r8
 800accc:	4649      	mov	r1, r9
 800acce:	f7f5 faf3 	bl	80002b8 <__aeabi_dsub>
 800acd2:	3630      	adds	r6, #48	; 0x30
 800acd4:	f805 6b01 	strb.w	r6, [r5], #1
 800acd8:	ec53 2b19 	vmov	r2, r3, d9
 800acdc:	4680      	mov	r8, r0
 800acde:	4689      	mov	r9, r1
 800ace0:	f7f5 ff14 	bl	8000b0c <__aeabi_dcmplt>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d164      	bne.n	800adb2 <_dtoa_r+0x62a>
 800ace8:	4642      	mov	r2, r8
 800acea:	464b      	mov	r3, r9
 800acec:	4937      	ldr	r1, [pc, #220]	; (800adcc <_dtoa_r+0x644>)
 800acee:	2000      	movs	r0, #0
 800acf0:	f7f5 fae2 	bl	80002b8 <__aeabi_dsub>
 800acf4:	ec53 2b19 	vmov	r2, r3, d9
 800acf8:	f7f5 ff08 	bl	8000b0c <__aeabi_dcmplt>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f040 80b6 	bne.w	800ae6e <_dtoa_r+0x6e6>
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	429d      	cmp	r5, r3
 800ad06:	f43f af7c 	beq.w	800ac02 <_dtoa_r+0x47a>
 800ad0a:	4b31      	ldr	r3, [pc, #196]	; (800add0 <_dtoa_r+0x648>)
 800ad0c:	ec51 0b19 	vmov	r0, r1, d9
 800ad10:	2200      	movs	r2, #0
 800ad12:	f7f5 fc89 	bl	8000628 <__aeabi_dmul>
 800ad16:	4b2e      	ldr	r3, [pc, #184]	; (800add0 <_dtoa_r+0x648>)
 800ad18:	ec41 0b19 	vmov	d9, r0, r1
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4640      	mov	r0, r8
 800ad20:	4649      	mov	r1, r9
 800ad22:	f7f5 fc81 	bl	8000628 <__aeabi_dmul>
 800ad26:	4680      	mov	r8, r0
 800ad28:	4689      	mov	r9, r1
 800ad2a:	e7c5      	b.n	800acb8 <_dtoa_r+0x530>
 800ad2c:	ec51 0b17 	vmov	r0, r1, d7
 800ad30:	f7f5 fc7a 	bl	8000628 <__aeabi_dmul>
 800ad34:	9b02      	ldr	r3, [sp, #8]
 800ad36:	9d00      	ldr	r5, [sp, #0]
 800ad38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad3a:	ec41 0b19 	vmov	d9, r0, r1
 800ad3e:	4649      	mov	r1, r9
 800ad40:	4640      	mov	r0, r8
 800ad42:	f7f5 ff21 	bl	8000b88 <__aeabi_d2iz>
 800ad46:	4606      	mov	r6, r0
 800ad48:	f7f5 fc04 	bl	8000554 <__aeabi_i2d>
 800ad4c:	3630      	adds	r6, #48	; 0x30
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4640      	mov	r0, r8
 800ad54:	4649      	mov	r1, r9
 800ad56:	f7f5 faaf 	bl	80002b8 <__aeabi_dsub>
 800ad5a:	f805 6b01 	strb.w	r6, [r5], #1
 800ad5e:	9b02      	ldr	r3, [sp, #8]
 800ad60:	429d      	cmp	r5, r3
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
 800ad66:	f04f 0200 	mov.w	r2, #0
 800ad6a:	d124      	bne.n	800adb6 <_dtoa_r+0x62e>
 800ad6c:	4b1b      	ldr	r3, [pc, #108]	; (800addc <_dtoa_r+0x654>)
 800ad6e:	ec51 0b19 	vmov	r0, r1, d9
 800ad72:	f7f5 faa3 	bl	80002bc <__adddf3>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 fee3 	bl	8000b48 <__aeabi_dcmpgt>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d173      	bne.n	800ae6e <_dtoa_r+0x6e6>
 800ad86:	ec53 2b19 	vmov	r2, r3, d9
 800ad8a:	4914      	ldr	r1, [pc, #80]	; (800addc <_dtoa_r+0x654>)
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f7f5 fa93 	bl	80002b8 <__aeabi_dsub>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4640      	mov	r0, r8
 800ad98:	4649      	mov	r1, r9
 800ad9a:	f7f5 feb7 	bl	8000b0c <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f43f af2f 	beq.w	800ac02 <_dtoa_r+0x47a>
 800ada4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ada6:	1e6b      	subs	r3, r5, #1
 800ada8:	930f      	str	r3, [sp, #60]	; 0x3c
 800adaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adae:	2b30      	cmp	r3, #48	; 0x30
 800adb0:	d0f8      	beq.n	800ada4 <_dtoa_r+0x61c>
 800adb2:	46bb      	mov	fp, r7
 800adb4:	e04a      	b.n	800ae4c <_dtoa_r+0x6c4>
 800adb6:	4b06      	ldr	r3, [pc, #24]	; (800add0 <_dtoa_r+0x648>)
 800adb8:	f7f5 fc36 	bl	8000628 <__aeabi_dmul>
 800adbc:	4680      	mov	r8, r0
 800adbe:	4689      	mov	r9, r1
 800adc0:	e7bd      	b.n	800ad3e <_dtoa_r+0x5b6>
 800adc2:	bf00      	nop
 800adc4:	0800ccc8 	.word	0x0800ccc8
 800adc8:	0800cca0 	.word	0x0800cca0
 800adcc:	3ff00000 	.word	0x3ff00000
 800add0:	40240000 	.word	0x40240000
 800add4:	401c0000 	.word	0x401c0000
 800add8:	40140000 	.word	0x40140000
 800addc:	3fe00000 	.word	0x3fe00000
 800ade0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ade4:	9d00      	ldr	r5, [sp, #0]
 800ade6:	4642      	mov	r2, r8
 800ade8:	464b      	mov	r3, r9
 800adea:	4630      	mov	r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	f7f5 fd45 	bl	800087c <__aeabi_ddiv>
 800adf2:	f7f5 fec9 	bl	8000b88 <__aeabi_d2iz>
 800adf6:	9001      	str	r0, [sp, #4]
 800adf8:	f7f5 fbac 	bl	8000554 <__aeabi_i2d>
 800adfc:	4642      	mov	r2, r8
 800adfe:	464b      	mov	r3, r9
 800ae00:	f7f5 fc12 	bl	8000628 <__aeabi_dmul>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fa54 	bl	80002b8 <__aeabi_dsub>
 800ae10:	9e01      	ldr	r6, [sp, #4]
 800ae12:	9f04      	ldr	r7, [sp, #16]
 800ae14:	3630      	adds	r6, #48	; 0x30
 800ae16:	f805 6b01 	strb.w	r6, [r5], #1
 800ae1a:	9e00      	ldr	r6, [sp, #0]
 800ae1c:	1bae      	subs	r6, r5, r6
 800ae1e:	42b7      	cmp	r7, r6
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	d134      	bne.n	800ae90 <_dtoa_r+0x708>
 800ae26:	f7f5 fa49 	bl	80002bc <__adddf3>
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	464b      	mov	r3, r9
 800ae2e:	4606      	mov	r6, r0
 800ae30:	460f      	mov	r7, r1
 800ae32:	f7f5 fe89 	bl	8000b48 <__aeabi_dcmpgt>
 800ae36:	b9c8      	cbnz	r0, 800ae6c <_dtoa_r+0x6e4>
 800ae38:	4642      	mov	r2, r8
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	4639      	mov	r1, r7
 800ae40:	f7f5 fe5a 	bl	8000af8 <__aeabi_dcmpeq>
 800ae44:	b110      	cbz	r0, 800ae4c <_dtoa_r+0x6c4>
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	07db      	lsls	r3, r3, #31
 800ae4a:	d40f      	bmi.n	800ae6c <_dtoa_r+0x6e4>
 800ae4c:	4651      	mov	r1, sl
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 fbcc 	bl	800b5ec <_Bfree>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae58:	702b      	strb	r3, [r5, #0]
 800ae5a:	f10b 0301 	add.w	r3, fp, #1
 800ae5e:	6013      	str	r3, [r2, #0]
 800ae60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f43f ace2 	beq.w	800a82c <_dtoa_r+0xa4>
 800ae68:	601d      	str	r5, [r3, #0]
 800ae6a:	e4df      	b.n	800a82c <_dtoa_r+0xa4>
 800ae6c:	465f      	mov	r7, fp
 800ae6e:	462b      	mov	r3, r5
 800ae70:	461d      	mov	r5, r3
 800ae72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae76:	2a39      	cmp	r2, #57	; 0x39
 800ae78:	d106      	bne.n	800ae88 <_dtoa_r+0x700>
 800ae7a:	9a00      	ldr	r2, [sp, #0]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d1f7      	bne.n	800ae70 <_dtoa_r+0x6e8>
 800ae80:	9900      	ldr	r1, [sp, #0]
 800ae82:	2230      	movs	r2, #48	; 0x30
 800ae84:	3701      	adds	r7, #1
 800ae86:	700a      	strb	r2, [r1, #0]
 800ae88:	781a      	ldrb	r2, [r3, #0]
 800ae8a:	3201      	adds	r2, #1
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	e790      	b.n	800adb2 <_dtoa_r+0x62a>
 800ae90:	4ba3      	ldr	r3, [pc, #652]	; (800b120 <_dtoa_r+0x998>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	f7f5 fbc8 	bl	8000628 <__aeabi_dmul>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	460f      	mov	r7, r1
 800aea0:	f7f5 fe2a 	bl	8000af8 <__aeabi_dcmpeq>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d09e      	beq.n	800ade6 <_dtoa_r+0x65e>
 800aea8:	e7d0      	b.n	800ae4c <_dtoa_r+0x6c4>
 800aeaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeac:	2a00      	cmp	r2, #0
 800aeae:	f000 80ca 	beq.w	800b046 <_dtoa_r+0x8be>
 800aeb2:	9a07      	ldr	r2, [sp, #28]
 800aeb4:	2a01      	cmp	r2, #1
 800aeb6:	f300 80ad 	bgt.w	800b014 <_dtoa_r+0x88c>
 800aeba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	f000 80a5 	beq.w	800b00c <_dtoa_r+0x884>
 800aec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aec6:	9e08      	ldr	r6, [sp, #32]
 800aec8:	9d05      	ldr	r5, [sp, #20]
 800aeca:	9a05      	ldr	r2, [sp, #20]
 800aecc:	441a      	add	r2, r3
 800aece:	9205      	str	r2, [sp, #20]
 800aed0:	9a06      	ldr	r2, [sp, #24]
 800aed2:	2101      	movs	r1, #1
 800aed4:	441a      	add	r2, r3
 800aed6:	4620      	mov	r0, r4
 800aed8:	9206      	str	r2, [sp, #24]
 800aeda:	f000 fc3d 	bl	800b758 <__i2b>
 800aede:	4607      	mov	r7, r0
 800aee0:	b165      	cbz	r5, 800aefc <_dtoa_r+0x774>
 800aee2:	9b06      	ldr	r3, [sp, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	dd09      	ble.n	800aefc <_dtoa_r+0x774>
 800aee8:	42ab      	cmp	r3, r5
 800aeea:	9a05      	ldr	r2, [sp, #20]
 800aeec:	bfa8      	it	ge
 800aeee:	462b      	movge	r3, r5
 800aef0:	1ad2      	subs	r2, r2, r3
 800aef2:	9205      	str	r2, [sp, #20]
 800aef4:	9a06      	ldr	r2, [sp, #24]
 800aef6:	1aed      	subs	r5, r5, r3
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	9306      	str	r3, [sp, #24]
 800aefc:	9b08      	ldr	r3, [sp, #32]
 800aefe:	b1f3      	cbz	r3, 800af3e <_dtoa_r+0x7b6>
 800af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 80a3 	beq.w	800b04e <_dtoa_r+0x8c6>
 800af08:	2e00      	cmp	r6, #0
 800af0a:	dd10      	ble.n	800af2e <_dtoa_r+0x7a6>
 800af0c:	4639      	mov	r1, r7
 800af0e:	4632      	mov	r2, r6
 800af10:	4620      	mov	r0, r4
 800af12:	f000 fce1 	bl	800b8d8 <__pow5mult>
 800af16:	4652      	mov	r2, sl
 800af18:	4601      	mov	r1, r0
 800af1a:	4607      	mov	r7, r0
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fc31 	bl	800b784 <__multiply>
 800af22:	4651      	mov	r1, sl
 800af24:	4680      	mov	r8, r0
 800af26:	4620      	mov	r0, r4
 800af28:	f000 fb60 	bl	800b5ec <_Bfree>
 800af2c:	46c2      	mov	sl, r8
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	1b9a      	subs	r2, r3, r6
 800af32:	d004      	beq.n	800af3e <_dtoa_r+0x7b6>
 800af34:	4651      	mov	r1, sl
 800af36:	4620      	mov	r0, r4
 800af38:	f000 fcce 	bl	800b8d8 <__pow5mult>
 800af3c:	4682      	mov	sl, r0
 800af3e:	2101      	movs	r1, #1
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fc09 	bl	800b758 <__i2b>
 800af46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	4606      	mov	r6, r0
 800af4c:	f340 8081 	ble.w	800b052 <_dtoa_r+0x8ca>
 800af50:	461a      	mov	r2, r3
 800af52:	4601      	mov	r1, r0
 800af54:	4620      	mov	r0, r4
 800af56:	f000 fcbf 	bl	800b8d8 <__pow5mult>
 800af5a:	9b07      	ldr	r3, [sp, #28]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	4606      	mov	r6, r0
 800af60:	dd7a      	ble.n	800b058 <_dtoa_r+0x8d0>
 800af62:	f04f 0800 	mov.w	r8, #0
 800af66:	6933      	ldr	r3, [r6, #16]
 800af68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af6c:	6918      	ldr	r0, [r3, #16]
 800af6e:	f000 fba5 	bl	800b6bc <__hi0bits>
 800af72:	f1c0 0020 	rsb	r0, r0, #32
 800af76:	9b06      	ldr	r3, [sp, #24]
 800af78:	4418      	add	r0, r3
 800af7a:	f010 001f 	ands.w	r0, r0, #31
 800af7e:	f000 8094 	beq.w	800b0aa <_dtoa_r+0x922>
 800af82:	f1c0 0320 	rsb	r3, r0, #32
 800af86:	2b04      	cmp	r3, #4
 800af88:	f340 8085 	ble.w	800b096 <_dtoa_r+0x90e>
 800af8c:	9b05      	ldr	r3, [sp, #20]
 800af8e:	f1c0 001c 	rsb	r0, r0, #28
 800af92:	4403      	add	r3, r0
 800af94:	9305      	str	r3, [sp, #20]
 800af96:	9b06      	ldr	r3, [sp, #24]
 800af98:	4403      	add	r3, r0
 800af9a:	4405      	add	r5, r0
 800af9c:	9306      	str	r3, [sp, #24]
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dd05      	ble.n	800afb0 <_dtoa_r+0x828>
 800afa4:	4651      	mov	r1, sl
 800afa6:	461a      	mov	r2, r3
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fcef 	bl	800b98c <__lshift>
 800afae:	4682      	mov	sl, r0
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dd05      	ble.n	800afc2 <_dtoa_r+0x83a>
 800afb6:	4631      	mov	r1, r6
 800afb8:	461a      	mov	r2, r3
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 fce6 	bl	800b98c <__lshift>
 800afc0:	4606      	mov	r6, r0
 800afc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d072      	beq.n	800b0ae <_dtoa_r+0x926>
 800afc8:	4631      	mov	r1, r6
 800afca:	4650      	mov	r0, sl
 800afcc:	f000 fd4a 	bl	800ba64 <__mcmp>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	da6c      	bge.n	800b0ae <_dtoa_r+0x926>
 800afd4:	2300      	movs	r3, #0
 800afd6:	4651      	mov	r1, sl
 800afd8:	220a      	movs	r2, #10
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 fb28 	bl	800b630 <__multadd>
 800afe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afe6:	4682      	mov	sl, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 81b0 	beq.w	800b34e <_dtoa_r+0xbc6>
 800afee:	2300      	movs	r3, #0
 800aff0:	4639      	mov	r1, r7
 800aff2:	220a      	movs	r2, #10
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 fb1b 	bl	800b630 <__multadd>
 800affa:	9b01      	ldr	r3, [sp, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	4607      	mov	r7, r0
 800b000:	f300 8096 	bgt.w	800b130 <_dtoa_r+0x9a8>
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	2b02      	cmp	r3, #2
 800b008:	dc59      	bgt.n	800b0be <_dtoa_r+0x936>
 800b00a:	e091      	b.n	800b130 <_dtoa_r+0x9a8>
 800b00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b00e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b012:	e758      	b.n	800aec6 <_dtoa_r+0x73e>
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	1e5e      	subs	r6, r3, #1
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	42b3      	cmp	r3, r6
 800b01c:	bfbf      	itttt	lt
 800b01e:	9b08      	ldrlt	r3, [sp, #32]
 800b020:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b022:	9608      	strlt	r6, [sp, #32]
 800b024:	1af3      	sublt	r3, r6, r3
 800b026:	bfb4      	ite	lt
 800b028:	18d2      	addlt	r2, r2, r3
 800b02a:	1b9e      	subge	r6, r3, r6
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	bfbc      	itt	lt
 800b030:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b032:	2600      	movlt	r6, #0
 800b034:	2b00      	cmp	r3, #0
 800b036:	bfb7      	itett	lt
 800b038:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b03c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b040:	1a9d      	sublt	r5, r3, r2
 800b042:	2300      	movlt	r3, #0
 800b044:	e741      	b.n	800aeca <_dtoa_r+0x742>
 800b046:	9e08      	ldr	r6, [sp, #32]
 800b048:	9d05      	ldr	r5, [sp, #20]
 800b04a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b04c:	e748      	b.n	800aee0 <_dtoa_r+0x758>
 800b04e:	9a08      	ldr	r2, [sp, #32]
 800b050:	e770      	b.n	800af34 <_dtoa_r+0x7ac>
 800b052:	9b07      	ldr	r3, [sp, #28]
 800b054:	2b01      	cmp	r3, #1
 800b056:	dc19      	bgt.n	800b08c <_dtoa_r+0x904>
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	b9bb      	cbnz	r3, 800b08c <_dtoa_r+0x904>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b062:	b99b      	cbnz	r3, 800b08c <_dtoa_r+0x904>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b06a:	0d1b      	lsrs	r3, r3, #20
 800b06c:	051b      	lsls	r3, r3, #20
 800b06e:	b183      	cbz	r3, 800b092 <_dtoa_r+0x90a>
 800b070:	9b05      	ldr	r3, [sp, #20]
 800b072:	3301      	adds	r3, #1
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	9b06      	ldr	r3, [sp, #24]
 800b078:	3301      	adds	r3, #1
 800b07a:	9306      	str	r3, [sp, #24]
 800b07c:	f04f 0801 	mov.w	r8, #1
 800b080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b082:	2b00      	cmp	r3, #0
 800b084:	f47f af6f 	bne.w	800af66 <_dtoa_r+0x7de>
 800b088:	2001      	movs	r0, #1
 800b08a:	e774      	b.n	800af76 <_dtoa_r+0x7ee>
 800b08c:	f04f 0800 	mov.w	r8, #0
 800b090:	e7f6      	b.n	800b080 <_dtoa_r+0x8f8>
 800b092:	4698      	mov	r8, r3
 800b094:	e7f4      	b.n	800b080 <_dtoa_r+0x8f8>
 800b096:	d082      	beq.n	800af9e <_dtoa_r+0x816>
 800b098:	9a05      	ldr	r2, [sp, #20]
 800b09a:	331c      	adds	r3, #28
 800b09c:	441a      	add	r2, r3
 800b09e:	9205      	str	r2, [sp, #20]
 800b0a0:	9a06      	ldr	r2, [sp, #24]
 800b0a2:	441a      	add	r2, r3
 800b0a4:	441d      	add	r5, r3
 800b0a6:	9206      	str	r2, [sp, #24]
 800b0a8:	e779      	b.n	800af9e <_dtoa_r+0x816>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	e7f4      	b.n	800b098 <_dtoa_r+0x910>
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dc37      	bgt.n	800b124 <_dtoa_r+0x99c>
 800b0b4:	9b07      	ldr	r3, [sp, #28]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	dd34      	ble.n	800b124 <_dtoa_r+0x99c>
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	b963      	cbnz	r3, 800b0dc <_dtoa_r+0x954>
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	2205      	movs	r2, #5
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 fab2 	bl	800b630 <__multadd>
 800b0cc:	4601      	mov	r1, r0
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	f000 fcc7 	bl	800ba64 <__mcmp>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f73f adbb 	bgt.w	800ac52 <_dtoa_r+0x4ca>
 800b0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0de:	9d00      	ldr	r5, [sp, #0]
 800b0e0:	ea6f 0b03 	mvn.w	fp, r3
 800b0e4:	f04f 0800 	mov.w	r8, #0
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fa7e 	bl	800b5ec <_Bfree>
 800b0f0:	2f00      	cmp	r7, #0
 800b0f2:	f43f aeab 	beq.w	800ae4c <_dtoa_r+0x6c4>
 800b0f6:	f1b8 0f00 	cmp.w	r8, #0
 800b0fa:	d005      	beq.n	800b108 <_dtoa_r+0x980>
 800b0fc:	45b8      	cmp	r8, r7
 800b0fe:	d003      	beq.n	800b108 <_dtoa_r+0x980>
 800b100:	4641      	mov	r1, r8
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fa72 	bl	800b5ec <_Bfree>
 800b108:	4639      	mov	r1, r7
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 fa6e 	bl	800b5ec <_Bfree>
 800b110:	e69c      	b.n	800ae4c <_dtoa_r+0x6c4>
 800b112:	2600      	movs	r6, #0
 800b114:	4637      	mov	r7, r6
 800b116:	e7e1      	b.n	800b0dc <_dtoa_r+0x954>
 800b118:	46bb      	mov	fp, r7
 800b11a:	4637      	mov	r7, r6
 800b11c:	e599      	b.n	800ac52 <_dtoa_r+0x4ca>
 800b11e:	bf00      	nop
 800b120:	40240000 	.word	0x40240000
 800b124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	f000 80c8 	beq.w	800b2bc <_dtoa_r+0xb34>
 800b12c:	9b04      	ldr	r3, [sp, #16]
 800b12e:	9301      	str	r3, [sp, #4]
 800b130:	2d00      	cmp	r5, #0
 800b132:	dd05      	ble.n	800b140 <_dtoa_r+0x9b8>
 800b134:	4639      	mov	r1, r7
 800b136:	462a      	mov	r2, r5
 800b138:	4620      	mov	r0, r4
 800b13a:	f000 fc27 	bl	800b98c <__lshift>
 800b13e:	4607      	mov	r7, r0
 800b140:	f1b8 0f00 	cmp.w	r8, #0
 800b144:	d05b      	beq.n	800b1fe <_dtoa_r+0xa76>
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 fa0f 	bl	800b56c <_Balloc>
 800b14e:	4605      	mov	r5, r0
 800b150:	b928      	cbnz	r0, 800b15e <_dtoa_r+0x9d6>
 800b152:	4b83      	ldr	r3, [pc, #524]	; (800b360 <_dtoa_r+0xbd8>)
 800b154:	4602      	mov	r2, r0
 800b156:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b15a:	f7ff bb2e 	b.w	800a7ba <_dtoa_r+0x32>
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	3202      	adds	r2, #2
 800b162:	0092      	lsls	r2, r2, #2
 800b164:	f107 010c 	add.w	r1, r7, #12
 800b168:	300c      	adds	r0, #12
 800b16a:	f7ff fa58 	bl	800a61e <memcpy>
 800b16e:	2201      	movs	r2, #1
 800b170:	4629      	mov	r1, r5
 800b172:	4620      	mov	r0, r4
 800b174:	f000 fc0a 	bl	800b98c <__lshift>
 800b178:	9b00      	ldr	r3, [sp, #0]
 800b17a:	3301      	adds	r3, #1
 800b17c:	9304      	str	r3, [sp, #16]
 800b17e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b182:	4413      	add	r3, r2
 800b184:	9308      	str	r3, [sp, #32]
 800b186:	9b02      	ldr	r3, [sp, #8]
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	46b8      	mov	r8, r7
 800b18e:	9306      	str	r3, [sp, #24]
 800b190:	4607      	mov	r7, r0
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	4631      	mov	r1, r6
 800b196:	3b01      	subs	r3, #1
 800b198:	4650      	mov	r0, sl
 800b19a:	9301      	str	r3, [sp, #4]
 800b19c:	f7ff fa6c 	bl	800a678 <quorem>
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	9002      	str	r0, [sp, #8]
 800b1a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	f000 fc5b 	bl	800ba64 <__mcmp>
 800b1ae:	463a      	mov	r2, r7
 800b1b0:	9005      	str	r0, [sp, #20]
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fc71 	bl	800ba9c <__mdiff>
 800b1ba:	68c2      	ldr	r2, [r0, #12]
 800b1bc:	4605      	mov	r5, r0
 800b1be:	bb02      	cbnz	r2, 800b202 <_dtoa_r+0xa7a>
 800b1c0:	4601      	mov	r1, r0
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	f000 fc4e 	bl	800ba64 <__mcmp>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d0:	f000 fa0c 	bl	800b5ec <_Bfree>
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1d8:	9d04      	ldr	r5, [sp, #16]
 800b1da:	ea43 0102 	orr.w	r1, r3, r2
 800b1de:	9b06      	ldr	r3, [sp, #24]
 800b1e0:	4319      	orrs	r1, r3
 800b1e2:	d110      	bne.n	800b206 <_dtoa_r+0xa7e>
 800b1e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1e8:	d029      	beq.n	800b23e <_dtoa_r+0xab6>
 800b1ea:	9b05      	ldr	r3, [sp, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dd02      	ble.n	800b1f6 <_dtoa_r+0xa6e>
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	f883 9000 	strb.w	r9, [r3]
 800b1fc:	e774      	b.n	800b0e8 <_dtoa_r+0x960>
 800b1fe:	4638      	mov	r0, r7
 800b200:	e7ba      	b.n	800b178 <_dtoa_r+0x9f0>
 800b202:	2201      	movs	r2, #1
 800b204:	e7e1      	b.n	800b1ca <_dtoa_r+0xa42>
 800b206:	9b05      	ldr	r3, [sp, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	db04      	blt.n	800b216 <_dtoa_r+0xa8e>
 800b20c:	9907      	ldr	r1, [sp, #28]
 800b20e:	430b      	orrs	r3, r1
 800b210:	9906      	ldr	r1, [sp, #24]
 800b212:	430b      	orrs	r3, r1
 800b214:	d120      	bne.n	800b258 <_dtoa_r+0xad0>
 800b216:	2a00      	cmp	r2, #0
 800b218:	dded      	ble.n	800b1f6 <_dtoa_r+0xa6e>
 800b21a:	4651      	mov	r1, sl
 800b21c:	2201      	movs	r2, #1
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 fbb4 	bl	800b98c <__lshift>
 800b224:	4631      	mov	r1, r6
 800b226:	4682      	mov	sl, r0
 800b228:	f000 fc1c 	bl	800ba64 <__mcmp>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	dc03      	bgt.n	800b238 <_dtoa_r+0xab0>
 800b230:	d1e1      	bne.n	800b1f6 <_dtoa_r+0xa6e>
 800b232:	f019 0f01 	tst.w	r9, #1
 800b236:	d0de      	beq.n	800b1f6 <_dtoa_r+0xa6e>
 800b238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b23c:	d1d8      	bne.n	800b1f0 <_dtoa_r+0xa68>
 800b23e:	9a01      	ldr	r2, [sp, #4]
 800b240:	2339      	movs	r3, #57	; 0x39
 800b242:	7013      	strb	r3, [r2, #0]
 800b244:	462b      	mov	r3, r5
 800b246:	461d      	mov	r5, r3
 800b248:	3b01      	subs	r3, #1
 800b24a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b24e:	2a39      	cmp	r2, #57	; 0x39
 800b250:	d06c      	beq.n	800b32c <_dtoa_r+0xba4>
 800b252:	3201      	adds	r2, #1
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	e747      	b.n	800b0e8 <_dtoa_r+0x960>
 800b258:	2a00      	cmp	r2, #0
 800b25a:	dd07      	ble.n	800b26c <_dtoa_r+0xae4>
 800b25c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b260:	d0ed      	beq.n	800b23e <_dtoa_r+0xab6>
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	f109 0301 	add.w	r3, r9, #1
 800b268:	7013      	strb	r3, [r2, #0]
 800b26a:	e73d      	b.n	800b0e8 <_dtoa_r+0x960>
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	9a08      	ldr	r2, [sp, #32]
 800b270:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b274:	4293      	cmp	r3, r2
 800b276:	d043      	beq.n	800b300 <_dtoa_r+0xb78>
 800b278:	4651      	mov	r1, sl
 800b27a:	2300      	movs	r3, #0
 800b27c:	220a      	movs	r2, #10
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 f9d6 	bl	800b630 <__multadd>
 800b284:	45b8      	cmp	r8, r7
 800b286:	4682      	mov	sl, r0
 800b288:	f04f 0300 	mov.w	r3, #0
 800b28c:	f04f 020a 	mov.w	r2, #10
 800b290:	4641      	mov	r1, r8
 800b292:	4620      	mov	r0, r4
 800b294:	d107      	bne.n	800b2a6 <_dtoa_r+0xb1e>
 800b296:	f000 f9cb 	bl	800b630 <__multadd>
 800b29a:	4680      	mov	r8, r0
 800b29c:	4607      	mov	r7, r0
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	e775      	b.n	800b192 <_dtoa_r+0xa0a>
 800b2a6:	f000 f9c3 	bl	800b630 <__multadd>
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	220a      	movs	r2, #10
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 f9bc 	bl	800b630 <__multadd>
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	e7f0      	b.n	800b29e <_dtoa_r+0xb16>
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	9301      	str	r3, [sp, #4]
 800b2c0:	9d00      	ldr	r5, [sp, #0]
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4650      	mov	r0, sl
 800b2c6:	f7ff f9d7 	bl	800a678 <quorem>
 800b2ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	f805 9b01 	strb.w	r9, [r5], #1
 800b2d4:	1aea      	subs	r2, r5, r3
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	dd07      	ble.n	800b2ec <_dtoa_r+0xb64>
 800b2dc:	4651      	mov	r1, sl
 800b2de:	2300      	movs	r3, #0
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 f9a4 	bl	800b630 <__multadd>
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	e7ea      	b.n	800b2c2 <_dtoa_r+0xb3a>
 800b2ec:	9b01      	ldr	r3, [sp, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfc8      	it	gt
 800b2f2:	461d      	movgt	r5, r3
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	bfd8      	it	le
 800b2f8:	2501      	movle	r5, #1
 800b2fa:	441d      	add	r5, r3
 800b2fc:	f04f 0800 	mov.w	r8, #0
 800b300:	4651      	mov	r1, sl
 800b302:	2201      	movs	r2, #1
 800b304:	4620      	mov	r0, r4
 800b306:	f000 fb41 	bl	800b98c <__lshift>
 800b30a:	4631      	mov	r1, r6
 800b30c:	4682      	mov	sl, r0
 800b30e:	f000 fba9 	bl	800ba64 <__mcmp>
 800b312:	2800      	cmp	r0, #0
 800b314:	dc96      	bgt.n	800b244 <_dtoa_r+0xabc>
 800b316:	d102      	bne.n	800b31e <_dtoa_r+0xb96>
 800b318:	f019 0f01 	tst.w	r9, #1
 800b31c:	d192      	bne.n	800b244 <_dtoa_r+0xabc>
 800b31e:	462b      	mov	r3, r5
 800b320:	461d      	mov	r5, r3
 800b322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b326:	2a30      	cmp	r2, #48	; 0x30
 800b328:	d0fa      	beq.n	800b320 <_dtoa_r+0xb98>
 800b32a:	e6dd      	b.n	800b0e8 <_dtoa_r+0x960>
 800b32c:	9a00      	ldr	r2, [sp, #0]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d189      	bne.n	800b246 <_dtoa_r+0xabe>
 800b332:	f10b 0b01 	add.w	fp, fp, #1
 800b336:	2331      	movs	r3, #49	; 0x31
 800b338:	e796      	b.n	800b268 <_dtoa_r+0xae0>
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <_dtoa_r+0xbdc>)
 800b33c:	f7ff ba99 	b.w	800a872 <_dtoa_r+0xea>
 800b340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b342:	2b00      	cmp	r3, #0
 800b344:	f47f aa6d 	bne.w	800a822 <_dtoa_r+0x9a>
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <_dtoa_r+0xbe0>)
 800b34a:	f7ff ba92 	b.w	800a872 <_dtoa_r+0xea>
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	dcb5      	bgt.n	800b2c0 <_dtoa_r+0xb38>
 800b354:	9b07      	ldr	r3, [sp, #28]
 800b356:	2b02      	cmp	r3, #2
 800b358:	f73f aeb1 	bgt.w	800b0be <_dtoa_r+0x936>
 800b35c:	e7b0      	b.n	800b2c0 <_dtoa_r+0xb38>
 800b35e:	bf00      	nop
 800b360:	0800cc33 	.word	0x0800cc33
 800b364:	0800cafd 	.word	0x0800cafd
 800b368:	0800cbce 	.word	0x0800cbce

0800b36c <_free_r>:
 800b36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b36e:	2900      	cmp	r1, #0
 800b370:	d044      	beq.n	800b3fc <_free_r+0x90>
 800b372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b376:	9001      	str	r0, [sp, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f1a1 0404 	sub.w	r4, r1, #4
 800b37e:	bfb8      	it	lt
 800b380:	18e4      	addlt	r4, r4, r3
 800b382:	f000 f8e7 	bl	800b554 <__malloc_lock>
 800b386:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <_free_r+0x94>)
 800b388:	9801      	ldr	r0, [sp, #4]
 800b38a:	6813      	ldr	r3, [r2, #0]
 800b38c:	b933      	cbnz	r3, 800b39c <_free_r+0x30>
 800b38e:	6063      	str	r3, [r4, #4]
 800b390:	6014      	str	r4, [r2, #0]
 800b392:	b003      	add	sp, #12
 800b394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b398:	f000 b8e2 	b.w	800b560 <__malloc_unlock>
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	d908      	bls.n	800b3b2 <_free_r+0x46>
 800b3a0:	6825      	ldr	r5, [r4, #0]
 800b3a2:	1961      	adds	r1, r4, r5
 800b3a4:	428b      	cmp	r3, r1
 800b3a6:	bf01      	itttt	eq
 800b3a8:	6819      	ldreq	r1, [r3, #0]
 800b3aa:	685b      	ldreq	r3, [r3, #4]
 800b3ac:	1949      	addeq	r1, r1, r5
 800b3ae:	6021      	streq	r1, [r4, #0]
 800b3b0:	e7ed      	b.n	800b38e <_free_r+0x22>
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	b10b      	cbz	r3, 800b3bc <_free_r+0x50>
 800b3b8:	42a3      	cmp	r3, r4
 800b3ba:	d9fa      	bls.n	800b3b2 <_free_r+0x46>
 800b3bc:	6811      	ldr	r1, [r2, #0]
 800b3be:	1855      	adds	r5, r2, r1
 800b3c0:	42a5      	cmp	r5, r4
 800b3c2:	d10b      	bne.n	800b3dc <_free_r+0x70>
 800b3c4:	6824      	ldr	r4, [r4, #0]
 800b3c6:	4421      	add	r1, r4
 800b3c8:	1854      	adds	r4, r2, r1
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	6011      	str	r1, [r2, #0]
 800b3ce:	d1e0      	bne.n	800b392 <_free_r+0x26>
 800b3d0:	681c      	ldr	r4, [r3, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	6053      	str	r3, [r2, #4]
 800b3d6:	440c      	add	r4, r1
 800b3d8:	6014      	str	r4, [r2, #0]
 800b3da:	e7da      	b.n	800b392 <_free_r+0x26>
 800b3dc:	d902      	bls.n	800b3e4 <_free_r+0x78>
 800b3de:	230c      	movs	r3, #12
 800b3e0:	6003      	str	r3, [r0, #0]
 800b3e2:	e7d6      	b.n	800b392 <_free_r+0x26>
 800b3e4:	6825      	ldr	r5, [r4, #0]
 800b3e6:	1961      	adds	r1, r4, r5
 800b3e8:	428b      	cmp	r3, r1
 800b3ea:	bf04      	itt	eq
 800b3ec:	6819      	ldreq	r1, [r3, #0]
 800b3ee:	685b      	ldreq	r3, [r3, #4]
 800b3f0:	6063      	str	r3, [r4, #4]
 800b3f2:	bf04      	itt	eq
 800b3f4:	1949      	addeq	r1, r1, r5
 800b3f6:	6021      	streq	r1, [r4, #0]
 800b3f8:	6054      	str	r4, [r2, #4]
 800b3fa:	e7ca      	b.n	800b392 <_free_r+0x26>
 800b3fc:	b003      	add	sp, #12
 800b3fe:	bd30      	pop	{r4, r5, pc}
 800b400:	20004e54 	.word	0x20004e54

0800b404 <malloc>:
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <malloc+0xc>)
 800b406:	4601      	mov	r1, r0
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	f000 b823 	b.w	800b454 <_malloc_r>
 800b40e:	bf00      	nop
 800b410:	20000074 	.word	0x20000074

0800b414 <sbrk_aligned>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4e0e      	ldr	r6, [pc, #56]	; (800b450 <sbrk_aligned+0x3c>)
 800b418:	460c      	mov	r4, r1
 800b41a:	6831      	ldr	r1, [r6, #0]
 800b41c:	4605      	mov	r5, r0
 800b41e:	b911      	cbnz	r1, 800b426 <sbrk_aligned+0x12>
 800b420:	f001 f81a 	bl	800c458 <_sbrk_r>
 800b424:	6030      	str	r0, [r6, #0]
 800b426:	4621      	mov	r1, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	f001 f815 	bl	800c458 <_sbrk_r>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	d00a      	beq.n	800b448 <sbrk_aligned+0x34>
 800b432:	1cc4      	adds	r4, r0, #3
 800b434:	f024 0403 	bic.w	r4, r4, #3
 800b438:	42a0      	cmp	r0, r4
 800b43a:	d007      	beq.n	800b44c <sbrk_aligned+0x38>
 800b43c:	1a21      	subs	r1, r4, r0
 800b43e:	4628      	mov	r0, r5
 800b440:	f001 f80a 	bl	800c458 <_sbrk_r>
 800b444:	3001      	adds	r0, #1
 800b446:	d101      	bne.n	800b44c <sbrk_aligned+0x38>
 800b448:	f04f 34ff 	mov.w	r4, #4294967295
 800b44c:	4620      	mov	r0, r4
 800b44e:	bd70      	pop	{r4, r5, r6, pc}
 800b450:	20004e58 	.word	0x20004e58

0800b454 <_malloc_r>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	1ccd      	adds	r5, r1, #3
 800b45a:	f025 0503 	bic.w	r5, r5, #3
 800b45e:	3508      	adds	r5, #8
 800b460:	2d0c      	cmp	r5, #12
 800b462:	bf38      	it	cc
 800b464:	250c      	movcc	r5, #12
 800b466:	2d00      	cmp	r5, #0
 800b468:	4607      	mov	r7, r0
 800b46a:	db01      	blt.n	800b470 <_malloc_r+0x1c>
 800b46c:	42a9      	cmp	r1, r5
 800b46e:	d905      	bls.n	800b47c <_malloc_r+0x28>
 800b470:	230c      	movs	r3, #12
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	2600      	movs	r6, #0
 800b476:	4630      	mov	r0, r6
 800b478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b550 <_malloc_r+0xfc>
 800b480:	f000 f868 	bl	800b554 <__malloc_lock>
 800b484:	f8d8 3000 	ldr.w	r3, [r8]
 800b488:	461c      	mov	r4, r3
 800b48a:	bb5c      	cbnz	r4, 800b4e4 <_malloc_r+0x90>
 800b48c:	4629      	mov	r1, r5
 800b48e:	4638      	mov	r0, r7
 800b490:	f7ff ffc0 	bl	800b414 <sbrk_aligned>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	4604      	mov	r4, r0
 800b498:	d155      	bne.n	800b546 <_malloc_r+0xf2>
 800b49a:	f8d8 4000 	ldr.w	r4, [r8]
 800b49e:	4626      	mov	r6, r4
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	d145      	bne.n	800b530 <_malloc_r+0xdc>
 800b4a4:	2c00      	cmp	r4, #0
 800b4a6:	d048      	beq.n	800b53a <_malloc_r+0xe6>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	eb04 0903 	add.w	r9, r4, r3
 800b4b2:	f000 ffd1 	bl	800c458 <_sbrk_r>
 800b4b6:	4581      	cmp	r9, r0
 800b4b8:	d13f      	bne.n	800b53a <_malloc_r+0xe6>
 800b4ba:	6821      	ldr	r1, [r4, #0]
 800b4bc:	1a6d      	subs	r5, r5, r1
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff ffa7 	bl	800b414 <sbrk_aligned>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d037      	beq.n	800b53a <_malloc_r+0xe6>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	442b      	add	r3, r5
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d038      	beq.n	800b54a <_malloc_r+0xf6>
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	42a2      	cmp	r2, r4
 800b4dc:	d12b      	bne.n	800b536 <_malloc_r+0xe2>
 800b4de:	2200      	movs	r2, #0
 800b4e0:	605a      	str	r2, [r3, #4]
 800b4e2:	e00f      	b.n	800b504 <_malloc_r+0xb0>
 800b4e4:	6822      	ldr	r2, [r4, #0]
 800b4e6:	1b52      	subs	r2, r2, r5
 800b4e8:	d41f      	bmi.n	800b52a <_malloc_r+0xd6>
 800b4ea:	2a0b      	cmp	r2, #11
 800b4ec:	d917      	bls.n	800b51e <_malloc_r+0xca>
 800b4ee:	1961      	adds	r1, r4, r5
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	6025      	str	r5, [r4, #0]
 800b4f4:	bf18      	it	ne
 800b4f6:	6059      	strne	r1, [r3, #4]
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	bf08      	it	eq
 800b4fc:	f8c8 1000 	streq.w	r1, [r8]
 800b500:	5162      	str	r2, [r4, r5]
 800b502:	604b      	str	r3, [r1, #4]
 800b504:	4638      	mov	r0, r7
 800b506:	f104 060b 	add.w	r6, r4, #11
 800b50a:	f000 f829 	bl	800b560 <__malloc_unlock>
 800b50e:	f026 0607 	bic.w	r6, r6, #7
 800b512:	1d23      	adds	r3, r4, #4
 800b514:	1af2      	subs	r2, r6, r3
 800b516:	d0ae      	beq.n	800b476 <_malloc_r+0x22>
 800b518:	1b9b      	subs	r3, r3, r6
 800b51a:	50a3      	str	r3, [r4, r2]
 800b51c:	e7ab      	b.n	800b476 <_malloc_r+0x22>
 800b51e:	42a3      	cmp	r3, r4
 800b520:	6862      	ldr	r2, [r4, #4]
 800b522:	d1dd      	bne.n	800b4e0 <_malloc_r+0x8c>
 800b524:	f8c8 2000 	str.w	r2, [r8]
 800b528:	e7ec      	b.n	800b504 <_malloc_r+0xb0>
 800b52a:	4623      	mov	r3, r4
 800b52c:	6864      	ldr	r4, [r4, #4]
 800b52e:	e7ac      	b.n	800b48a <_malloc_r+0x36>
 800b530:	4634      	mov	r4, r6
 800b532:	6876      	ldr	r6, [r6, #4]
 800b534:	e7b4      	b.n	800b4a0 <_malloc_r+0x4c>
 800b536:	4613      	mov	r3, r2
 800b538:	e7cc      	b.n	800b4d4 <_malloc_r+0x80>
 800b53a:	230c      	movs	r3, #12
 800b53c:	603b      	str	r3, [r7, #0]
 800b53e:	4638      	mov	r0, r7
 800b540:	f000 f80e 	bl	800b560 <__malloc_unlock>
 800b544:	e797      	b.n	800b476 <_malloc_r+0x22>
 800b546:	6025      	str	r5, [r4, #0]
 800b548:	e7dc      	b.n	800b504 <_malloc_r+0xb0>
 800b54a:	605b      	str	r3, [r3, #4]
 800b54c:	deff      	udf	#255	; 0xff
 800b54e:	bf00      	nop
 800b550:	20004e54 	.word	0x20004e54

0800b554 <__malloc_lock>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__malloc_lock+0x8>)
 800b556:	f7ff b860 	b.w	800a61a <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	20004e50 	.word	0x20004e50

0800b560 <__malloc_unlock>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__malloc_unlock+0x8>)
 800b562:	f7ff b85b 	b.w	800a61c <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	20004e50 	.word	0x20004e50

0800b56c <_Balloc>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	69c6      	ldr	r6, [r0, #28]
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	b976      	cbnz	r6, 800b594 <_Balloc+0x28>
 800b576:	2010      	movs	r0, #16
 800b578:	f7ff ff44 	bl	800b404 <malloc>
 800b57c:	4602      	mov	r2, r0
 800b57e:	61e0      	str	r0, [r4, #28]
 800b580:	b920      	cbnz	r0, 800b58c <_Balloc+0x20>
 800b582:	4b18      	ldr	r3, [pc, #96]	; (800b5e4 <_Balloc+0x78>)
 800b584:	4818      	ldr	r0, [pc, #96]	; (800b5e8 <_Balloc+0x7c>)
 800b586:	216b      	movs	r1, #107	; 0x6b
 800b588:	f7ff f858 	bl	800a63c <__assert_func>
 800b58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b590:	6006      	str	r6, [r0, #0]
 800b592:	60c6      	str	r6, [r0, #12]
 800b594:	69e6      	ldr	r6, [r4, #28]
 800b596:	68f3      	ldr	r3, [r6, #12]
 800b598:	b183      	cbz	r3, 800b5bc <_Balloc+0x50>
 800b59a:	69e3      	ldr	r3, [r4, #28]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5a2:	b9b8      	cbnz	r0, 800b5d4 <_Balloc+0x68>
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b5aa:	1d72      	adds	r2, r6, #5
 800b5ac:	0092      	lsls	r2, r2, #2
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 ff69 	bl	800c486 <_calloc_r>
 800b5b4:	b160      	cbz	r0, 800b5d0 <_Balloc+0x64>
 800b5b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5ba:	e00e      	b.n	800b5da <_Balloc+0x6e>
 800b5bc:	2221      	movs	r2, #33	; 0x21
 800b5be:	2104      	movs	r1, #4
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f000 ff60 	bl	800c486 <_calloc_r>
 800b5c6:	69e3      	ldr	r3, [r4, #28]
 800b5c8:	60f0      	str	r0, [r6, #12]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1e4      	bne.n	800b59a <_Balloc+0x2e>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	bd70      	pop	{r4, r5, r6, pc}
 800b5d4:	6802      	ldr	r2, [r0, #0]
 800b5d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5e0:	e7f7      	b.n	800b5d2 <_Balloc+0x66>
 800b5e2:	bf00      	nop
 800b5e4:	0800cb21 	.word	0x0800cb21
 800b5e8:	0800cc44 	.word	0x0800cc44

0800b5ec <_Bfree>:
 800b5ec:	b570      	push	{r4, r5, r6, lr}
 800b5ee:	69c6      	ldr	r6, [r0, #28]
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	b976      	cbnz	r6, 800b614 <_Bfree+0x28>
 800b5f6:	2010      	movs	r0, #16
 800b5f8:	f7ff ff04 	bl	800b404 <malloc>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	61e8      	str	r0, [r5, #28]
 800b600:	b920      	cbnz	r0, 800b60c <_Bfree+0x20>
 800b602:	4b09      	ldr	r3, [pc, #36]	; (800b628 <_Bfree+0x3c>)
 800b604:	4809      	ldr	r0, [pc, #36]	; (800b62c <_Bfree+0x40>)
 800b606:	218f      	movs	r1, #143	; 0x8f
 800b608:	f7ff f818 	bl	800a63c <__assert_func>
 800b60c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b610:	6006      	str	r6, [r0, #0]
 800b612:	60c6      	str	r6, [r0, #12]
 800b614:	b13c      	cbz	r4, 800b626 <_Bfree+0x3a>
 800b616:	69eb      	ldr	r3, [r5, #28]
 800b618:	6862      	ldr	r2, [r4, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b620:	6021      	str	r1, [r4, #0]
 800b622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b626:	bd70      	pop	{r4, r5, r6, pc}
 800b628:	0800cb21 	.word	0x0800cb21
 800b62c:	0800cc44 	.word	0x0800cc44

0800b630 <__multadd>:
 800b630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b634:	690d      	ldr	r5, [r1, #16]
 800b636:	4607      	mov	r7, r0
 800b638:	460c      	mov	r4, r1
 800b63a:	461e      	mov	r6, r3
 800b63c:	f101 0c14 	add.w	ip, r1, #20
 800b640:	2000      	movs	r0, #0
 800b642:	f8dc 3000 	ldr.w	r3, [ip]
 800b646:	b299      	uxth	r1, r3
 800b648:	fb02 6101 	mla	r1, r2, r1, r6
 800b64c:	0c1e      	lsrs	r6, r3, #16
 800b64e:	0c0b      	lsrs	r3, r1, #16
 800b650:	fb02 3306 	mla	r3, r2, r6, r3
 800b654:	b289      	uxth	r1, r1
 800b656:	3001      	adds	r0, #1
 800b658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b65c:	4285      	cmp	r5, r0
 800b65e:	f84c 1b04 	str.w	r1, [ip], #4
 800b662:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b666:	dcec      	bgt.n	800b642 <__multadd+0x12>
 800b668:	b30e      	cbz	r6, 800b6ae <__multadd+0x7e>
 800b66a:	68a3      	ldr	r3, [r4, #8]
 800b66c:	42ab      	cmp	r3, r5
 800b66e:	dc19      	bgt.n	800b6a4 <__multadd+0x74>
 800b670:	6861      	ldr	r1, [r4, #4]
 800b672:	4638      	mov	r0, r7
 800b674:	3101      	adds	r1, #1
 800b676:	f7ff ff79 	bl	800b56c <_Balloc>
 800b67a:	4680      	mov	r8, r0
 800b67c:	b928      	cbnz	r0, 800b68a <__multadd+0x5a>
 800b67e:	4602      	mov	r2, r0
 800b680:	4b0c      	ldr	r3, [pc, #48]	; (800b6b4 <__multadd+0x84>)
 800b682:	480d      	ldr	r0, [pc, #52]	; (800b6b8 <__multadd+0x88>)
 800b684:	21ba      	movs	r1, #186	; 0xba
 800b686:	f7fe ffd9 	bl	800a63c <__assert_func>
 800b68a:	6922      	ldr	r2, [r4, #16]
 800b68c:	3202      	adds	r2, #2
 800b68e:	f104 010c 	add.w	r1, r4, #12
 800b692:	0092      	lsls	r2, r2, #2
 800b694:	300c      	adds	r0, #12
 800b696:	f7fe ffc2 	bl	800a61e <memcpy>
 800b69a:	4621      	mov	r1, r4
 800b69c:	4638      	mov	r0, r7
 800b69e:	f7ff ffa5 	bl	800b5ec <_Bfree>
 800b6a2:	4644      	mov	r4, r8
 800b6a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	615e      	str	r6, [r3, #20]
 800b6ac:	6125      	str	r5, [r4, #16]
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b4:	0800cc33 	.word	0x0800cc33
 800b6b8:	0800cc44 	.word	0x0800cc44

0800b6bc <__hi0bits>:
 800b6bc:	0c03      	lsrs	r3, r0, #16
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	b9d3      	cbnz	r3, 800b6f8 <__hi0bits+0x3c>
 800b6c2:	0400      	lsls	r0, r0, #16
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6ca:	bf04      	itt	eq
 800b6cc:	0200      	lsleq	r0, r0, #8
 800b6ce:	3308      	addeq	r3, #8
 800b6d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6d4:	bf04      	itt	eq
 800b6d6:	0100      	lsleq	r0, r0, #4
 800b6d8:	3304      	addeq	r3, #4
 800b6da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6de:	bf04      	itt	eq
 800b6e0:	0080      	lsleq	r0, r0, #2
 800b6e2:	3302      	addeq	r3, #2
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	db05      	blt.n	800b6f4 <__hi0bits+0x38>
 800b6e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6ec:	f103 0301 	add.w	r3, r3, #1
 800b6f0:	bf08      	it	eq
 800b6f2:	2320      	moveq	r3, #32
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	4770      	bx	lr
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e7e4      	b.n	800b6c6 <__hi0bits+0xa>

0800b6fc <__lo0bits>:
 800b6fc:	6803      	ldr	r3, [r0, #0]
 800b6fe:	f013 0207 	ands.w	r2, r3, #7
 800b702:	d00c      	beq.n	800b71e <__lo0bits+0x22>
 800b704:	07d9      	lsls	r1, r3, #31
 800b706:	d422      	bmi.n	800b74e <__lo0bits+0x52>
 800b708:	079a      	lsls	r2, r3, #30
 800b70a:	bf49      	itett	mi
 800b70c:	085b      	lsrmi	r3, r3, #1
 800b70e:	089b      	lsrpl	r3, r3, #2
 800b710:	6003      	strmi	r3, [r0, #0]
 800b712:	2201      	movmi	r2, #1
 800b714:	bf5c      	itt	pl
 800b716:	6003      	strpl	r3, [r0, #0]
 800b718:	2202      	movpl	r2, #2
 800b71a:	4610      	mov	r0, r2
 800b71c:	4770      	bx	lr
 800b71e:	b299      	uxth	r1, r3
 800b720:	b909      	cbnz	r1, 800b726 <__lo0bits+0x2a>
 800b722:	0c1b      	lsrs	r3, r3, #16
 800b724:	2210      	movs	r2, #16
 800b726:	b2d9      	uxtb	r1, r3
 800b728:	b909      	cbnz	r1, 800b72e <__lo0bits+0x32>
 800b72a:	3208      	adds	r2, #8
 800b72c:	0a1b      	lsrs	r3, r3, #8
 800b72e:	0719      	lsls	r1, r3, #28
 800b730:	bf04      	itt	eq
 800b732:	091b      	lsreq	r3, r3, #4
 800b734:	3204      	addeq	r2, #4
 800b736:	0799      	lsls	r1, r3, #30
 800b738:	bf04      	itt	eq
 800b73a:	089b      	lsreq	r3, r3, #2
 800b73c:	3202      	addeq	r2, #2
 800b73e:	07d9      	lsls	r1, r3, #31
 800b740:	d403      	bmi.n	800b74a <__lo0bits+0x4e>
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	f102 0201 	add.w	r2, r2, #1
 800b748:	d003      	beq.n	800b752 <__lo0bits+0x56>
 800b74a:	6003      	str	r3, [r0, #0]
 800b74c:	e7e5      	b.n	800b71a <__lo0bits+0x1e>
 800b74e:	2200      	movs	r2, #0
 800b750:	e7e3      	b.n	800b71a <__lo0bits+0x1e>
 800b752:	2220      	movs	r2, #32
 800b754:	e7e1      	b.n	800b71a <__lo0bits+0x1e>
	...

0800b758 <__i2b>:
 800b758:	b510      	push	{r4, lr}
 800b75a:	460c      	mov	r4, r1
 800b75c:	2101      	movs	r1, #1
 800b75e:	f7ff ff05 	bl	800b56c <_Balloc>
 800b762:	4602      	mov	r2, r0
 800b764:	b928      	cbnz	r0, 800b772 <__i2b+0x1a>
 800b766:	4b05      	ldr	r3, [pc, #20]	; (800b77c <__i2b+0x24>)
 800b768:	4805      	ldr	r0, [pc, #20]	; (800b780 <__i2b+0x28>)
 800b76a:	f240 1145 	movw	r1, #325	; 0x145
 800b76e:	f7fe ff65 	bl	800a63c <__assert_func>
 800b772:	2301      	movs	r3, #1
 800b774:	6144      	str	r4, [r0, #20]
 800b776:	6103      	str	r3, [r0, #16]
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	bf00      	nop
 800b77c:	0800cc33 	.word	0x0800cc33
 800b780:	0800cc44 	.word	0x0800cc44

0800b784 <__multiply>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	4691      	mov	r9, r2
 800b78a:	690a      	ldr	r2, [r1, #16]
 800b78c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b790:	429a      	cmp	r2, r3
 800b792:	bfb8      	it	lt
 800b794:	460b      	movlt	r3, r1
 800b796:	460c      	mov	r4, r1
 800b798:	bfbc      	itt	lt
 800b79a:	464c      	movlt	r4, r9
 800b79c:	4699      	movlt	r9, r3
 800b79e:	6927      	ldr	r7, [r4, #16]
 800b7a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	6861      	ldr	r1, [r4, #4]
 800b7a8:	eb07 060a 	add.w	r6, r7, sl
 800b7ac:	42b3      	cmp	r3, r6
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	bfb8      	it	lt
 800b7b2:	3101      	addlt	r1, #1
 800b7b4:	f7ff feda 	bl	800b56c <_Balloc>
 800b7b8:	b930      	cbnz	r0, 800b7c8 <__multiply+0x44>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b44      	ldr	r3, [pc, #272]	; (800b8d0 <__multiply+0x14c>)
 800b7be:	4845      	ldr	r0, [pc, #276]	; (800b8d4 <__multiply+0x150>)
 800b7c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7c4:	f7fe ff3a 	bl	800a63c <__assert_func>
 800b7c8:	f100 0514 	add.w	r5, r0, #20
 800b7cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7d0:	462b      	mov	r3, r5
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4543      	cmp	r3, r8
 800b7d6:	d321      	bcc.n	800b81c <__multiply+0x98>
 800b7d8:	f104 0314 	add.w	r3, r4, #20
 800b7dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7e0:	f109 0314 	add.w	r3, r9, #20
 800b7e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7e8:	9202      	str	r2, [sp, #8]
 800b7ea:	1b3a      	subs	r2, r7, r4
 800b7ec:	3a15      	subs	r2, #21
 800b7ee:	f022 0203 	bic.w	r2, r2, #3
 800b7f2:	3204      	adds	r2, #4
 800b7f4:	f104 0115 	add.w	r1, r4, #21
 800b7f8:	428f      	cmp	r7, r1
 800b7fa:	bf38      	it	cc
 800b7fc:	2204      	movcc	r2, #4
 800b7fe:	9201      	str	r2, [sp, #4]
 800b800:	9a02      	ldr	r2, [sp, #8]
 800b802:	9303      	str	r3, [sp, #12]
 800b804:	429a      	cmp	r2, r3
 800b806:	d80c      	bhi.n	800b822 <__multiply+0x9e>
 800b808:	2e00      	cmp	r6, #0
 800b80a:	dd03      	ble.n	800b814 <__multiply+0x90>
 800b80c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b810:	2b00      	cmp	r3, #0
 800b812:	d05b      	beq.n	800b8cc <__multiply+0x148>
 800b814:	6106      	str	r6, [r0, #16]
 800b816:	b005      	add	sp, #20
 800b818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81c:	f843 2b04 	str.w	r2, [r3], #4
 800b820:	e7d8      	b.n	800b7d4 <__multiply+0x50>
 800b822:	f8b3 a000 	ldrh.w	sl, [r3]
 800b826:	f1ba 0f00 	cmp.w	sl, #0
 800b82a:	d024      	beq.n	800b876 <__multiply+0xf2>
 800b82c:	f104 0e14 	add.w	lr, r4, #20
 800b830:	46a9      	mov	r9, r5
 800b832:	f04f 0c00 	mov.w	ip, #0
 800b836:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b83a:	f8d9 1000 	ldr.w	r1, [r9]
 800b83e:	fa1f fb82 	uxth.w	fp, r2
 800b842:	b289      	uxth	r1, r1
 800b844:	fb0a 110b 	mla	r1, sl, fp, r1
 800b848:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b84c:	f8d9 2000 	ldr.w	r2, [r9]
 800b850:	4461      	add	r1, ip
 800b852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b856:	fb0a c20b 	mla	r2, sl, fp, ip
 800b85a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b85e:	b289      	uxth	r1, r1
 800b860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b864:	4577      	cmp	r7, lr
 800b866:	f849 1b04 	str.w	r1, [r9], #4
 800b86a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b86e:	d8e2      	bhi.n	800b836 <__multiply+0xb2>
 800b870:	9a01      	ldr	r2, [sp, #4]
 800b872:	f845 c002 	str.w	ip, [r5, r2]
 800b876:	9a03      	ldr	r2, [sp, #12]
 800b878:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b87c:	3304      	adds	r3, #4
 800b87e:	f1b9 0f00 	cmp.w	r9, #0
 800b882:	d021      	beq.n	800b8c8 <__multiply+0x144>
 800b884:	6829      	ldr	r1, [r5, #0]
 800b886:	f104 0c14 	add.w	ip, r4, #20
 800b88a:	46ae      	mov	lr, r5
 800b88c:	f04f 0a00 	mov.w	sl, #0
 800b890:	f8bc b000 	ldrh.w	fp, [ip]
 800b894:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b898:	fb09 220b 	mla	r2, r9, fp, r2
 800b89c:	4452      	add	r2, sl
 800b89e:	b289      	uxth	r1, r1
 800b8a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8a4:	f84e 1b04 	str.w	r1, [lr], #4
 800b8a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8b0:	f8be 1000 	ldrh.w	r1, [lr]
 800b8b4:	fb09 110a 	mla	r1, r9, sl, r1
 800b8b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8bc:	4567      	cmp	r7, ip
 800b8be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8c2:	d8e5      	bhi.n	800b890 <__multiply+0x10c>
 800b8c4:	9a01      	ldr	r2, [sp, #4]
 800b8c6:	50a9      	str	r1, [r5, r2]
 800b8c8:	3504      	adds	r5, #4
 800b8ca:	e799      	b.n	800b800 <__multiply+0x7c>
 800b8cc:	3e01      	subs	r6, #1
 800b8ce:	e79b      	b.n	800b808 <__multiply+0x84>
 800b8d0:	0800cc33 	.word	0x0800cc33
 800b8d4:	0800cc44 	.word	0x0800cc44

0800b8d8 <__pow5mult>:
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	4615      	mov	r5, r2
 800b8de:	f012 0203 	ands.w	r2, r2, #3
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	d007      	beq.n	800b8f8 <__pow5mult+0x20>
 800b8e8:	4c25      	ldr	r4, [pc, #148]	; (800b980 <__pow5mult+0xa8>)
 800b8ea:	3a01      	subs	r2, #1
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8f2:	f7ff fe9d 	bl	800b630 <__multadd>
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	10ad      	asrs	r5, r5, #2
 800b8fa:	d03d      	beq.n	800b978 <__pow5mult+0xa0>
 800b8fc:	69f4      	ldr	r4, [r6, #28]
 800b8fe:	b97c      	cbnz	r4, 800b920 <__pow5mult+0x48>
 800b900:	2010      	movs	r0, #16
 800b902:	f7ff fd7f 	bl	800b404 <malloc>
 800b906:	4602      	mov	r2, r0
 800b908:	61f0      	str	r0, [r6, #28]
 800b90a:	b928      	cbnz	r0, 800b918 <__pow5mult+0x40>
 800b90c:	4b1d      	ldr	r3, [pc, #116]	; (800b984 <__pow5mult+0xac>)
 800b90e:	481e      	ldr	r0, [pc, #120]	; (800b988 <__pow5mult+0xb0>)
 800b910:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b914:	f7fe fe92 	bl	800a63c <__assert_func>
 800b918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b91c:	6004      	str	r4, [r0, #0]
 800b91e:	60c4      	str	r4, [r0, #12]
 800b920:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b928:	b94c      	cbnz	r4, 800b93e <__pow5mult+0x66>
 800b92a:	f240 2171 	movw	r1, #625	; 0x271
 800b92e:	4630      	mov	r0, r6
 800b930:	f7ff ff12 	bl	800b758 <__i2b>
 800b934:	2300      	movs	r3, #0
 800b936:	f8c8 0008 	str.w	r0, [r8, #8]
 800b93a:	4604      	mov	r4, r0
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	f04f 0900 	mov.w	r9, #0
 800b942:	07eb      	lsls	r3, r5, #31
 800b944:	d50a      	bpl.n	800b95c <__pow5mult+0x84>
 800b946:	4639      	mov	r1, r7
 800b948:	4622      	mov	r2, r4
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7ff ff1a 	bl	800b784 <__multiply>
 800b950:	4639      	mov	r1, r7
 800b952:	4680      	mov	r8, r0
 800b954:	4630      	mov	r0, r6
 800b956:	f7ff fe49 	bl	800b5ec <_Bfree>
 800b95a:	4647      	mov	r7, r8
 800b95c:	106d      	asrs	r5, r5, #1
 800b95e:	d00b      	beq.n	800b978 <__pow5mult+0xa0>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	b938      	cbnz	r0, 800b974 <__pow5mult+0x9c>
 800b964:	4622      	mov	r2, r4
 800b966:	4621      	mov	r1, r4
 800b968:	4630      	mov	r0, r6
 800b96a:	f7ff ff0b 	bl	800b784 <__multiply>
 800b96e:	6020      	str	r0, [r4, #0]
 800b970:	f8c0 9000 	str.w	r9, [r0]
 800b974:	4604      	mov	r4, r0
 800b976:	e7e4      	b.n	800b942 <__pow5mult+0x6a>
 800b978:	4638      	mov	r0, r7
 800b97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97e:	bf00      	nop
 800b980:	0800cd90 	.word	0x0800cd90
 800b984:	0800cb21 	.word	0x0800cb21
 800b988:	0800cc44 	.word	0x0800cc44

0800b98c <__lshift>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	460c      	mov	r4, r1
 800b992:	6849      	ldr	r1, [r1, #4]
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b99a:	68a3      	ldr	r3, [r4, #8]
 800b99c:	4607      	mov	r7, r0
 800b99e:	4691      	mov	r9, r2
 800b9a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9a4:	f108 0601 	add.w	r6, r8, #1
 800b9a8:	42b3      	cmp	r3, r6
 800b9aa:	db0b      	blt.n	800b9c4 <__lshift+0x38>
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff fddd 	bl	800b56c <_Balloc>
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	b948      	cbnz	r0, 800b9ca <__lshift+0x3e>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	4b28      	ldr	r3, [pc, #160]	; (800ba5c <__lshift+0xd0>)
 800b9ba:	4829      	ldr	r0, [pc, #164]	; (800ba60 <__lshift+0xd4>)
 800b9bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9c0:	f7fe fe3c 	bl	800a63c <__assert_func>
 800b9c4:	3101      	adds	r1, #1
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	e7ee      	b.n	800b9a8 <__lshift+0x1c>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f100 0114 	add.w	r1, r0, #20
 800b9d0:	f100 0210 	add.w	r2, r0, #16
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	4553      	cmp	r3, sl
 800b9d8:	db33      	blt.n	800ba42 <__lshift+0xb6>
 800b9da:	6920      	ldr	r0, [r4, #16]
 800b9dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9e0:	f104 0314 	add.w	r3, r4, #20
 800b9e4:	f019 091f 	ands.w	r9, r9, #31
 800b9e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9f0:	d02b      	beq.n	800ba4a <__lshift+0xbe>
 800b9f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b9f6:	468a      	mov	sl, r1
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	fa00 f009 	lsl.w	r0, r0, r9
 800ba00:	4310      	orrs	r0, r2
 800ba02:	f84a 0b04 	str.w	r0, [sl], #4
 800ba06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0a:	459c      	cmp	ip, r3
 800ba0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba10:	d8f3      	bhi.n	800b9fa <__lshift+0x6e>
 800ba12:	ebac 0304 	sub.w	r3, ip, r4
 800ba16:	3b15      	subs	r3, #21
 800ba18:	f023 0303 	bic.w	r3, r3, #3
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	f104 0015 	add.w	r0, r4, #21
 800ba22:	4584      	cmp	ip, r0
 800ba24:	bf38      	it	cc
 800ba26:	2304      	movcc	r3, #4
 800ba28:	50ca      	str	r2, [r1, r3]
 800ba2a:	b10a      	cbz	r2, 800ba30 <__lshift+0xa4>
 800ba2c:	f108 0602 	add.w	r6, r8, #2
 800ba30:	3e01      	subs	r6, #1
 800ba32:	4638      	mov	r0, r7
 800ba34:	612e      	str	r6, [r5, #16]
 800ba36:	4621      	mov	r1, r4
 800ba38:	f7ff fdd8 	bl	800b5ec <_Bfree>
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba46:	3301      	adds	r3, #1
 800ba48:	e7c5      	b.n	800b9d6 <__lshift+0x4a>
 800ba4a:	3904      	subs	r1, #4
 800ba4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba54:	459c      	cmp	ip, r3
 800ba56:	d8f9      	bhi.n	800ba4c <__lshift+0xc0>
 800ba58:	e7ea      	b.n	800ba30 <__lshift+0xa4>
 800ba5a:	bf00      	nop
 800ba5c:	0800cc33 	.word	0x0800cc33
 800ba60:	0800cc44 	.word	0x0800cc44

0800ba64 <__mcmp>:
 800ba64:	b530      	push	{r4, r5, lr}
 800ba66:	6902      	ldr	r2, [r0, #16]
 800ba68:	690c      	ldr	r4, [r1, #16]
 800ba6a:	1b12      	subs	r2, r2, r4
 800ba6c:	d10e      	bne.n	800ba8c <__mcmp+0x28>
 800ba6e:	f100 0314 	add.w	r3, r0, #20
 800ba72:	3114      	adds	r1, #20
 800ba74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba84:	42a5      	cmp	r5, r4
 800ba86:	d003      	beq.n	800ba90 <__mcmp+0x2c>
 800ba88:	d305      	bcc.n	800ba96 <__mcmp+0x32>
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	bd30      	pop	{r4, r5, pc}
 800ba90:	4283      	cmp	r3, r0
 800ba92:	d3f3      	bcc.n	800ba7c <__mcmp+0x18>
 800ba94:	e7fa      	b.n	800ba8c <__mcmp+0x28>
 800ba96:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9a:	e7f7      	b.n	800ba8c <__mcmp+0x28>

0800ba9c <__mdiff>:
 800ba9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	460c      	mov	r4, r1
 800baa2:	4606      	mov	r6, r0
 800baa4:	4611      	mov	r1, r2
 800baa6:	4620      	mov	r0, r4
 800baa8:	4690      	mov	r8, r2
 800baaa:	f7ff ffdb 	bl	800ba64 <__mcmp>
 800baae:	1e05      	subs	r5, r0, #0
 800bab0:	d110      	bne.n	800bad4 <__mdiff+0x38>
 800bab2:	4629      	mov	r1, r5
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff fd59 	bl	800b56c <_Balloc>
 800baba:	b930      	cbnz	r0, 800baca <__mdiff+0x2e>
 800babc:	4b3a      	ldr	r3, [pc, #232]	; (800bba8 <__mdiff+0x10c>)
 800babe:	4602      	mov	r2, r0
 800bac0:	f240 2137 	movw	r1, #567	; 0x237
 800bac4:	4839      	ldr	r0, [pc, #228]	; (800bbac <__mdiff+0x110>)
 800bac6:	f7fe fdb9 	bl	800a63c <__assert_func>
 800baca:	2301      	movs	r3, #1
 800bacc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad4:	bfa4      	itt	ge
 800bad6:	4643      	movge	r3, r8
 800bad8:	46a0      	movge	r8, r4
 800bada:	4630      	mov	r0, r6
 800badc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bae0:	bfa6      	itte	ge
 800bae2:	461c      	movge	r4, r3
 800bae4:	2500      	movge	r5, #0
 800bae6:	2501      	movlt	r5, #1
 800bae8:	f7ff fd40 	bl	800b56c <_Balloc>
 800baec:	b920      	cbnz	r0, 800baf8 <__mdiff+0x5c>
 800baee:	4b2e      	ldr	r3, [pc, #184]	; (800bba8 <__mdiff+0x10c>)
 800baf0:	4602      	mov	r2, r0
 800baf2:	f240 2145 	movw	r1, #581	; 0x245
 800baf6:	e7e5      	b.n	800bac4 <__mdiff+0x28>
 800baf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bafc:	6926      	ldr	r6, [r4, #16]
 800bafe:	60c5      	str	r5, [r0, #12]
 800bb00:	f104 0914 	add.w	r9, r4, #20
 800bb04:	f108 0514 	add.w	r5, r8, #20
 800bb08:	f100 0e14 	add.w	lr, r0, #20
 800bb0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb14:	f108 0210 	add.w	r2, r8, #16
 800bb18:	46f2      	mov	sl, lr
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb24:	fa11 f88b 	uxtah	r8, r1, fp
 800bb28:	b299      	uxth	r1, r3
 800bb2a:	0c1b      	lsrs	r3, r3, #16
 800bb2c:	eba8 0801 	sub.w	r8, r8, r1
 800bb30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb38:	fa1f f888 	uxth.w	r8, r8
 800bb3c:	1419      	asrs	r1, r3, #16
 800bb3e:	454e      	cmp	r6, r9
 800bb40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb44:	f84a 3b04 	str.w	r3, [sl], #4
 800bb48:	d8e8      	bhi.n	800bb1c <__mdiff+0x80>
 800bb4a:	1b33      	subs	r3, r6, r4
 800bb4c:	3b15      	subs	r3, #21
 800bb4e:	f023 0303 	bic.w	r3, r3, #3
 800bb52:	3304      	adds	r3, #4
 800bb54:	3415      	adds	r4, #21
 800bb56:	42a6      	cmp	r6, r4
 800bb58:	bf38      	it	cc
 800bb5a:	2304      	movcc	r3, #4
 800bb5c:	441d      	add	r5, r3
 800bb5e:	4473      	add	r3, lr
 800bb60:	469e      	mov	lr, r3
 800bb62:	462e      	mov	r6, r5
 800bb64:	4566      	cmp	r6, ip
 800bb66:	d30e      	bcc.n	800bb86 <__mdiff+0xea>
 800bb68:	f10c 0203 	add.w	r2, ip, #3
 800bb6c:	1b52      	subs	r2, r2, r5
 800bb6e:	f022 0203 	bic.w	r2, r2, #3
 800bb72:	3d03      	subs	r5, #3
 800bb74:	45ac      	cmp	ip, r5
 800bb76:	bf38      	it	cc
 800bb78:	2200      	movcc	r2, #0
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb80:	b17a      	cbz	r2, 800bba2 <__mdiff+0x106>
 800bb82:	6107      	str	r7, [r0, #16]
 800bb84:	e7a4      	b.n	800bad0 <__mdiff+0x34>
 800bb86:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb8a:	fa11 f288 	uxtah	r2, r1, r8
 800bb8e:	1414      	asrs	r4, r2, #16
 800bb90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb94:	b292      	uxth	r2, r2
 800bb96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb9a:	f84e 2b04 	str.w	r2, [lr], #4
 800bb9e:	1421      	asrs	r1, r4, #16
 800bba0:	e7e0      	b.n	800bb64 <__mdiff+0xc8>
 800bba2:	3f01      	subs	r7, #1
 800bba4:	e7ea      	b.n	800bb7c <__mdiff+0xe0>
 800bba6:	bf00      	nop
 800bba8:	0800cc33 	.word	0x0800cc33
 800bbac:	0800cc44 	.word	0x0800cc44

0800bbb0 <__d2b>:
 800bbb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbb4:	460f      	mov	r7, r1
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	ec59 8b10 	vmov	r8, r9, d0
 800bbbc:	4616      	mov	r6, r2
 800bbbe:	f7ff fcd5 	bl	800b56c <_Balloc>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	b930      	cbnz	r0, 800bbd4 <__d2b+0x24>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	4b24      	ldr	r3, [pc, #144]	; (800bc5c <__d2b+0xac>)
 800bbca:	4825      	ldr	r0, [pc, #148]	; (800bc60 <__d2b+0xb0>)
 800bbcc:	f240 310f 	movw	r1, #783	; 0x30f
 800bbd0:	f7fe fd34 	bl	800a63c <__assert_func>
 800bbd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbdc:	bb2d      	cbnz	r5, 800bc2a <__d2b+0x7a>
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	f1b8 0300 	subs.w	r3, r8, #0
 800bbe4:	d026      	beq.n	800bc34 <__d2b+0x84>
 800bbe6:	4668      	mov	r0, sp
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	f7ff fd87 	bl	800b6fc <__lo0bits>
 800bbee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbf2:	b1e8      	cbz	r0, 800bc30 <__d2b+0x80>
 800bbf4:	f1c0 0320 	rsb	r3, r0, #32
 800bbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	40c2      	lsrs	r2, r0
 800bc00:	6163      	str	r3, [r4, #20]
 800bc02:	9201      	str	r2, [sp, #4]
 800bc04:	9b01      	ldr	r3, [sp, #4]
 800bc06:	61a3      	str	r3, [r4, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bf14      	ite	ne
 800bc0c:	2202      	movne	r2, #2
 800bc0e:	2201      	moveq	r2, #1
 800bc10:	6122      	str	r2, [r4, #16]
 800bc12:	b1bd      	cbz	r5, 800bc44 <__d2b+0x94>
 800bc14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc18:	4405      	add	r5, r0
 800bc1a:	603d      	str	r5, [r7, #0]
 800bc1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc20:	6030      	str	r0, [r6, #0]
 800bc22:	4620      	mov	r0, r4
 800bc24:	b003      	add	sp, #12
 800bc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc2e:	e7d6      	b.n	800bbde <__d2b+0x2e>
 800bc30:	6161      	str	r1, [r4, #20]
 800bc32:	e7e7      	b.n	800bc04 <__d2b+0x54>
 800bc34:	a801      	add	r0, sp, #4
 800bc36:	f7ff fd61 	bl	800b6fc <__lo0bits>
 800bc3a:	9b01      	ldr	r3, [sp, #4]
 800bc3c:	6163      	str	r3, [r4, #20]
 800bc3e:	3020      	adds	r0, #32
 800bc40:	2201      	movs	r2, #1
 800bc42:	e7e5      	b.n	800bc10 <__d2b+0x60>
 800bc44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc4c:	6038      	str	r0, [r7, #0]
 800bc4e:	6918      	ldr	r0, [r3, #16]
 800bc50:	f7ff fd34 	bl	800b6bc <__hi0bits>
 800bc54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc58:	e7e2      	b.n	800bc20 <__d2b+0x70>
 800bc5a:	bf00      	nop
 800bc5c:	0800cc33 	.word	0x0800cc33
 800bc60:	0800cc44 	.word	0x0800cc44

0800bc64 <__ssputs_r>:
 800bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc68:	688e      	ldr	r6, [r1, #8]
 800bc6a:	461f      	mov	r7, r3
 800bc6c:	42be      	cmp	r6, r7
 800bc6e:	680b      	ldr	r3, [r1, #0]
 800bc70:	4682      	mov	sl, r0
 800bc72:	460c      	mov	r4, r1
 800bc74:	4690      	mov	r8, r2
 800bc76:	d82c      	bhi.n	800bcd2 <__ssputs_r+0x6e>
 800bc78:	898a      	ldrh	r2, [r1, #12]
 800bc7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc7e:	d026      	beq.n	800bcce <__ssputs_r+0x6a>
 800bc80:	6965      	ldr	r5, [r4, #20]
 800bc82:	6909      	ldr	r1, [r1, #16]
 800bc84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc88:	eba3 0901 	sub.w	r9, r3, r1
 800bc8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc90:	1c7b      	adds	r3, r7, #1
 800bc92:	444b      	add	r3, r9
 800bc94:	106d      	asrs	r5, r5, #1
 800bc96:	429d      	cmp	r5, r3
 800bc98:	bf38      	it	cc
 800bc9a:	461d      	movcc	r5, r3
 800bc9c:	0553      	lsls	r3, r2, #21
 800bc9e:	d527      	bpl.n	800bcf0 <__ssputs_r+0x8c>
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7ff fbd7 	bl	800b454 <_malloc_r>
 800bca6:	4606      	mov	r6, r0
 800bca8:	b360      	cbz	r0, 800bd04 <__ssputs_r+0xa0>
 800bcaa:	6921      	ldr	r1, [r4, #16]
 800bcac:	464a      	mov	r2, r9
 800bcae:	f7fe fcb6 	bl	800a61e <memcpy>
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbc:	81a3      	strh	r3, [r4, #12]
 800bcbe:	6126      	str	r6, [r4, #16]
 800bcc0:	6165      	str	r5, [r4, #20]
 800bcc2:	444e      	add	r6, r9
 800bcc4:	eba5 0509 	sub.w	r5, r5, r9
 800bcc8:	6026      	str	r6, [r4, #0]
 800bcca:	60a5      	str	r5, [r4, #8]
 800bccc:	463e      	mov	r6, r7
 800bcce:	42be      	cmp	r6, r7
 800bcd0:	d900      	bls.n	800bcd4 <__ssputs_r+0x70>
 800bcd2:	463e      	mov	r6, r7
 800bcd4:	6820      	ldr	r0, [r4, #0]
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	4641      	mov	r1, r8
 800bcda:	f000 fb81 	bl	800c3e0 <memmove>
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	1b9b      	subs	r3, r3, r6
 800bce2:	60a3      	str	r3, [r4, #8]
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	4433      	add	r3, r6
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	2000      	movs	r0, #0
 800bcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	f000 fbf0 	bl	800c4d6 <_realloc_r>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1e0      	bne.n	800bcbe <__ssputs_r+0x5a>
 800bcfc:	6921      	ldr	r1, [r4, #16]
 800bcfe:	4650      	mov	r0, sl
 800bd00:	f7ff fb34 	bl	800b36c <_free_r>
 800bd04:	230c      	movs	r3, #12
 800bd06:	f8ca 3000 	str.w	r3, [sl]
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	f04f 30ff 	mov.w	r0, #4294967295
 800bd16:	e7e9      	b.n	800bcec <__ssputs_r+0x88>

0800bd18 <_svfiprintf_r>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	4698      	mov	r8, r3
 800bd1e:	898b      	ldrh	r3, [r1, #12]
 800bd20:	061b      	lsls	r3, r3, #24
 800bd22:	b09d      	sub	sp, #116	; 0x74
 800bd24:	4607      	mov	r7, r0
 800bd26:	460d      	mov	r5, r1
 800bd28:	4614      	mov	r4, r2
 800bd2a:	d50e      	bpl.n	800bd4a <_svfiprintf_r+0x32>
 800bd2c:	690b      	ldr	r3, [r1, #16]
 800bd2e:	b963      	cbnz	r3, 800bd4a <_svfiprintf_r+0x32>
 800bd30:	2140      	movs	r1, #64	; 0x40
 800bd32:	f7ff fb8f 	bl	800b454 <_malloc_r>
 800bd36:	6028      	str	r0, [r5, #0]
 800bd38:	6128      	str	r0, [r5, #16]
 800bd3a:	b920      	cbnz	r0, 800bd46 <_svfiprintf_r+0x2e>
 800bd3c:	230c      	movs	r3, #12
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	e0d0      	b.n	800bee8 <_svfiprintf_r+0x1d0>
 800bd46:	2340      	movs	r3, #64	; 0x40
 800bd48:	616b      	str	r3, [r5, #20]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4e:	2320      	movs	r3, #32
 800bd50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd54:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd58:	2330      	movs	r3, #48	; 0x30
 800bd5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf00 <_svfiprintf_r+0x1e8>
 800bd5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd62:	f04f 0901 	mov.w	r9, #1
 800bd66:	4623      	mov	r3, r4
 800bd68:	469a      	mov	sl, r3
 800bd6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd6e:	b10a      	cbz	r2, 800bd74 <_svfiprintf_r+0x5c>
 800bd70:	2a25      	cmp	r2, #37	; 0x25
 800bd72:	d1f9      	bne.n	800bd68 <_svfiprintf_r+0x50>
 800bd74:	ebba 0b04 	subs.w	fp, sl, r4
 800bd78:	d00b      	beq.n	800bd92 <_svfiprintf_r+0x7a>
 800bd7a:	465b      	mov	r3, fp
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	4638      	mov	r0, r7
 800bd82:	f7ff ff6f 	bl	800bc64 <__ssputs_r>
 800bd86:	3001      	adds	r0, #1
 800bd88:	f000 80a9 	beq.w	800bede <_svfiprintf_r+0x1c6>
 800bd8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd8e:	445a      	add	r2, fp
 800bd90:	9209      	str	r2, [sp, #36]	; 0x24
 800bd92:	f89a 3000 	ldrb.w	r3, [sl]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 80a1 	beq.w	800bede <_svfiprintf_r+0x1c6>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bda2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda6:	f10a 0a01 	add.w	sl, sl, #1
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	9307      	str	r3, [sp, #28]
 800bdae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdb2:	931a      	str	r3, [sp, #104]	; 0x68
 800bdb4:	4654      	mov	r4, sl
 800bdb6:	2205      	movs	r2, #5
 800bdb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdbc:	4850      	ldr	r0, [pc, #320]	; (800bf00 <_svfiprintf_r+0x1e8>)
 800bdbe:	f7f4 fa1f 	bl	8000200 <memchr>
 800bdc2:	9a04      	ldr	r2, [sp, #16]
 800bdc4:	b9d8      	cbnz	r0, 800bdfe <_svfiprintf_r+0xe6>
 800bdc6:	06d0      	lsls	r0, r2, #27
 800bdc8:	bf44      	itt	mi
 800bdca:	2320      	movmi	r3, #32
 800bdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd0:	0711      	lsls	r1, r2, #28
 800bdd2:	bf44      	itt	mi
 800bdd4:	232b      	movmi	r3, #43	; 0x2b
 800bdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdda:	f89a 3000 	ldrb.w	r3, [sl]
 800bdde:	2b2a      	cmp	r3, #42	; 0x2a
 800bde0:	d015      	beq.n	800be0e <_svfiprintf_r+0xf6>
 800bde2:	9a07      	ldr	r2, [sp, #28]
 800bde4:	4654      	mov	r4, sl
 800bde6:	2000      	movs	r0, #0
 800bde8:	f04f 0c0a 	mov.w	ip, #10
 800bdec:	4621      	mov	r1, r4
 800bdee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf2:	3b30      	subs	r3, #48	; 0x30
 800bdf4:	2b09      	cmp	r3, #9
 800bdf6:	d94d      	bls.n	800be94 <_svfiprintf_r+0x17c>
 800bdf8:	b1b0      	cbz	r0, 800be28 <_svfiprintf_r+0x110>
 800bdfa:	9207      	str	r2, [sp, #28]
 800bdfc:	e014      	b.n	800be28 <_svfiprintf_r+0x110>
 800bdfe:	eba0 0308 	sub.w	r3, r0, r8
 800be02:	fa09 f303 	lsl.w	r3, r9, r3
 800be06:	4313      	orrs	r3, r2
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	46a2      	mov	sl, r4
 800be0c:	e7d2      	b.n	800bdb4 <_svfiprintf_r+0x9c>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	1d19      	adds	r1, r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9103      	str	r1, [sp, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfbb      	ittet	lt
 800be1a:	425b      	neglt	r3, r3
 800be1c:	f042 0202 	orrlt.w	r2, r2, #2
 800be20:	9307      	strge	r3, [sp, #28]
 800be22:	9307      	strlt	r3, [sp, #28]
 800be24:	bfb8      	it	lt
 800be26:	9204      	strlt	r2, [sp, #16]
 800be28:	7823      	ldrb	r3, [r4, #0]
 800be2a:	2b2e      	cmp	r3, #46	; 0x2e
 800be2c:	d10c      	bne.n	800be48 <_svfiprintf_r+0x130>
 800be2e:	7863      	ldrb	r3, [r4, #1]
 800be30:	2b2a      	cmp	r3, #42	; 0x2a
 800be32:	d134      	bne.n	800be9e <_svfiprintf_r+0x186>
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	1d1a      	adds	r2, r3, #4
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	9203      	str	r2, [sp, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfb8      	it	lt
 800be40:	f04f 33ff 	movlt.w	r3, #4294967295
 800be44:	3402      	adds	r4, #2
 800be46:	9305      	str	r3, [sp, #20]
 800be48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf10 <_svfiprintf_r+0x1f8>
 800be4c:	7821      	ldrb	r1, [r4, #0]
 800be4e:	2203      	movs	r2, #3
 800be50:	4650      	mov	r0, sl
 800be52:	f7f4 f9d5 	bl	8000200 <memchr>
 800be56:	b138      	cbz	r0, 800be68 <_svfiprintf_r+0x150>
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	eba0 000a 	sub.w	r0, r0, sl
 800be5e:	2240      	movs	r2, #64	; 0x40
 800be60:	4082      	lsls	r2, r0
 800be62:	4313      	orrs	r3, r2
 800be64:	3401      	adds	r4, #1
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	4825      	ldr	r0, [pc, #148]	; (800bf04 <_svfiprintf_r+0x1ec>)
 800be6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be72:	2206      	movs	r2, #6
 800be74:	f7f4 f9c4 	bl	8000200 <memchr>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d038      	beq.n	800beee <_svfiprintf_r+0x1d6>
 800be7c:	4b22      	ldr	r3, [pc, #136]	; (800bf08 <_svfiprintf_r+0x1f0>)
 800be7e:	bb1b      	cbnz	r3, 800bec8 <_svfiprintf_r+0x1b0>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	3307      	adds	r3, #7
 800be84:	f023 0307 	bic.w	r3, r3, #7
 800be88:	3308      	adds	r3, #8
 800be8a:	9303      	str	r3, [sp, #12]
 800be8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8e:	4433      	add	r3, r6
 800be90:	9309      	str	r3, [sp, #36]	; 0x24
 800be92:	e768      	b.n	800bd66 <_svfiprintf_r+0x4e>
 800be94:	fb0c 3202 	mla	r2, ip, r2, r3
 800be98:	460c      	mov	r4, r1
 800be9a:	2001      	movs	r0, #1
 800be9c:	e7a6      	b.n	800bdec <_svfiprintf_r+0xd4>
 800be9e:	2300      	movs	r3, #0
 800bea0:	3401      	adds	r4, #1
 800bea2:	9305      	str	r3, [sp, #20]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f04f 0c0a 	mov.w	ip, #10
 800beaa:	4620      	mov	r0, r4
 800beac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beb0:	3a30      	subs	r2, #48	; 0x30
 800beb2:	2a09      	cmp	r2, #9
 800beb4:	d903      	bls.n	800bebe <_svfiprintf_r+0x1a6>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0c6      	beq.n	800be48 <_svfiprintf_r+0x130>
 800beba:	9105      	str	r1, [sp, #20]
 800bebc:	e7c4      	b.n	800be48 <_svfiprintf_r+0x130>
 800bebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bec2:	4604      	mov	r4, r0
 800bec4:	2301      	movs	r3, #1
 800bec6:	e7f0      	b.n	800beaa <_svfiprintf_r+0x192>
 800bec8:	ab03      	add	r3, sp, #12
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	462a      	mov	r2, r5
 800bece:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <_svfiprintf_r+0x1f4>)
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	4638      	mov	r0, r7
 800bed4:	f7fd fcda 	bl	800988c <_printf_float>
 800bed8:	1c42      	adds	r2, r0, #1
 800beda:	4606      	mov	r6, r0
 800bedc:	d1d6      	bne.n	800be8c <_svfiprintf_r+0x174>
 800bede:	89ab      	ldrh	r3, [r5, #12]
 800bee0:	065b      	lsls	r3, r3, #25
 800bee2:	f53f af2d 	bmi.w	800bd40 <_svfiprintf_r+0x28>
 800bee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bee8:	b01d      	add	sp, #116	; 0x74
 800beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beee:	ab03      	add	r3, sp, #12
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	462a      	mov	r2, r5
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <_svfiprintf_r+0x1f4>)
 800bef6:	a904      	add	r1, sp, #16
 800bef8:	4638      	mov	r0, r7
 800befa:	f7fd ff6b 	bl	8009dd4 <_printf_i>
 800befe:	e7eb      	b.n	800bed8 <_svfiprintf_r+0x1c0>
 800bf00:	0800cd9c 	.word	0x0800cd9c
 800bf04:	0800cda6 	.word	0x0800cda6
 800bf08:	0800988d 	.word	0x0800988d
 800bf0c:	0800bc65 	.word	0x0800bc65
 800bf10:	0800cda2 	.word	0x0800cda2

0800bf14 <__sfputc_r>:
 800bf14:	6893      	ldr	r3, [r2, #8]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	b410      	push	{r4}
 800bf1c:	6093      	str	r3, [r2, #8]
 800bf1e:	da08      	bge.n	800bf32 <__sfputc_r+0x1e>
 800bf20:	6994      	ldr	r4, [r2, #24]
 800bf22:	42a3      	cmp	r3, r4
 800bf24:	db01      	blt.n	800bf2a <__sfputc_r+0x16>
 800bf26:	290a      	cmp	r1, #10
 800bf28:	d103      	bne.n	800bf32 <__sfputc_r+0x1e>
 800bf2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf2e:	f7fe ba06 	b.w	800a33e <__swbuf_r>
 800bf32:	6813      	ldr	r3, [r2, #0]
 800bf34:	1c58      	adds	r0, r3, #1
 800bf36:	6010      	str	r0, [r2, #0]
 800bf38:	7019      	strb	r1, [r3, #0]
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <__sfputs_r>:
 800bf42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	18d5      	adds	r5, r2, r3
 800bf4c:	42ac      	cmp	r4, r5
 800bf4e:	d101      	bne.n	800bf54 <__sfputs_r+0x12>
 800bf50:	2000      	movs	r0, #0
 800bf52:	e007      	b.n	800bf64 <__sfputs_r+0x22>
 800bf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf58:	463a      	mov	r2, r7
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7ff ffda 	bl	800bf14 <__sfputc_r>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d1f3      	bne.n	800bf4c <__sfputs_r+0xa>
 800bf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf68 <_vfiprintf_r>:
 800bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	b09d      	sub	sp, #116	; 0x74
 800bf70:	4614      	mov	r4, r2
 800bf72:	4698      	mov	r8, r3
 800bf74:	4606      	mov	r6, r0
 800bf76:	b118      	cbz	r0, 800bf80 <_vfiprintf_r+0x18>
 800bf78:	6a03      	ldr	r3, [r0, #32]
 800bf7a:	b90b      	cbnz	r3, 800bf80 <_vfiprintf_r+0x18>
 800bf7c:	f7fe f8d8 	bl	800a130 <__sinit>
 800bf80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf82:	07d9      	lsls	r1, r3, #31
 800bf84:	d405      	bmi.n	800bf92 <_vfiprintf_r+0x2a>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	059a      	lsls	r2, r3, #22
 800bf8a:	d402      	bmi.n	800bf92 <_vfiprintf_r+0x2a>
 800bf8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf8e:	f7fe fb44 	bl	800a61a <__retarget_lock_acquire_recursive>
 800bf92:	89ab      	ldrh	r3, [r5, #12]
 800bf94:	071b      	lsls	r3, r3, #28
 800bf96:	d501      	bpl.n	800bf9c <_vfiprintf_r+0x34>
 800bf98:	692b      	ldr	r3, [r5, #16]
 800bf9a:	b99b      	cbnz	r3, 800bfc4 <_vfiprintf_r+0x5c>
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7fe fa0a 	bl	800a3b8 <__swsetup_r>
 800bfa4:	b170      	cbz	r0, 800bfc4 <_vfiprintf_r+0x5c>
 800bfa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfa8:	07dc      	lsls	r4, r3, #31
 800bfaa:	d504      	bpl.n	800bfb6 <_vfiprintf_r+0x4e>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	b01d      	add	sp, #116	; 0x74
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	0598      	lsls	r0, r3, #22
 800bfba:	d4f7      	bmi.n	800bfac <_vfiprintf_r+0x44>
 800bfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfbe:	f7fe fb2d 	bl	800a61c <__retarget_lock_release_recursive>
 800bfc2:	e7f3      	b.n	800bfac <_vfiprintf_r+0x44>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc8:	2320      	movs	r3, #32
 800bfca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfce:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfd2:	2330      	movs	r3, #48	; 0x30
 800bfd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c188 <_vfiprintf_r+0x220>
 800bfd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfdc:	f04f 0901 	mov.w	r9, #1
 800bfe0:	4623      	mov	r3, r4
 800bfe2:	469a      	mov	sl, r3
 800bfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfe8:	b10a      	cbz	r2, 800bfee <_vfiprintf_r+0x86>
 800bfea:	2a25      	cmp	r2, #37	; 0x25
 800bfec:	d1f9      	bne.n	800bfe2 <_vfiprintf_r+0x7a>
 800bfee:	ebba 0b04 	subs.w	fp, sl, r4
 800bff2:	d00b      	beq.n	800c00c <_vfiprintf_r+0xa4>
 800bff4:	465b      	mov	r3, fp
 800bff6:	4622      	mov	r2, r4
 800bff8:	4629      	mov	r1, r5
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7ff ffa1 	bl	800bf42 <__sfputs_r>
 800c000:	3001      	adds	r0, #1
 800c002:	f000 80a9 	beq.w	800c158 <_vfiprintf_r+0x1f0>
 800c006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c008:	445a      	add	r2, fp
 800c00a:	9209      	str	r2, [sp, #36]	; 0x24
 800c00c:	f89a 3000 	ldrb.w	r3, [sl]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 80a1 	beq.w	800c158 <_vfiprintf_r+0x1f0>
 800c016:	2300      	movs	r3, #0
 800c018:	f04f 32ff 	mov.w	r2, #4294967295
 800c01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c020:	f10a 0a01 	add.w	sl, sl, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	9307      	str	r3, [sp, #28]
 800c028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c02c:	931a      	str	r3, [sp, #104]	; 0x68
 800c02e:	4654      	mov	r4, sl
 800c030:	2205      	movs	r2, #5
 800c032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c036:	4854      	ldr	r0, [pc, #336]	; (800c188 <_vfiprintf_r+0x220>)
 800c038:	f7f4 f8e2 	bl	8000200 <memchr>
 800c03c:	9a04      	ldr	r2, [sp, #16]
 800c03e:	b9d8      	cbnz	r0, 800c078 <_vfiprintf_r+0x110>
 800c040:	06d1      	lsls	r1, r2, #27
 800c042:	bf44      	itt	mi
 800c044:	2320      	movmi	r3, #32
 800c046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c04a:	0713      	lsls	r3, r2, #28
 800c04c:	bf44      	itt	mi
 800c04e:	232b      	movmi	r3, #43	; 0x2b
 800c050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c054:	f89a 3000 	ldrb.w	r3, [sl]
 800c058:	2b2a      	cmp	r3, #42	; 0x2a
 800c05a:	d015      	beq.n	800c088 <_vfiprintf_r+0x120>
 800c05c:	9a07      	ldr	r2, [sp, #28]
 800c05e:	4654      	mov	r4, sl
 800c060:	2000      	movs	r0, #0
 800c062:	f04f 0c0a 	mov.w	ip, #10
 800c066:	4621      	mov	r1, r4
 800c068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c06c:	3b30      	subs	r3, #48	; 0x30
 800c06e:	2b09      	cmp	r3, #9
 800c070:	d94d      	bls.n	800c10e <_vfiprintf_r+0x1a6>
 800c072:	b1b0      	cbz	r0, 800c0a2 <_vfiprintf_r+0x13a>
 800c074:	9207      	str	r2, [sp, #28]
 800c076:	e014      	b.n	800c0a2 <_vfiprintf_r+0x13a>
 800c078:	eba0 0308 	sub.w	r3, r0, r8
 800c07c:	fa09 f303 	lsl.w	r3, r9, r3
 800c080:	4313      	orrs	r3, r2
 800c082:	9304      	str	r3, [sp, #16]
 800c084:	46a2      	mov	sl, r4
 800c086:	e7d2      	b.n	800c02e <_vfiprintf_r+0xc6>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	1d19      	adds	r1, r3, #4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	9103      	str	r1, [sp, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfbb      	ittet	lt
 800c094:	425b      	neglt	r3, r3
 800c096:	f042 0202 	orrlt.w	r2, r2, #2
 800c09a:	9307      	strge	r3, [sp, #28]
 800c09c:	9307      	strlt	r3, [sp, #28]
 800c09e:	bfb8      	it	lt
 800c0a0:	9204      	strlt	r2, [sp, #16]
 800c0a2:	7823      	ldrb	r3, [r4, #0]
 800c0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c0a6:	d10c      	bne.n	800c0c2 <_vfiprintf_r+0x15a>
 800c0a8:	7863      	ldrb	r3, [r4, #1]
 800c0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ac:	d134      	bne.n	800c118 <_vfiprintf_r+0x1b0>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	1d1a      	adds	r2, r3, #4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	9203      	str	r2, [sp, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	bfb8      	it	lt
 800c0ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0be:	3402      	adds	r4, #2
 800c0c0:	9305      	str	r3, [sp, #20]
 800c0c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c198 <_vfiprintf_r+0x230>
 800c0c6:	7821      	ldrb	r1, [r4, #0]
 800c0c8:	2203      	movs	r2, #3
 800c0ca:	4650      	mov	r0, sl
 800c0cc:	f7f4 f898 	bl	8000200 <memchr>
 800c0d0:	b138      	cbz	r0, 800c0e2 <_vfiprintf_r+0x17a>
 800c0d2:	9b04      	ldr	r3, [sp, #16]
 800c0d4:	eba0 000a 	sub.w	r0, r0, sl
 800c0d8:	2240      	movs	r2, #64	; 0x40
 800c0da:	4082      	lsls	r2, r0
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	3401      	adds	r4, #1
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e6:	4829      	ldr	r0, [pc, #164]	; (800c18c <_vfiprintf_r+0x224>)
 800c0e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ec:	2206      	movs	r2, #6
 800c0ee:	f7f4 f887 	bl	8000200 <memchr>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d03f      	beq.n	800c176 <_vfiprintf_r+0x20e>
 800c0f6:	4b26      	ldr	r3, [pc, #152]	; (800c190 <_vfiprintf_r+0x228>)
 800c0f8:	bb1b      	cbnz	r3, 800c142 <_vfiprintf_r+0x1da>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	3307      	adds	r3, #7
 800c0fe:	f023 0307 	bic.w	r3, r3, #7
 800c102:	3308      	adds	r3, #8
 800c104:	9303      	str	r3, [sp, #12]
 800c106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c108:	443b      	add	r3, r7
 800c10a:	9309      	str	r3, [sp, #36]	; 0x24
 800c10c:	e768      	b.n	800bfe0 <_vfiprintf_r+0x78>
 800c10e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c112:	460c      	mov	r4, r1
 800c114:	2001      	movs	r0, #1
 800c116:	e7a6      	b.n	800c066 <_vfiprintf_r+0xfe>
 800c118:	2300      	movs	r3, #0
 800c11a:	3401      	adds	r4, #1
 800c11c:	9305      	str	r3, [sp, #20]
 800c11e:	4619      	mov	r1, r3
 800c120:	f04f 0c0a 	mov.w	ip, #10
 800c124:	4620      	mov	r0, r4
 800c126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c12a:	3a30      	subs	r2, #48	; 0x30
 800c12c:	2a09      	cmp	r2, #9
 800c12e:	d903      	bls.n	800c138 <_vfiprintf_r+0x1d0>
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0c6      	beq.n	800c0c2 <_vfiprintf_r+0x15a>
 800c134:	9105      	str	r1, [sp, #20]
 800c136:	e7c4      	b.n	800c0c2 <_vfiprintf_r+0x15a>
 800c138:	fb0c 2101 	mla	r1, ip, r1, r2
 800c13c:	4604      	mov	r4, r0
 800c13e:	2301      	movs	r3, #1
 800c140:	e7f0      	b.n	800c124 <_vfiprintf_r+0x1bc>
 800c142:	ab03      	add	r3, sp, #12
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	462a      	mov	r2, r5
 800c148:	4b12      	ldr	r3, [pc, #72]	; (800c194 <_vfiprintf_r+0x22c>)
 800c14a:	a904      	add	r1, sp, #16
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7fd fb9d 	bl	800988c <_printf_float>
 800c152:	4607      	mov	r7, r0
 800c154:	1c78      	adds	r0, r7, #1
 800c156:	d1d6      	bne.n	800c106 <_vfiprintf_r+0x19e>
 800c158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c15a:	07d9      	lsls	r1, r3, #31
 800c15c:	d405      	bmi.n	800c16a <_vfiprintf_r+0x202>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	059a      	lsls	r2, r3, #22
 800c162:	d402      	bmi.n	800c16a <_vfiprintf_r+0x202>
 800c164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c166:	f7fe fa59 	bl	800a61c <__retarget_lock_release_recursive>
 800c16a:	89ab      	ldrh	r3, [r5, #12]
 800c16c:	065b      	lsls	r3, r3, #25
 800c16e:	f53f af1d 	bmi.w	800bfac <_vfiprintf_r+0x44>
 800c172:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c174:	e71c      	b.n	800bfb0 <_vfiprintf_r+0x48>
 800c176:	ab03      	add	r3, sp, #12
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	462a      	mov	r2, r5
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <_vfiprintf_r+0x22c>)
 800c17e:	a904      	add	r1, sp, #16
 800c180:	4630      	mov	r0, r6
 800c182:	f7fd fe27 	bl	8009dd4 <_printf_i>
 800c186:	e7e4      	b.n	800c152 <_vfiprintf_r+0x1ea>
 800c188:	0800cd9c 	.word	0x0800cd9c
 800c18c:	0800cda6 	.word	0x0800cda6
 800c190:	0800988d 	.word	0x0800988d
 800c194:	0800bf43 	.word	0x0800bf43
 800c198:	0800cda2 	.word	0x0800cda2

0800c19c <__sflush_r>:
 800c19c:	898a      	ldrh	r2, [r1, #12]
 800c19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	0710      	lsls	r0, r2, #28
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	d458      	bmi.n	800c25c <__sflush_r+0xc0>
 800c1aa:	684b      	ldr	r3, [r1, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dc05      	bgt.n	800c1bc <__sflush_r+0x20>
 800c1b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	dc02      	bgt.n	800c1bc <__sflush_r+0x20>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1be:	2e00      	cmp	r6, #0
 800c1c0:	d0f9      	beq.n	800c1b6 <__sflush_r+0x1a>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1c8:	682f      	ldr	r7, [r5, #0]
 800c1ca:	6a21      	ldr	r1, [r4, #32]
 800c1cc:	602b      	str	r3, [r5, #0]
 800c1ce:	d032      	beq.n	800c236 <__sflush_r+0x9a>
 800c1d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	075a      	lsls	r2, r3, #29
 800c1d6:	d505      	bpl.n	800c1e4 <__sflush_r+0x48>
 800c1d8:	6863      	ldr	r3, [r4, #4]
 800c1da:	1ac0      	subs	r0, r0, r3
 800c1dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1de:	b10b      	cbz	r3, 800c1e4 <__sflush_r+0x48>
 800c1e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1e2:	1ac0      	subs	r0, r0, r3
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ea:	6a21      	ldr	r1, [r4, #32]
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47b0      	blx	r6
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	d106      	bne.n	800c204 <__sflush_r+0x68>
 800c1f6:	6829      	ldr	r1, [r5, #0]
 800c1f8:	291d      	cmp	r1, #29
 800c1fa:	d82b      	bhi.n	800c254 <__sflush_r+0xb8>
 800c1fc:	4a29      	ldr	r2, [pc, #164]	; (800c2a4 <__sflush_r+0x108>)
 800c1fe:	410a      	asrs	r2, r1
 800c200:	07d6      	lsls	r6, r2, #31
 800c202:	d427      	bmi.n	800c254 <__sflush_r+0xb8>
 800c204:	2200      	movs	r2, #0
 800c206:	6062      	str	r2, [r4, #4]
 800c208:	04d9      	lsls	r1, r3, #19
 800c20a:	6922      	ldr	r2, [r4, #16]
 800c20c:	6022      	str	r2, [r4, #0]
 800c20e:	d504      	bpl.n	800c21a <__sflush_r+0x7e>
 800c210:	1c42      	adds	r2, r0, #1
 800c212:	d101      	bne.n	800c218 <__sflush_r+0x7c>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b903      	cbnz	r3, 800c21a <__sflush_r+0x7e>
 800c218:	6560      	str	r0, [r4, #84]	; 0x54
 800c21a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c21c:	602f      	str	r7, [r5, #0]
 800c21e:	2900      	cmp	r1, #0
 800c220:	d0c9      	beq.n	800c1b6 <__sflush_r+0x1a>
 800c222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c226:	4299      	cmp	r1, r3
 800c228:	d002      	beq.n	800c230 <__sflush_r+0x94>
 800c22a:	4628      	mov	r0, r5
 800c22c:	f7ff f89e 	bl	800b36c <_free_r>
 800c230:	2000      	movs	r0, #0
 800c232:	6360      	str	r0, [r4, #52]	; 0x34
 800c234:	e7c0      	b.n	800c1b8 <__sflush_r+0x1c>
 800c236:	2301      	movs	r3, #1
 800c238:	4628      	mov	r0, r5
 800c23a:	47b0      	blx	r6
 800c23c:	1c41      	adds	r1, r0, #1
 800c23e:	d1c8      	bne.n	800c1d2 <__sflush_r+0x36>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0c5      	beq.n	800c1d2 <__sflush_r+0x36>
 800c246:	2b1d      	cmp	r3, #29
 800c248:	d001      	beq.n	800c24e <__sflush_r+0xb2>
 800c24a:	2b16      	cmp	r3, #22
 800c24c:	d101      	bne.n	800c252 <__sflush_r+0xb6>
 800c24e:	602f      	str	r7, [r5, #0]
 800c250:	e7b1      	b.n	800c1b6 <__sflush_r+0x1a>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	e7ad      	b.n	800c1b8 <__sflush_r+0x1c>
 800c25c:	690f      	ldr	r7, [r1, #16]
 800c25e:	2f00      	cmp	r7, #0
 800c260:	d0a9      	beq.n	800c1b6 <__sflush_r+0x1a>
 800c262:	0793      	lsls	r3, r2, #30
 800c264:	680e      	ldr	r6, [r1, #0]
 800c266:	bf08      	it	eq
 800c268:	694b      	ldreq	r3, [r1, #20]
 800c26a:	600f      	str	r7, [r1, #0]
 800c26c:	bf18      	it	ne
 800c26e:	2300      	movne	r3, #0
 800c270:	eba6 0807 	sub.w	r8, r6, r7
 800c274:	608b      	str	r3, [r1, #8]
 800c276:	f1b8 0f00 	cmp.w	r8, #0
 800c27a:	dd9c      	ble.n	800c1b6 <__sflush_r+0x1a>
 800c27c:	6a21      	ldr	r1, [r4, #32]
 800c27e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c280:	4643      	mov	r3, r8
 800c282:	463a      	mov	r2, r7
 800c284:	4628      	mov	r0, r5
 800c286:	47b0      	blx	r6
 800c288:	2800      	cmp	r0, #0
 800c28a:	dc06      	bgt.n	800c29a <__sflush_r+0xfe>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e78e      	b.n	800c1b8 <__sflush_r+0x1c>
 800c29a:	4407      	add	r7, r0
 800c29c:	eba8 0800 	sub.w	r8, r8, r0
 800c2a0:	e7e9      	b.n	800c276 <__sflush_r+0xda>
 800c2a2:	bf00      	nop
 800c2a4:	dfbffffe 	.word	0xdfbffffe

0800c2a8 <_fflush_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	690b      	ldr	r3, [r1, #16]
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	b913      	cbnz	r3, 800c2b8 <_fflush_r+0x10>
 800c2b2:	2500      	movs	r5, #0
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	b118      	cbz	r0, 800c2c2 <_fflush_r+0x1a>
 800c2ba:	6a03      	ldr	r3, [r0, #32]
 800c2bc:	b90b      	cbnz	r3, 800c2c2 <_fflush_r+0x1a>
 800c2be:	f7fd ff37 	bl	800a130 <__sinit>
 800c2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0f3      	beq.n	800c2b2 <_fflush_r+0xa>
 800c2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2cc:	07d0      	lsls	r0, r2, #31
 800c2ce:	d404      	bmi.n	800c2da <_fflush_r+0x32>
 800c2d0:	0599      	lsls	r1, r3, #22
 800c2d2:	d402      	bmi.n	800c2da <_fflush_r+0x32>
 800c2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2d6:	f7fe f9a0 	bl	800a61a <__retarget_lock_acquire_recursive>
 800c2da:	4628      	mov	r0, r5
 800c2dc:	4621      	mov	r1, r4
 800c2de:	f7ff ff5d 	bl	800c19c <__sflush_r>
 800c2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e4:	07da      	lsls	r2, r3, #31
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	d4e4      	bmi.n	800c2b4 <_fflush_r+0xc>
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	059b      	lsls	r3, r3, #22
 800c2ee:	d4e1      	bmi.n	800c2b4 <_fflush_r+0xc>
 800c2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f2:	f7fe f993 	bl	800a61c <__retarget_lock_release_recursive>
 800c2f6:	e7dd      	b.n	800c2b4 <_fflush_r+0xc>

0800c2f8 <fiprintf>:
 800c2f8:	b40e      	push	{r1, r2, r3}
 800c2fa:	b503      	push	{r0, r1, lr}
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	4805      	ldr	r0, [pc, #20]	; (800c318 <fiprintf+0x20>)
 800c302:	f853 2b04 	ldr.w	r2, [r3], #4
 800c306:	6800      	ldr	r0, [r0, #0]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	f7ff fe2d 	bl	800bf68 <_vfiprintf_r>
 800c30e:	b002      	add	sp, #8
 800c310:	f85d eb04 	ldr.w	lr, [sp], #4
 800c314:	b003      	add	sp, #12
 800c316:	4770      	bx	lr
 800c318:	20000074 	.word	0x20000074

0800c31c <__swhatbuf_r>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	460c      	mov	r4, r1
 800c320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c324:	2900      	cmp	r1, #0
 800c326:	b096      	sub	sp, #88	; 0x58
 800c328:	4615      	mov	r5, r2
 800c32a:	461e      	mov	r6, r3
 800c32c:	da0d      	bge.n	800c34a <__swhatbuf_r+0x2e>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c334:	f04f 0100 	mov.w	r1, #0
 800c338:	bf0c      	ite	eq
 800c33a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c33e:	2340      	movne	r3, #64	; 0x40
 800c340:	2000      	movs	r0, #0
 800c342:	6031      	str	r1, [r6, #0]
 800c344:	602b      	str	r3, [r5, #0]
 800c346:	b016      	add	sp, #88	; 0x58
 800c348:	bd70      	pop	{r4, r5, r6, pc}
 800c34a:	466a      	mov	r2, sp
 800c34c:	f000 f862 	bl	800c414 <_fstat_r>
 800c350:	2800      	cmp	r0, #0
 800c352:	dbec      	blt.n	800c32e <__swhatbuf_r+0x12>
 800c354:	9901      	ldr	r1, [sp, #4]
 800c356:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c35a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c35e:	4259      	negs	r1, r3
 800c360:	4159      	adcs	r1, r3
 800c362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c366:	e7eb      	b.n	800c340 <__swhatbuf_r+0x24>

0800c368 <__smakebuf_r>:
 800c368:	898b      	ldrh	r3, [r1, #12]
 800c36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c36c:	079d      	lsls	r5, r3, #30
 800c36e:	4606      	mov	r6, r0
 800c370:	460c      	mov	r4, r1
 800c372:	d507      	bpl.n	800c384 <__smakebuf_r+0x1c>
 800c374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	2301      	movs	r3, #1
 800c37e:	6163      	str	r3, [r4, #20]
 800c380:	b002      	add	sp, #8
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	ab01      	add	r3, sp, #4
 800c386:	466a      	mov	r2, sp
 800c388:	f7ff ffc8 	bl	800c31c <__swhatbuf_r>
 800c38c:	9900      	ldr	r1, [sp, #0]
 800c38e:	4605      	mov	r5, r0
 800c390:	4630      	mov	r0, r6
 800c392:	f7ff f85f 	bl	800b454 <_malloc_r>
 800c396:	b948      	cbnz	r0, 800c3ac <__smakebuf_r+0x44>
 800c398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c39c:	059a      	lsls	r2, r3, #22
 800c39e:	d4ef      	bmi.n	800c380 <__smakebuf_r+0x18>
 800c3a0:	f023 0303 	bic.w	r3, r3, #3
 800c3a4:	f043 0302 	orr.w	r3, r3, #2
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	e7e3      	b.n	800c374 <__smakebuf_r+0xc>
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	6020      	str	r0, [r4, #0]
 800c3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b4:	81a3      	strh	r3, [r4, #12]
 800c3b6:	9b00      	ldr	r3, [sp, #0]
 800c3b8:	6163      	str	r3, [r4, #20]
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	6120      	str	r0, [r4, #16]
 800c3be:	b15b      	cbz	r3, 800c3d8 <__smakebuf_r+0x70>
 800c3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f000 f837 	bl	800c438 <_isatty_r>
 800c3ca:	b128      	cbz	r0, 800c3d8 <__smakebuf_r+0x70>
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	f043 0301 	orr.w	r3, r3, #1
 800c3d6:	81a3      	strh	r3, [r4, #12]
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	431d      	orrs	r5, r3
 800c3dc:	81a5      	strh	r5, [r4, #12]
 800c3de:	e7cf      	b.n	800c380 <__smakebuf_r+0x18>

0800c3e0 <memmove>:
 800c3e0:	4288      	cmp	r0, r1
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	eb01 0402 	add.w	r4, r1, r2
 800c3e8:	d902      	bls.n	800c3f0 <memmove+0x10>
 800c3ea:	4284      	cmp	r4, r0
 800c3ec:	4623      	mov	r3, r4
 800c3ee:	d807      	bhi.n	800c400 <memmove+0x20>
 800c3f0:	1e43      	subs	r3, r0, #1
 800c3f2:	42a1      	cmp	r1, r4
 800c3f4:	d008      	beq.n	800c408 <memmove+0x28>
 800c3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3fe:	e7f8      	b.n	800c3f2 <memmove+0x12>
 800c400:	4402      	add	r2, r0
 800c402:	4601      	mov	r1, r0
 800c404:	428a      	cmp	r2, r1
 800c406:	d100      	bne.n	800c40a <memmove+0x2a>
 800c408:	bd10      	pop	{r4, pc}
 800c40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c412:	e7f7      	b.n	800c404 <memmove+0x24>

0800c414 <_fstat_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d07      	ldr	r5, [pc, #28]	; (800c434 <_fstat_r+0x20>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	f7f6 f880 	bl	8002526 <_fstat>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d102      	bne.n	800c430 <_fstat_r+0x1c>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	b103      	cbz	r3, 800c430 <_fstat_r+0x1c>
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	bd38      	pop	{r3, r4, r5, pc}
 800c432:	bf00      	nop
 800c434:	20004e4c 	.word	0x20004e4c

0800c438 <_isatty_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d06      	ldr	r5, [pc, #24]	; (800c454 <_isatty_r+0x1c>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7f6 f87f 	bl	8002546 <_isatty>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_isatty_r+0x1a>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_isatty_r+0x1a>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20004e4c 	.word	0x20004e4c

0800c458 <_sbrk_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d06      	ldr	r5, [pc, #24]	; (800c474 <_sbrk_r+0x1c>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f6 f888 	bl	8002578 <_sbrk>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_sbrk_r+0x1a>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_sbrk_r+0x1a>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	20004e4c 	.word	0x20004e4c

0800c478 <abort>:
 800c478:	b508      	push	{r3, lr}
 800c47a:	2006      	movs	r0, #6
 800c47c:	f000 f890 	bl	800c5a0 <raise>
 800c480:	2001      	movs	r0, #1
 800c482:	f7f6 f801 	bl	8002488 <_exit>

0800c486 <_calloc_r>:
 800c486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c488:	fba1 2402 	umull	r2, r4, r1, r2
 800c48c:	b94c      	cbnz	r4, 800c4a2 <_calloc_r+0x1c>
 800c48e:	4611      	mov	r1, r2
 800c490:	9201      	str	r2, [sp, #4]
 800c492:	f7fe ffdf 	bl	800b454 <_malloc_r>
 800c496:	9a01      	ldr	r2, [sp, #4]
 800c498:	4605      	mov	r5, r0
 800c49a:	b930      	cbnz	r0, 800c4aa <_calloc_r+0x24>
 800c49c:	4628      	mov	r0, r5
 800c49e:	b003      	add	sp, #12
 800c4a0:	bd30      	pop	{r4, r5, pc}
 800c4a2:	220c      	movs	r2, #12
 800c4a4:	6002      	str	r2, [r0, #0]
 800c4a6:	2500      	movs	r5, #0
 800c4a8:	e7f8      	b.n	800c49c <_calloc_r+0x16>
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	f7fd ffdc 	bl	800a468 <memset>
 800c4b0:	e7f4      	b.n	800c49c <_calloc_r+0x16>

0800c4b2 <__ascii_mbtowc>:
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	b901      	cbnz	r1, 800c4b8 <__ascii_mbtowc+0x6>
 800c4b6:	a901      	add	r1, sp, #4
 800c4b8:	b142      	cbz	r2, 800c4cc <__ascii_mbtowc+0x1a>
 800c4ba:	b14b      	cbz	r3, 800c4d0 <__ascii_mbtowc+0x1e>
 800c4bc:	7813      	ldrb	r3, [r2, #0]
 800c4be:	600b      	str	r3, [r1, #0]
 800c4c0:	7812      	ldrb	r2, [r2, #0]
 800c4c2:	1e10      	subs	r0, r2, #0
 800c4c4:	bf18      	it	ne
 800c4c6:	2001      	movne	r0, #1
 800c4c8:	b002      	add	sp, #8
 800c4ca:	4770      	bx	lr
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	e7fb      	b.n	800c4c8 <__ascii_mbtowc+0x16>
 800c4d0:	f06f 0001 	mvn.w	r0, #1
 800c4d4:	e7f8      	b.n	800c4c8 <__ascii_mbtowc+0x16>

0800c4d6 <_realloc_r>:
 800c4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4da:	4680      	mov	r8, r0
 800c4dc:	4614      	mov	r4, r2
 800c4de:	460e      	mov	r6, r1
 800c4e0:	b921      	cbnz	r1, 800c4ec <_realloc_r+0x16>
 800c4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	f7fe bfb4 	b.w	800b454 <_malloc_r>
 800c4ec:	b92a      	cbnz	r2, 800c4fa <_realloc_r+0x24>
 800c4ee:	f7fe ff3d 	bl	800b36c <_free_r>
 800c4f2:	4625      	mov	r5, r4
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4fa:	f000 f86d 	bl	800c5d8 <_malloc_usable_size_r>
 800c4fe:	4284      	cmp	r4, r0
 800c500:	4607      	mov	r7, r0
 800c502:	d802      	bhi.n	800c50a <_realloc_r+0x34>
 800c504:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c508:	d812      	bhi.n	800c530 <_realloc_r+0x5a>
 800c50a:	4621      	mov	r1, r4
 800c50c:	4640      	mov	r0, r8
 800c50e:	f7fe ffa1 	bl	800b454 <_malloc_r>
 800c512:	4605      	mov	r5, r0
 800c514:	2800      	cmp	r0, #0
 800c516:	d0ed      	beq.n	800c4f4 <_realloc_r+0x1e>
 800c518:	42bc      	cmp	r4, r7
 800c51a:	4622      	mov	r2, r4
 800c51c:	4631      	mov	r1, r6
 800c51e:	bf28      	it	cs
 800c520:	463a      	movcs	r2, r7
 800c522:	f7fe f87c 	bl	800a61e <memcpy>
 800c526:	4631      	mov	r1, r6
 800c528:	4640      	mov	r0, r8
 800c52a:	f7fe ff1f 	bl	800b36c <_free_r>
 800c52e:	e7e1      	b.n	800c4f4 <_realloc_r+0x1e>
 800c530:	4635      	mov	r5, r6
 800c532:	e7df      	b.n	800c4f4 <_realloc_r+0x1e>

0800c534 <__ascii_wctomb>:
 800c534:	b149      	cbz	r1, 800c54a <__ascii_wctomb+0x16>
 800c536:	2aff      	cmp	r2, #255	; 0xff
 800c538:	bf85      	ittet	hi
 800c53a:	238a      	movhi	r3, #138	; 0x8a
 800c53c:	6003      	strhi	r3, [r0, #0]
 800c53e:	700a      	strbls	r2, [r1, #0]
 800c540:	f04f 30ff 	movhi.w	r0, #4294967295
 800c544:	bf98      	it	ls
 800c546:	2001      	movls	r0, #1
 800c548:	4770      	bx	lr
 800c54a:	4608      	mov	r0, r1
 800c54c:	4770      	bx	lr

0800c54e <_raise_r>:
 800c54e:	291f      	cmp	r1, #31
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4604      	mov	r4, r0
 800c554:	460d      	mov	r5, r1
 800c556:	d904      	bls.n	800c562 <_raise_r+0x14>
 800c558:	2316      	movs	r3, #22
 800c55a:	6003      	str	r3, [r0, #0]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	bd38      	pop	{r3, r4, r5, pc}
 800c562:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c564:	b112      	cbz	r2, 800c56c <_raise_r+0x1e>
 800c566:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c56a:	b94b      	cbnz	r3, 800c580 <_raise_r+0x32>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 f831 	bl	800c5d4 <_getpid_r>
 800c572:	462a      	mov	r2, r5
 800c574:	4601      	mov	r1, r0
 800c576:	4620      	mov	r0, r4
 800c578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c57c:	f000 b818 	b.w	800c5b0 <_kill_r>
 800c580:	2b01      	cmp	r3, #1
 800c582:	d00a      	beq.n	800c59a <_raise_r+0x4c>
 800c584:	1c59      	adds	r1, r3, #1
 800c586:	d103      	bne.n	800c590 <_raise_r+0x42>
 800c588:	2316      	movs	r3, #22
 800c58a:	6003      	str	r3, [r0, #0]
 800c58c:	2001      	movs	r0, #1
 800c58e:	e7e7      	b.n	800c560 <_raise_r+0x12>
 800c590:	2400      	movs	r4, #0
 800c592:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c596:	4628      	mov	r0, r5
 800c598:	4798      	blx	r3
 800c59a:	2000      	movs	r0, #0
 800c59c:	e7e0      	b.n	800c560 <_raise_r+0x12>
	...

0800c5a0 <raise>:
 800c5a0:	4b02      	ldr	r3, [pc, #8]	; (800c5ac <raise+0xc>)
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	6818      	ldr	r0, [r3, #0]
 800c5a6:	f7ff bfd2 	b.w	800c54e <_raise_r>
 800c5aa:	bf00      	nop
 800c5ac:	20000074 	.word	0x20000074

0800c5b0 <_kill_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d07      	ldr	r5, [pc, #28]	; (800c5d0 <_kill_r+0x20>)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4608      	mov	r0, r1
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	602b      	str	r3, [r5, #0]
 800c5be:	f7f5 ff53 	bl	8002468 <_kill>
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	d102      	bne.n	800c5cc <_kill_r+0x1c>
 800c5c6:	682b      	ldr	r3, [r5, #0]
 800c5c8:	b103      	cbz	r3, 800c5cc <_kill_r+0x1c>
 800c5ca:	6023      	str	r3, [r4, #0]
 800c5cc:	bd38      	pop	{r3, r4, r5, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20004e4c 	.word	0x20004e4c

0800c5d4 <_getpid_r>:
 800c5d4:	f7f5 bf40 	b.w	8002458 <_getpid>

0800c5d8 <_malloc_usable_size_r>:
 800c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5dc:	1f18      	subs	r0, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfbc      	itt	lt
 800c5e2:	580b      	ldrlt	r3, [r1, r0]
 800c5e4:	18c0      	addlt	r0, r0, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_init>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	bf00      	nop
 800c5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ee:	bc08      	pop	{r3}
 800c5f0:	469e      	mov	lr, r3
 800c5f2:	4770      	bx	lr

0800c5f4 <_fini>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	bf00      	nop
 800c5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fa:	bc08      	pop	{r3}
 800c5fc:	469e      	mov	lr, r3
 800c5fe:	4770      	bx	lr
